<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/devtools/build/v1/publish_build_event.proto

namespace Google\Cloud\Build\V1\PublishLifecycleEventRequest;

use UnexpectedValueException;

/**
 * The service level of the build request. Backends only uses this value when
 * the BuildEnqueued event is published to determine what level of service
 * this build should receive.
 *
 * Protobuf type <code>google.devtools.build.v1.PublishLifecycleEventRequest.ServiceLevel</code>
 */
class ServiceLevel
{
    /**
     * Non-interactive builds can tolerate longer event latencies. This is the
     * default ServiceLevel if callers do not specify one.
     *
     * Generated from protobuf enum <code>NONINTERACTIVE = 0;</code>
     */
    const NONINTERACTIVE = 0;
    /**
     * The events of an interactive build should be delivered with low latency.
     *
     * Generated from protobuf enum <code>INTERACTIVE = 1;</code>
     */
    const INTERACTIVE = 1;

    private static $valueToName = [
        self::NONINTERACTIVE => 'NONINTERACTIVE',
        self::INTERACTIVE => 'INTERACTIVE',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(ServiceLevel::class, \Google\Cloud\Build\V1\PublishLifecycleEventRequest_ServiceLevel::class);

