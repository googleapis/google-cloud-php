<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/devtools/cloudbuild/v1/cloudbuild.proto

namespace Google\Cloud\Build\V1;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Push contains filter properties for matching GitHub git pushes.
 *
 * Generated from protobuf message <code>google.devtools.cloudbuild.v1.PushFilter</code>
 */
class PushFilter extends \Google\Protobuf\Internal\Message
{
    /**
     * When true, only trigger a build if the revision regex does NOT match the
     * git_ref regex.
     *
     * Generated from protobuf field <code>bool invert_regex = 4;</code>
     */
    private $invert_regex = false;
    protected $git_ref;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $branch
     *           Regexes matching branches to build.
     *           The syntax of the regular expressions accepted is the syntax accepted by
     *           RE2 and described at https://github.com/google/re2/wiki/Syntax
     *     @type string $tag
     *           Regexes matching tags to build.
     *           The syntax of the regular expressions accepted is the syntax accepted by
     *           RE2 and described at https://github.com/google/re2/wiki/Syntax
     *     @type bool $invert_regex
     *           When true, only trigger a build if the revision regex does NOT match the
     *           git_ref regex.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Google\Devtools\Cloudbuild\V1\Cloudbuild::initOnce();
        parent::__construct($data);
    }

    /**
     * Regexes matching branches to build.
     * The syntax of the regular expressions accepted is the syntax accepted by
     * RE2 and described at https://github.com/google/re2/wiki/Syntax
     *
     * Generated from protobuf field <code>string branch = 2;</code>
     * @return string
     */
    public function getBranch()
    {
        return $this->readOneof(2);
    }

    public function hasBranch()
    {
        return $this->hasOneof(2);
    }

    /**
     * Regexes matching branches to build.
     * The syntax of the regular expressions accepted is the syntax accepted by
     * RE2 and described at https://github.com/google/re2/wiki/Syntax
     *
     * Generated from protobuf field <code>string branch = 2;</code>
     * @param string $var
     * @return $this
     */
    public function setBranch($var)
    {
        GPBUtil::checkString($var, True);
        $this->writeOneof(2, $var);

        return $this;
    }

    /**
     * Regexes matching tags to build.
     * The syntax of the regular expressions accepted is the syntax accepted by
     * RE2 and described at https://github.com/google/re2/wiki/Syntax
     *
     * Generated from protobuf field <code>string tag = 3;</code>
     * @return string
     */
    public function getTag()
    {
        return $this->readOneof(3);
    }

    public function hasTag()
    {
        return $this->hasOneof(3);
    }

    /**
     * Regexes matching tags to build.
     * The syntax of the regular expressions accepted is the syntax accepted by
     * RE2 and described at https://github.com/google/re2/wiki/Syntax
     *
     * Generated from protobuf field <code>string tag = 3;</code>
     * @param string $var
     * @return $this
     */
    public function setTag($var)
    {
        GPBUtil::checkString($var, True);
        $this->writeOneof(3, $var);

        return $this;
    }

    /**
     * When true, only trigger a build if the revision regex does NOT match the
     * git_ref regex.
     *
     * Generated from protobuf field <code>bool invert_regex = 4;</code>
     * @return bool
     */
    public function getInvertRegex()
    {
        return $this->invert_regex;
    }

    /**
     * When true, only trigger a build if the revision regex does NOT match the
     * git_ref regex.
     *
     * Generated from protobuf field <code>bool invert_regex = 4;</code>
     * @param bool $var
     * @return $this
     */
    public function setInvertRegex($var)
    {
        GPBUtil::checkBool($var);
        $this->invert_regex = $var;

        return $this;
    }

    /**
     * @return string
     */
    public function getGitRef()
    {
        return $this->whichOneof("git_ref");
    }

}

