<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/cloud/apihub/v1/plugin_service.proto

namespace Google\Cloud\ApiHub\V1;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * The
 * [ListPluginInstances][google.cloud.apihub.v1.ApiHubPlugin.ListPluginInstances]
 * method's request.
 *
 * Generated from protobuf message <code>google.cloud.apihub.v1.ListPluginInstancesRequest</code>
 */
class ListPluginInstancesRequest extends \Google\Protobuf\Internal\Message
{
    /**
     * Required. The parent resource where this plugin will be created.
     * Format: `projects/{project}/locations/{location}/plugins/{plugin}`.
     * To list plugin instances for multiple plugins,
     * use the - character instead of the plugin ID.
     *
     * Generated from protobuf field <code>string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {</code>
     */
    protected $parent = '';
    /**
     * Optional. An expression that filters the list of plugin instances.
     * A filter expression consists of a field name, a comparison
     * operator, and a value for filtering. The value must be a string. The
     * comparison operator must be one of: `<`, `>` or
     * `=`. Filters are not case sensitive.
     * The following fields in the `PluginInstances` are eligible for filtering:
     *   * `state` - The state of the Plugin Instance. Allowed
     *   comparison operators: `=`.
     * A filter function is also supported in the filter string. The filter
     * function is `id(name)`. The `id(name)` function returns the id of the
     * resource name. For example, `id(name) = \"plugin-instance-1\"` is
     * equivalent to `name =
     * \"projects/test-project-id/locations/test-location-id/plugins/plugin-1/instances/plugin-instance-1\"`
     * provided the parent is
     * `projects/test-project-id/locations/test-location-id/plugins/plugin-1`.
     * Expressions are combined with either `AND` logic operator or `OR` logical
     * operator but not both of them together i.e. only one of the `AND` or `OR`
     * operator can be used throughout the filter string and both the operators
     * cannot be used together. No other logical operators are
     * supported. At most three filter fields are allowed in the filter
     * string and if provided more than that then `INVALID_ARGUMENT` error is
     * returned by the API.
     * Here are a few examples:
     *   * `state = ENABLED` - The plugin instance is in enabled state.
     *
     * Generated from protobuf field <code>string filter = 2 [(.google.api.field_behavior) = OPTIONAL];</code>
     */
    protected $filter = '';
    /**
     * Optional. The maximum number of hub plugins to return. The service may
     * return fewer than this value. If unspecified, at most 50 hub plugins will
     * be returned. The maximum value is 1000; values above 1000 will be coerced
     * to 1000.
     *
     * Generated from protobuf field <code>int32 page_size = 3 [(.google.api.field_behavior) = OPTIONAL];</code>
     */
    protected $page_size = 0;
    /**
     * Optional. A page token, received from a previous `ListPluginInstances`
     * call. Provide this to retrieve the subsequent page.
     * When paginating, all other parameters provided to `ListPluginInstances`
     * must match the call that provided the page token.
     *
     * Generated from protobuf field <code>string page_token = 4 [(.google.api.field_behavior) = OPTIONAL];</code>
     */
    protected $page_token = '';

    /**
     * @param string $parent Required. The parent resource where this plugin will be created.
     *                       Format: `projects/{project}/locations/{location}/plugins/{plugin}`.
     *                       To list plugin instances for multiple plugins,
     *                       use the - character instead of the plugin ID. Please see
     *                       {@see ApiHubPluginClient::pluginName()} for help formatting this field.
     *
     * @return \Google\Cloud\ApiHub\V1\ListPluginInstancesRequest
     *
     * @experimental
     */
    public static function build(string $parent): self
    {
        return (new self())
            ->setParent($parent);
    }

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $parent
     *           Required. The parent resource where this plugin will be created.
     *           Format: `projects/{project}/locations/{location}/plugins/{plugin}`.
     *           To list plugin instances for multiple plugins,
     *           use the - character instead of the plugin ID.
     *     @type string $filter
     *           Optional. An expression that filters the list of plugin instances.
     *           A filter expression consists of a field name, a comparison
     *           operator, and a value for filtering. The value must be a string. The
     *           comparison operator must be one of: `<`, `>` or
     *           `=`. Filters are not case sensitive.
     *           The following fields in the `PluginInstances` are eligible for filtering:
     *             * `state` - The state of the Plugin Instance. Allowed
     *             comparison operators: `=`.
     *           A filter function is also supported in the filter string. The filter
     *           function is `id(name)`. The `id(name)` function returns the id of the
     *           resource name. For example, `id(name) = \"plugin-instance-1\"` is
     *           equivalent to `name =
     *           \"projects/test-project-id/locations/test-location-id/plugins/plugin-1/instances/plugin-instance-1\"`
     *           provided the parent is
     *           `projects/test-project-id/locations/test-location-id/plugins/plugin-1`.
     *           Expressions are combined with either `AND` logic operator or `OR` logical
     *           operator but not both of them together i.e. only one of the `AND` or `OR`
     *           operator can be used throughout the filter string and both the operators
     *           cannot be used together. No other logical operators are
     *           supported. At most three filter fields are allowed in the filter
     *           string and if provided more than that then `INVALID_ARGUMENT` error is
     *           returned by the API.
     *           Here are a few examples:
     *             * `state = ENABLED` - The plugin instance is in enabled state.
     *     @type int $page_size
     *           Optional. The maximum number of hub plugins to return. The service may
     *           return fewer than this value. If unspecified, at most 50 hub plugins will
     *           be returned. The maximum value is 1000; values above 1000 will be coerced
     *           to 1000.
     *     @type string $page_token
     *           Optional. A page token, received from a previous `ListPluginInstances`
     *           call. Provide this to retrieve the subsequent page.
     *           When paginating, all other parameters provided to `ListPluginInstances`
     *           must match the call that provided the page token.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Google\Cloud\Apihub\V1\PluginService::initOnce();
        parent::__construct($data);
    }

    /**
     * Required. The parent resource where this plugin will be created.
     * Format: `projects/{project}/locations/{location}/plugins/{plugin}`.
     * To list plugin instances for multiple plugins,
     * use the - character instead of the plugin ID.
     *
     * Generated from protobuf field <code>string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {</code>
     * @return string
     */
    public function getParent()
    {
        return $this->parent;
    }

    /**
     * Required. The parent resource where this plugin will be created.
     * Format: `projects/{project}/locations/{location}/plugins/{plugin}`.
     * To list plugin instances for multiple plugins,
     * use the - character instead of the plugin ID.
     *
     * Generated from protobuf field <code>string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {</code>
     * @param string $var
     * @return $this
     */
    public function setParent($var)
    {
        GPBUtil::checkString($var, True);
        $this->parent = $var;

        return $this;
    }

    /**
     * Optional. An expression that filters the list of plugin instances.
     * A filter expression consists of a field name, a comparison
     * operator, and a value for filtering. The value must be a string. The
     * comparison operator must be one of: `<`, `>` or
     * `=`. Filters are not case sensitive.
     * The following fields in the `PluginInstances` are eligible for filtering:
     *   * `state` - The state of the Plugin Instance. Allowed
     *   comparison operators: `=`.
     * A filter function is also supported in the filter string. The filter
     * function is `id(name)`. The `id(name)` function returns the id of the
     * resource name. For example, `id(name) = \"plugin-instance-1\"` is
     * equivalent to `name =
     * \"projects/test-project-id/locations/test-location-id/plugins/plugin-1/instances/plugin-instance-1\"`
     * provided the parent is
     * `projects/test-project-id/locations/test-location-id/plugins/plugin-1`.
     * Expressions are combined with either `AND` logic operator or `OR` logical
     * operator but not both of them together i.e. only one of the `AND` or `OR`
     * operator can be used throughout the filter string and both the operators
     * cannot be used together. No other logical operators are
     * supported. At most three filter fields are allowed in the filter
     * string and if provided more than that then `INVALID_ARGUMENT` error is
     * returned by the API.
     * Here are a few examples:
     *   * `state = ENABLED` - The plugin instance is in enabled state.
     *
     * Generated from protobuf field <code>string filter = 2 [(.google.api.field_behavior) = OPTIONAL];</code>
     * @return string
     */
    public function getFilter()
    {
        return $this->filter;
    }

    /**
     * Optional. An expression that filters the list of plugin instances.
     * A filter expression consists of a field name, a comparison
     * operator, and a value for filtering. The value must be a string. The
     * comparison operator must be one of: `<`, `>` or
     * `=`. Filters are not case sensitive.
     * The following fields in the `PluginInstances` are eligible for filtering:
     *   * `state` - The state of the Plugin Instance. Allowed
     *   comparison operators: `=`.
     * A filter function is also supported in the filter string. The filter
     * function is `id(name)`. The `id(name)` function returns the id of the
     * resource name. For example, `id(name) = \"plugin-instance-1\"` is
     * equivalent to `name =
     * \"projects/test-project-id/locations/test-location-id/plugins/plugin-1/instances/plugin-instance-1\"`
     * provided the parent is
     * `projects/test-project-id/locations/test-location-id/plugins/plugin-1`.
     * Expressions are combined with either `AND` logic operator or `OR` logical
     * operator but not both of them together i.e. only one of the `AND` or `OR`
     * operator can be used throughout the filter string and both the operators
     * cannot be used together. No other logical operators are
     * supported. At most three filter fields are allowed in the filter
     * string and if provided more than that then `INVALID_ARGUMENT` error is
     * returned by the API.
     * Here are a few examples:
     *   * `state = ENABLED` - The plugin instance is in enabled state.
     *
     * Generated from protobuf field <code>string filter = 2 [(.google.api.field_behavior) = OPTIONAL];</code>
     * @param string $var
     * @return $this
     */
    public function setFilter($var)
    {
        GPBUtil::checkString($var, True);
        $this->filter = $var;

        return $this;
    }

    /**
     * Optional. The maximum number of hub plugins to return. The service may
     * return fewer than this value. If unspecified, at most 50 hub plugins will
     * be returned. The maximum value is 1000; values above 1000 will be coerced
     * to 1000.
     *
     * Generated from protobuf field <code>int32 page_size = 3 [(.google.api.field_behavior) = OPTIONAL];</code>
     * @return int
     */
    public function getPageSize()
    {
        return $this->page_size;
    }

    /**
     * Optional. The maximum number of hub plugins to return. The service may
     * return fewer than this value. If unspecified, at most 50 hub plugins will
     * be returned. The maximum value is 1000; values above 1000 will be coerced
     * to 1000.
     *
     * Generated from protobuf field <code>int32 page_size = 3 [(.google.api.field_behavior) = OPTIONAL];</code>
     * @param int $var
     * @return $this
     */
    public function setPageSize($var)
    {
        GPBUtil::checkInt32($var);
        $this->page_size = $var;

        return $this;
    }

    /**
     * Optional. A page token, received from a previous `ListPluginInstances`
     * call. Provide this to retrieve the subsequent page.
     * When paginating, all other parameters provided to `ListPluginInstances`
     * must match the call that provided the page token.
     *
     * Generated from protobuf field <code>string page_token = 4 [(.google.api.field_behavior) = OPTIONAL];</code>
     * @return string
     */
    public function getPageToken()
    {
        return $this->page_token;
    }

    /**
     * Optional. A page token, received from a previous `ListPluginInstances`
     * call. Provide this to retrieve the subsequent page.
     * When paginating, all other parameters provided to `ListPluginInstances`
     * must match the call that provided the page token.
     *
     * Generated from protobuf field <code>string page_token = 4 [(.google.api.field_behavior) = OPTIONAL];</code>
     * @param string $var
     * @return $this
     */
    public function setPageToken($var)
    {
        GPBUtil::checkString($var, True);
        $this->page_token = $var;

        return $this;
    }

}

