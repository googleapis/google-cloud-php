<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/cloud/networkconnectivity/v1/hub.proto

namespace Google\Cloud\NetworkConnectivity\V1;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * A router appliance instance is a Compute Engine virtual machine (VM) instance
 * that acts as a BGP speaker. A router appliance instance is specified by the
 * URI of the VM and the internal IP address of one of the VM's network
 * interfaces.
 *
 * Generated from protobuf message <code>google.cloud.networkconnectivity.v1.RouterApplianceInstance</code>
 */
class RouterApplianceInstance extends \Google\Protobuf\Internal\Message
{
    /**
     * The URI of the VM.
     *
     * Generated from protobuf field <code>string virtual_machine = 1 [(.google.api.resource_reference) = {</code>
     */
    private $virtual_machine = '';
    /**
     * The IP address on the VM to use for peering.
     *
     * Generated from protobuf field <code>string ip_address = 3;</code>
     */
    private $ip_address = '';

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $virtual_machine
     *           The URI of the VM.
     *     @type string $ip_address
     *           The IP address on the VM to use for peering.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Google\Cloud\Networkconnectivity\V1\Hub::initOnce();
        parent::__construct($data);
    }

    /**
     * The URI of the VM.
     *
     * Generated from protobuf field <code>string virtual_machine = 1 [(.google.api.resource_reference) = {</code>
     * @return string
     */
    public function getVirtualMachine()
    {
        return $this->virtual_machine;
    }

    /**
     * The URI of the VM.
     *
     * Generated from protobuf field <code>string virtual_machine = 1 [(.google.api.resource_reference) = {</code>
     * @param string $var
     * @return $this
     */
    public function setVirtualMachine($var)
    {
        GPBUtil::checkString($var, True);
        $this->virtual_machine = $var;

        return $this;
    }

    /**
     * The IP address on the VM to use for peering.
     *
     * Generated from protobuf field <code>string ip_address = 3;</code>
     * @return string
     */
    public function getIpAddress()
    {
        return $this->ip_address;
    }

    /**
     * The IP address on the VM to use for peering.
     *
     * Generated from protobuf field <code>string ip_address = 3;</code>
     * @param string $var
     * @return $this
     */
    public function setIpAddress($var)
    {
        GPBUtil::checkString($var, True);
        $this->ip_address = $var;

        return $this;
    }

}

