<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/cloud/networkconnectivity/v1/internal_range.proto

namespace Google\Cloud\NetworkConnectivity\V1\InternalRange;

use UnexpectedValueException;

/**
 * Enumeration of range auto-allocation strategies
 *
 * Protobuf type <code>google.cloud.networkconnectivity.v1.InternalRange.AllocationStrategy</code>
 */
class AllocationStrategy
{
    /**
     * Unspecified is the only valid option when the range is specified
     * explicitly by ip_cidr_range field. Otherwise unspefified means using the
     * default strategy.
     *
     * Generated from protobuf enum <code>ALLOCATION_STRATEGY_UNSPECIFIED = 0;</code>
     */
    const ALLOCATION_STRATEGY_UNSPECIFIED = 0;
    /**
     * Random strategy, the legacy algorithm, used for backwards compatibility.
     * This allocation strategy remains efficient in the case of concurrent
     * allocation requests in the same peered network space and doesn't require
     * providing the level of concurrency in an explicit parameter, but it is
     * prone to fragmenting available address space.
     *
     * Generated from protobuf enum <code>RANDOM = 1;</code>
     */
    const RANDOM = 1;
    /**
     * Pick the first available address range. This strategy is deterministic
     * and the result is easy to predict.
     *
     * Generated from protobuf enum <code>FIRST_AVAILABLE = 2;</code>
     */
    const FIRST_AVAILABLE = 2;
    /**
     * Pick an arbitrary range out of the first N available ones. The N will be
     * set in the first_available_ranges_lookup_size field. This strategy should
     * be used when concurrent allocation requests are made in the same space of
     * peered networks while the fragmentation of the addrress space is reduced.
     *
     * Generated from protobuf enum <code>RANDOM_FIRST_N_AVAILABLE = 3;</code>
     */
    const RANDOM_FIRST_N_AVAILABLE = 3;
    /**
     * Pick the smallest but fitting available range. This deterministic
     * strategy minimizes fragmentation of the address space.
     *
     * Generated from protobuf enum <code>FIRST_SMALLEST_FITTING = 4;</code>
     */
    const FIRST_SMALLEST_FITTING = 4;

    private static $valueToName = [
        self::ALLOCATION_STRATEGY_UNSPECIFIED => 'ALLOCATION_STRATEGY_UNSPECIFIED',
        self::RANDOM => 'RANDOM',
        self::FIRST_AVAILABLE => 'FIRST_AVAILABLE',
        self::RANDOM_FIRST_N_AVAILABLE => 'RANDOM_FIRST_N_AVAILABLE',
        self::FIRST_SMALLEST_FITTING => 'FIRST_SMALLEST_FITTING',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}


