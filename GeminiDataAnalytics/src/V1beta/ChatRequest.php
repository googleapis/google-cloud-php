<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/cloud/geminidataanalytics/v1beta/data_chat_service.proto

namespace Google\Cloud\GeminiDataAnalytics\V1beta;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Request for Chat.
 *
 * Generated from protobuf message <code>google.cloud.geminidataanalytics.v1beta.ChatRequest</code>
 */
class ChatRequest extends \Google\Protobuf\Internal\Message
{
    /**
     * Optional. The GCP project to be used for quota and billing.
     *
     * Generated from protobuf field <code>string project = 1 [deprecated = true, (.google.api.field_behavior) = OPTIONAL, (.google.api.resource_reference) = {</code>
     * @deprecated
     */
    protected $project = '';
    /**
     * Required. The parent value for chat request.
     * Pattern: `projects/{project}/locations/{location}`
     *
     * Generated from protobuf field <code>string parent = 3 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    protected $parent = '';
    /**
     * Required. Content of current conversation.
     *
     * Generated from protobuf field <code>repeated .google.cloud.geminidataanalytics.v1beta.Message messages = 2 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    private $messages;
    protected $context_provider;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type \Google\Cloud\GeminiDataAnalytics\V1beta\Context $inline_context
     *           Optional. Inline context for the chat request. Use this to chat
     *           statelessly (without managed conversation persistence and without an
     *           Agent) by passing all context inline.
     *     @type \Google\Cloud\GeminiDataAnalytics\V1beta\ConversationReference $conversation_reference
     *           Optional. Reference to a persisted conversation and agent context.
     *           Use this to chat with an Agent using managed conversation persistence.
     *     @type \Google\Cloud\GeminiDataAnalytics\V1beta\DataAgentContext $data_agent_context
     *           Optional. Context for the chat request. Use this to chat with an Agent
     *           statelessly, without managed conversation persistence.
     *     @type string $project
     *           Optional. The GCP project to be used for quota and billing.
     *     @type string $parent
     *           Required. The parent value for chat request.
     *           Pattern: `projects/{project}/locations/{location}`
     *     @type array<\Google\Cloud\GeminiDataAnalytics\V1beta\Message>|\Google\Protobuf\Internal\RepeatedField $messages
     *           Required. Content of current conversation.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Google\Cloud\Geminidataanalytics\V1Beta\DataChatService::initOnce();
        parent::__construct($data);
    }

    /**
     * Optional. Inline context for the chat request. Use this to chat
     * statelessly (without managed conversation persistence and without an
     * Agent) by passing all context inline.
     *
     * Generated from protobuf field <code>.google.cloud.geminidataanalytics.v1beta.Context inline_context = 101 [(.google.api.field_behavior) = OPTIONAL];</code>
     * @return \Google\Cloud\GeminiDataAnalytics\V1beta\Context|null
     */
    public function getInlineContext()
    {
        return $this->readOneof(101);
    }

    public function hasInlineContext()
    {
        return $this->hasOneof(101);
    }

    /**
     * Optional. Inline context for the chat request. Use this to chat
     * statelessly (without managed conversation persistence and without an
     * Agent) by passing all context inline.
     *
     * Generated from protobuf field <code>.google.cloud.geminidataanalytics.v1beta.Context inline_context = 101 [(.google.api.field_behavior) = OPTIONAL];</code>
     * @param \Google\Cloud\GeminiDataAnalytics\V1beta\Context $var
     * @return $this
     */
    public function setInlineContext($var)
    {
        GPBUtil::checkMessage($var, \Google\Cloud\GeminiDataAnalytics\V1beta\Context::class);
        $this->writeOneof(101, $var);

        return $this;
    }

    /**
     * Optional. Reference to a persisted conversation and agent context.
     * Use this to chat with an Agent using managed conversation persistence.
     *
     * Generated from protobuf field <code>.google.cloud.geminidataanalytics.v1beta.ConversationReference conversation_reference = 103 [(.google.api.field_behavior) = OPTIONAL];</code>
     * @return \Google\Cloud\GeminiDataAnalytics\V1beta\ConversationReference|null
     */
    public function getConversationReference()
    {
        return $this->readOneof(103);
    }

    public function hasConversationReference()
    {
        return $this->hasOneof(103);
    }

    /**
     * Optional. Reference to a persisted conversation and agent context.
     * Use this to chat with an Agent using managed conversation persistence.
     *
     * Generated from protobuf field <code>.google.cloud.geminidataanalytics.v1beta.ConversationReference conversation_reference = 103 [(.google.api.field_behavior) = OPTIONAL];</code>
     * @param \Google\Cloud\GeminiDataAnalytics\V1beta\ConversationReference $var
     * @return $this
     */
    public function setConversationReference($var)
    {
        GPBUtil::checkMessage($var, \Google\Cloud\GeminiDataAnalytics\V1beta\ConversationReference::class);
        $this->writeOneof(103, $var);

        return $this;
    }

    /**
     * Optional. Context for the chat request. Use this to chat with an Agent
     * statelessly, without managed conversation persistence.
     *
     * Generated from protobuf field <code>.google.cloud.geminidataanalytics.v1beta.DataAgentContext data_agent_context = 104 [(.google.api.field_behavior) = OPTIONAL];</code>
     * @return \Google\Cloud\GeminiDataAnalytics\V1beta\DataAgentContext|null
     */
    public function getDataAgentContext()
    {
        return $this->readOneof(104);
    }

    public function hasDataAgentContext()
    {
        return $this->hasOneof(104);
    }

    /**
     * Optional. Context for the chat request. Use this to chat with an Agent
     * statelessly, without managed conversation persistence.
     *
     * Generated from protobuf field <code>.google.cloud.geminidataanalytics.v1beta.DataAgentContext data_agent_context = 104 [(.google.api.field_behavior) = OPTIONAL];</code>
     * @param \Google\Cloud\GeminiDataAnalytics\V1beta\DataAgentContext $var
     * @return $this
     */
    public function setDataAgentContext($var)
    {
        GPBUtil::checkMessage($var, \Google\Cloud\GeminiDataAnalytics\V1beta\DataAgentContext::class);
        $this->writeOneof(104, $var);

        return $this;
    }

    /**
     * Optional. The GCP project to be used for quota and billing.
     *
     * Generated from protobuf field <code>string project = 1 [deprecated = true, (.google.api.field_behavior) = OPTIONAL, (.google.api.resource_reference) = {</code>
     * @return string
     * @deprecated
     */
    public function getProject()
    {
        if ($this->project !== '') {
            @trigger_error('project is deprecated.', E_USER_DEPRECATED);
        }
        return $this->project;
    }

    /**
     * Optional. The GCP project to be used for quota and billing.
     *
     * Generated from protobuf field <code>string project = 1 [deprecated = true, (.google.api.field_behavior) = OPTIONAL, (.google.api.resource_reference) = {</code>
     * @param string $var
     * @return $this
     * @deprecated
     */
    public function setProject($var)
    {
        @trigger_error('project is deprecated.', E_USER_DEPRECATED);
        GPBUtil::checkString($var, True);
        $this->project = $var;

        return $this;
    }

    /**
     * Required. The parent value for chat request.
     * Pattern: `projects/{project}/locations/{location}`
     *
     * Generated from protobuf field <code>string parent = 3 [(.google.api.field_behavior) = REQUIRED];</code>
     * @return string
     */
    public function getParent()
    {
        return $this->parent;
    }

    /**
     * Required. The parent value for chat request.
     * Pattern: `projects/{project}/locations/{location}`
     *
     * Generated from protobuf field <code>string parent = 3 [(.google.api.field_behavior) = REQUIRED];</code>
     * @param string $var
     * @return $this
     */
    public function setParent($var)
    {
        GPBUtil::checkString($var, True);
        $this->parent = $var;

        return $this;
    }

    /**
     * Required. Content of current conversation.
     *
     * Generated from protobuf field <code>repeated .google.cloud.geminidataanalytics.v1beta.Message messages = 2 [(.google.api.field_behavior) = REQUIRED];</code>
     * @return \Google\Protobuf\Internal\RepeatedField
     */
    public function getMessages()
    {
        return $this->messages;
    }

    /**
     * Required. Content of current conversation.
     *
     * Generated from protobuf field <code>repeated .google.cloud.geminidataanalytics.v1beta.Message messages = 2 [(.google.api.field_behavior) = REQUIRED];</code>
     * @param array<\Google\Cloud\GeminiDataAnalytics\V1beta\Message>|\Google\Protobuf\Internal\RepeatedField $var
     * @return $this
     */
    public function setMessages($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::MESSAGE, \Google\Cloud\GeminiDataAnalytics\V1beta\Message::class);
        $this->messages = $arr;

        return $this;
    }

    /**
     * @return string
     */
    public function getContextProvider()
    {
        return $this->whichOneof("context_provider");
    }

}

