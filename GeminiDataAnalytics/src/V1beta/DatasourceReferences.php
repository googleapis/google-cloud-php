<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/cloud/geminidataanalytics/v1beta/datasource.proto

namespace Google\Cloud\GeminiDataAnalytics\V1beta;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * A collection of references to datasources.
 *
 * Generated from protobuf message <code>google.cloud.geminidataanalytics.v1beta.DatasourceReferences</code>
 */
class DatasourceReferences extends \Google\Protobuf\Internal\Message
{
    protected $references;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type \Google\Cloud\GeminiDataAnalytics\V1beta\BigQueryTableReferences $bq
     *           References to BigQuery tables.
     *     @type \Google\Cloud\GeminiDataAnalytics\V1beta\StudioDatasourceReferences $studio
     *           References to LookerStudio datasources.
     *     @type \Google\Cloud\GeminiDataAnalytics\V1beta\LookerExploreReferences $looker
     *           References to Looker explores.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Google\Cloud\Geminidataanalytics\V1Beta\Datasource::initOnce();
        parent::__construct($data);
    }

    /**
     * References to BigQuery tables.
     *
     * Generated from protobuf field <code>.google.cloud.geminidataanalytics.v1beta.BigQueryTableReferences bq = 1;</code>
     * @return \Google\Cloud\GeminiDataAnalytics\V1beta\BigQueryTableReferences|null
     */
    public function getBq()
    {
        return $this->readOneof(1);
    }

    public function hasBq()
    {
        return $this->hasOneof(1);
    }

    /**
     * References to BigQuery tables.
     *
     * Generated from protobuf field <code>.google.cloud.geminidataanalytics.v1beta.BigQueryTableReferences bq = 1;</code>
     * @param \Google\Cloud\GeminiDataAnalytics\V1beta\BigQueryTableReferences $var
     * @return $this
     */
    public function setBq($var)
    {
        GPBUtil::checkMessage($var, \Google\Cloud\GeminiDataAnalytics\V1beta\BigQueryTableReferences::class);
        $this->writeOneof(1, $var);

        return $this;
    }

    /**
     * References to LookerStudio datasources.
     *
     * Generated from protobuf field <code>.google.cloud.geminidataanalytics.v1beta.StudioDatasourceReferences studio = 2;</code>
     * @return \Google\Cloud\GeminiDataAnalytics\V1beta\StudioDatasourceReferences|null
     */
    public function getStudio()
    {
        return $this->readOneof(2);
    }

    public function hasStudio()
    {
        return $this->hasOneof(2);
    }

    /**
     * References to LookerStudio datasources.
     *
     * Generated from protobuf field <code>.google.cloud.geminidataanalytics.v1beta.StudioDatasourceReferences studio = 2;</code>
     * @param \Google\Cloud\GeminiDataAnalytics\V1beta\StudioDatasourceReferences $var
     * @return $this
     */
    public function setStudio($var)
    {
        GPBUtil::checkMessage($var, \Google\Cloud\GeminiDataAnalytics\V1beta\StudioDatasourceReferences::class);
        $this->writeOneof(2, $var);

        return $this;
    }

    /**
     * References to Looker explores.
     *
     * Generated from protobuf field <code>.google.cloud.geminidataanalytics.v1beta.LookerExploreReferences looker = 3;</code>
     * @return \Google\Cloud\GeminiDataAnalytics\V1beta\LookerExploreReferences|null
     */
    public function getLooker()
    {
        return $this->readOneof(3);
    }

    public function hasLooker()
    {
        return $this->hasOneof(3);
    }

    /**
     * References to Looker explores.
     *
     * Generated from protobuf field <code>.google.cloud.geminidataanalytics.v1beta.LookerExploreReferences looker = 3;</code>
     * @param \Google\Cloud\GeminiDataAnalytics\V1beta\LookerExploreReferences $var
     * @return $this
     */
    public function setLooker($var)
    {
        GPBUtil::checkMessage($var, \Google\Cloud\GeminiDataAnalytics\V1beta\LookerExploreReferences::class);
        $this->writeOneof(3, $var);

        return $this;
    }

    /**
     * @return string
     */
    public function getReferences()
    {
        return $this->whichOneof("references");
    }

}

