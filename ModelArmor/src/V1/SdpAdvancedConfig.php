<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/cloud/modelarmor/v1/service.proto

namespace Google\Cloud\ModelArmor\V1;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Sensitive Data Protection Advanced configuration.
 *
 * Generated from protobuf message <code>google.cloud.modelarmor.v1.SdpAdvancedConfig</code>
 */
class SdpAdvancedConfig extends \Google\Protobuf\Internal\Message
{
    /**
     * Optional. Sensitive Data Protection inspect template resource name
     * If only inspect template is provided (de-identify template not provided),
     * then Sensitive Data Protection InspectContent action is performed during
     * Sanitization. All Sensitive Data Protection findings identified during
     * inspection will be returned as SdpFinding in SdpInsepctionResult.
     *  e.g.
     * `projects/{project}/locations/{location}/inspectTemplates/{inspect_template}`
     *
     * Generated from protobuf field <code>string inspect_template = 1 [(.google.api.field_behavior) = OPTIONAL];</code>
     */
    protected $inspect_template = '';
    /**
     * Optional. Optional Sensitive Data Protection Deidentify template resource
     * name.
     * If provided then DeidentifyContent action is performed during Sanitization
     * using this template and inspect template. The De-identified data will
     * be returned in SdpDeidentifyResult.
     * Note that all info-types present in the deidentify template must be present
     * in inspect template.
     * e.g.
     * `projects/{project}/locations/{location}/deidentifyTemplates/{deidentify_template}`
     *
     * Generated from protobuf field <code>string deidentify_template = 2 [(.google.api.field_behavior) = OPTIONAL];</code>
     */
    protected $deidentify_template = '';

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $inspect_template
     *           Optional. Sensitive Data Protection inspect template resource name
     *           If only inspect template is provided (de-identify template not provided),
     *           then Sensitive Data Protection InspectContent action is performed during
     *           Sanitization. All Sensitive Data Protection findings identified during
     *           inspection will be returned as SdpFinding in SdpInsepctionResult.
     *            e.g.
     *           `projects/{project}/locations/{location}/inspectTemplates/{inspect_template}`
     *     @type string $deidentify_template
     *           Optional. Optional Sensitive Data Protection Deidentify template resource
     *           name.
     *           If provided then DeidentifyContent action is performed during Sanitization
     *           using this template and inspect template. The De-identified data will
     *           be returned in SdpDeidentifyResult.
     *           Note that all info-types present in the deidentify template must be present
     *           in inspect template.
     *           e.g.
     *           `projects/{project}/locations/{location}/deidentifyTemplates/{deidentify_template}`
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Google\Cloud\Modelarmor\V1\Service::initOnce();
        parent::__construct($data);
    }

    /**
     * Optional. Sensitive Data Protection inspect template resource name
     * If only inspect template is provided (de-identify template not provided),
     * then Sensitive Data Protection InspectContent action is performed during
     * Sanitization. All Sensitive Data Protection findings identified during
     * inspection will be returned as SdpFinding in SdpInsepctionResult.
     *  e.g.
     * `projects/{project}/locations/{location}/inspectTemplates/{inspect_template}`
     *
     * Generated from protobuf field <code>string inspect_template = 1 [(.google.api.field_behavior) = OPTIONAL];</code>
     * @return string
     */
    public function getInspectTemplate()
    {
        return $this->inspect_template;
    }

    /**
     * Optional. Sensitive Data Protection inspect template resource name
     * If only inspect template is provided (de-identify template not provided),
     * then Sensitive Data Protection InspectContent action is performed during
     * Sanitization. All Sensitive Data Protection findings identified during
     * inspection will be returned as SdpFinding in SdpInsepctionResult.
     *  e.g.
     * `projects/{project}/locations/{location}/inspectTemplates/{inspect_template}`
     *
     * Generated from protobuf field <code>string inspect_template = 1 [(.google.api.field_behavior) = OPTIONAL];</code>
     * @param string $var
     * @return $this
     */
    public function setInspectTemplate($var)
    {
        GPBUtil::checkString($var, True);
        $this->inspect_template = $var;

        return $this;
    }

    /**
     * Optional. Optional Sensitive Data Protection Deidentify template resource
     * name.
     * If provided then DeidentifyContent action is performed during Sanitization
     * using this template and inspect template. The De-identified data will
     * be returned in SdpDeidentifyResult.
     * Note that all info-types present in the deidentify template must be present
     * in inspect template.
     * e.g.
     * `projects/{project}/locations/{location}/deidentifyTemplates/{deidentify_template}`
     *
     * Generated from protobuf field <code>string deidentify_template = 2 [(.google.api.field_behavior) = OPTIONAL];</code>
     * @return string
     */
    public function getDeidentifyTemplate()
    {
        return $this->deidentify_template;
    }

    /**
     * Optional. Optional Sensitive Data Protection Deidentify template resource
     * name.
     * If provided then DeidentifyContent action is performed during Sanitization
     * using this template and inspect template. The De-identified data will
     * be returned in SdpDeidentifyResult.
     * Note that all info-types present in the deidentify template must be present
     * in inspect template.
     * e.g.
     * `projects/{project}/locations/{location}/deidentifyTemplates/{deidentify_template}`
     *
     * Generated from protobuf field <code>string deidentify_template = 2 [(.google.api.field_behavior) = OPTIONAL];</code>
     * @param string $var
     * @return $this
     */
    public function setDeidentifyTemplate($var)
    {
        GPBUtil::checkString($var, True);
        $this->deidentify_template = $var;

        return $this;
    }

}

