<?php
/*
 * Copyright 2025 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * GENERATED CODE WARNING
 * Generated by gapic-generator-php from the file
 * https://github.com/googleapis/googleapis/blob/master/google/cloud/modelarmor/v1/service.proto
 * Updates to the above are reflected here through a refresh process.
 */

namespace Google\Cloud\ModelArmor\V1\Client;

use Google\ApiCore\ApiException;
use Google\ApiCore\CredentialsWrapper;
use Google\ApiCore\GapicClientTrait;
use Google\ApiCore\PagedListResponse;
use Google\ApiCore\ResourceHelperTrait;
use Google\ApiCore\RetrySettings;
use Google\ApiCore\Transport\TransportInterface;
use Google\ApiCore\ValidationException;
use Google\Auth\FetchAuthTokenInterface;
use Google\Cloud\Location\GetLocationRequest;
use Google\Cloud\Location\ListLocationsRequest;
use Google\Cloud\Location\Location;
use Google\Cloud\ModelArmor\V1\CreateTemplateRequest;
use Google\Cloud\ModelArmor\V1\DeleteTemplateRequest;
use Google\Cloud\ModelArmor\V1\FloorSetting;
use Google\Cloud\ModelArmor\V1\GetFloorSettingRequest;
use Google\Cloud\ModelArmor\V1\GetTemplateRequest;
use Google\Cloud\ModelArmor\V1\ListTemplatesRequest;
use Google\Cloud\ModelArmor\V1\SanitizeModelResponseRequest;
use Google\Cloud\ModelArmor\V1\SanitizeModelResponseResponse;
use Google\Cloud\ModelArmor\V1\SanitizeUserPromptRequest;
use Google\Cloud\ModelArmor\V1\SanitizeUserPromptResponse;
use Google\Cloud\ModelArmor\V1\Template;
use Google\Cloud\ModelArmor\V1\UpdateFloorSettingRequest;
use Google\Cloud\ModelArmor\V1\UpdateTemplateRequest;
use GuzzleHttp\Promise\PromiseInterface;
use Psr\Log\LoggerInterface;

/**
 * Service Description: Service describing handlers for resources
 *
 * This class provides the ability to make remote calls to the backing service through method
 * calls that map to API methods.
 *
 * Many parameters require resource names to be formatted in a particular way. To
 * assist with these names, this class includes a format method for each type of
 * name, and additionally a parseName method to extract the individual identifiers
 * contained within formatted names that are returned by the API.
 *
 * @method PromiseInterface<Template> createTemplateAsync(CreateTemplateRequest $request, array $optionalArgs = [])
 * @method PromiseInterface<void> deleteTemplateAsync(DeleteTemplateRequest $request, array $optionalArgs = [])
 * @method PromiseInterface<FloorSetting> getFloorSettingAsync(GetFloorSettingRequest $request, array $optionalArgs = [])
 * @method PromiseInterface<Template> getTemplateAsync(GetTemplateRequest $request, array $optionalArgs = [])
 * @method PromiseInterface<PagedListResponse> listTemplatesAsync(ListTemplatesRequest $request, array $optionalArgs = [])
 * @method PromiseInterface<SanitizeModelResponseResponse> sanitizeModelResponseAsync(SanitizeModelResponseRequest $request, array $optionalArgs = [])
 * @method PromiseInterface<SanitizeUserPromptResponse> sanitizeUserPromptAsync(SanitizeUserPromptRequest $request, array $optionalArgs = [])
 * @method PromiseInterface<FloorSetting> updateFloorSettingAsync(UpdateFloorSettingRequest $request, array $optionalArgs = [])
 * @method PromiseInterface<Template> updateTemplateAsync(UpdateTemplateRequest $request, array $optionalArgs = [])
 * @method PromiseInterface<Location> getLocationAsync(GetLocationRequest $request, array $optionalArgs = [])
 * @method PromiseInterface<PagedListResponse> listLocationsAsync(ListLocationsRequest $request, array $optionalArgs = [])
 */
final class ModelArmorClient
{
    use GapicClientTrait;
    use ResourceHelperTrait;

    /** The name of the service. */
    private const SERVICE_NAME = 'google.cloud.modelarmor.v1.ModelArmor';

    /**
     * The default address of the service.
     *
     * @deprecated SERVICE_ADDRESS_TEMPLATE should be used instead.
     */
    private const SERVICE_ADDRESS = 'modelarmor.googleapis.com';

    /** The address template of the service. */
    private const SERVICE_ADDRESS_TEMPLATE = 'modelarmor.UNIVERSE_DOMAIN';

    /** The default port of the service. */
    private const DEFAULT_SERVICE_PORT = 443;

    /** The name of the code generator, to be included in the agent header. */
    private const CODEGEN_NAME = 'gapic';

    /** The default scopes required by the service. */
    public static $serviceScopes = ['https://www.googleapis.com/auth/cloud-platform'];

    private static function getClientDefaults()
    {
        return [
            'serviceName' => self::SERVICE_NAME,
            'apiEndpoint' => self::SERVICE_ADDRESS . ':' . self::DEFAULT_SERVICE_PORT,
            'clientConfig' => __DIR__ . '/../resources/model_armor_client_config.json',
            'descriptorsConfigPath' => __DIR__ . '/../resources/model_armor_descriptor_config.php',
            'gcpApiConfigPath' => __DIR__ . '/../resources/model_armor_grpc_config.json',
            'credentialsConfig' => [
                'defaultScopes' => self::$serviceScopes,
            ],
            'transportConfig' => [
                'rest' => [
                    'restClientConfigPath' => __DIR__ . '/../resources/model_armor_rest_client_config.php',
                ],
            ],
        ];
    }

    /**
     * Formats a string containing the fully-qualified path to represent a
     * floor_setting resource.
     *
     * @param string $project
     * @param string $location
     *
     * @return string The formatted floor_setting resource.
     */
    public static function floorSettingName(string $project, string $location): string
    {
        return self::getPathTemplate('floorSetting')->render([
            'project' => $project,
            'location' => $location,
        ]);
    }

    /**
     * Formats a string containing the fully-qualified path to represent a
     * folder_location_floorSetting resource.
     *
     * @param string $folder
     * @param string $location
     *
     * @return string The formatted folder_location_floorSetting resource.
     */
    public static function folderLocationFloorSettingName(string $folder, string $location): string
    {
        return self::getPathTemplate('folderLocationFloorSetting')->render([
            'folder' => $folder,
            'location' => $location,
        ]);
    }

    /**
     * Formats a string containing the fully-qualified path to represent a location
     * resource.
     *
     * @param string $project
     * @param string $location
     *
     * @return string The formatted location resource.
     */
    public static function locationName(string $project, string $location): string
    {
        return self::getPathTemplate('location')->render([
            'project' => $project,
            'location' => $location,
        ]);
    }

    /**
     * Formats a string containing the fully-qualified path to represent a
     * organization_location_floorSetting resource.
     *
     * @param string $organization
     * @param string $location
     *
     * @return string The formatted organization_location_floorSetting resource.
     */
    public static function organizationLocationFloorSettingName(string $organization, string $location): string
    {
        return self::getPathTemplate('organizationLocationFloorSetting')->render([
            'organization' => $organization,
            'location' => $location,
        ]);
    }

    /**
     * Formats a string containing the fully-qualified path to represent a
     * project_location_floorSetting resource.
     *
     * @param string $project
     * @param string $location
     *
     * @return string The formatted project_location_floorSetting resource.
     */
    public static function projectLocationFloorSettingName(string $project, string $location): string
    {
        return self::getPathTemplate('projectLocationFloorSetting')->render([
            'project' => $project,
            'location' => $location,
        ]);
    }

    /**
     * Formats a string containing the fully-qualified path to represent a template
     * resource.
     *
     * @param string $project
     * @param string $location
     * @param string $template
     *
     * @return string The formatted template resource.
     */
    public static function templateName(string $project, string $location, string $template): string
    {
        return self::getPathTemplate('template')->render([
            'project' => $project,
            'location' => $location,
            'template' => $template,
        ]);
    }

    /**
     * Parses a formatted name string and returns an associative array of the components in the name.
     * The following name formats are supported:
     * Template: Pattern
     * - floorSetting: projects/{project}/locations/{location}/floorSetting
     * - folderLocationFloorSetting: folders/{folder}/locations/{location}/floorSetting
     * - location: projects/{project}/locations/{location}
     * - organizationLocationFloorSetting: organizations/{organization}/locations/{location}/floorSetting
     * - projectLocationFloorSetting: projects/{project}/locations/{location}/floorSetting
     * - template: projects/{project}/locations/{location}/templates/{template}
     *
     * The optional $template argument can be supplied to specify a particular pattern,
     * and must match one of the templates listed above. If no $template argument is
     * provided, or if the $template argument does not match one of the templates
     * listed, then parseName will check each of the supported templates, and return
     * the first match.
     *
     * @param string  $formattedName The formatted name string
     * @param ?string $template      Optional name of template to match
     *
     * @return array An associative array from name component IDs to component values.
     *
     * @throws ValidationException If $formattedName could not be matched.
     */
    public static function parseName(string $formattedName, ?string $template = null): array
    {
        return self::parseFormattedName($formattedName, $template);
    }

    /**
     * Constructor.
     *
     * @param array $options {
     *     Optional. Options for configuring the service API wrapper.
     *
     *     @type string $apiEndpoint
     *           The address of the API remote host. May optionally include the port, formatted
     *           as "<uri>:<port>". Default 'modelarmor.googleapis.com:443'.
     *     @type string|array|FetchAuthTokenInterface|CredentialsWrapper $credentials
     *           The credentials to be used by the client to authorize API calls. This option
     *           accepts either a path to a credentials file, or a decoded credentials file as a
     *           PHP array.
     *           *Advanced usage*: In addition, this option can also accept a pre-constructed
     *           {@see \Google\Auth\FetchAuthTokenInterface} object or
     *           {@see \Google\ApiCore\CredentialsWrapper} object. Note that when one of these
     *           objects are provided, any settings in $credentialsConfig will be ignored.
     *           *Important*: If you accept a credential configuration (credential
     *           JSON/File/Stream) from an external source for authentication to Google Cloud
     *           Platform, you must validate it before providing it to any Google API or library.
     *           Providing an unvalidated credential configuration to Google APIs can compromise
     *           the security of your systems and data. For more information {@see
     *           https://cloud.google.com/docs/authentication/external/externally-sourced-credentials}
     *     @type array $credentialsConfig
     *           Options used to configure credentials, including auth token caching, for the
     *           client. For a full list of supporting configuration options, see
     *           {@see \Google\ApiCore\CredentialsWrapper::build()} .
     *     @type bool $disableRetries
     *           Determines whether or not retries defined by the client configuration should be
     *           disabled. Defaults to `false`.
     *     @type string|array $clientConfig
     *           Client method configuration, including retry settings. This option can be either
     *           a path to a JSON file, or a PHP array containing the decoded JSON data. By
     *           default this settings points to the default client config file, which is
     *           provided in the resources folder.
     *     @type string|TransportInterface $transport
     *           The transport used for executing network requests. May be either the string
     *           `rest` or `grpc`. Defaults to `grpc` if gRPC support is detected on the system.
     *           *Advanced usage*: Additionally, it is possible to pass in an already
     *           instantiated {@see \Google\ApiCore\Transport\TransportInterface} object. Note
     *           that when this object is provided, any settings in $transportConfig, and any
     *           $apiEndpoint setting, will be ignored.
     *     @type array $transportConfig
     *           Configuration options that will be used to construct the transport. Options for
     *           each supported transport type should be passed in a key for that transport. For
     *           example:
     *           $transportConfig = [
     *               'grpc' => [...],
     *               'rest' => [...],
     *           ];
     *           See the {@see \Google\ApiCore\Transport\GrpcTransport::build()} and
     *           {@see \Google\ApiCore\Transport\RestTransport::build()} methods for the
     *           supported options.
     *     @type callable $clientCertSource
     *           A callable which returns the client cert as a string. This can be used to
     *           provide a certificate and private key to the transport layer for mTLS.
     *     @type false|LoggerInterface $logger
     *           A PSR-3 compliant logger. If set to false, logging is disabled, ignoring the
     *           'GOOGLE_SDK_PHP_LOGGING' environment flag
     * }
     *
     * @throws ValidationException
     */
    public function __construct(array $options = [])
    {
        $clientOptions = $this->buildClientOptions($options);
        $this->setClientOptions($clientOptions);
    }

    /** Handles execution of the async variants for each documented method. */
    public function __call($method, $args)
    {
        if (substr($method, -5) !== 'Async') {
            trigger_error('Call to undefined method ' . __CLASS__ . "::$method()", E_USER_ERROR);
        }

        array_unshift($args, substr($method, 0, -5));
        return call_user_func_array([$this, 'startAsyncCall'], $args);
    }

    /**
     * Creates a new Template in a given project and location.
     *
     * The async variant is {@see ModelArmorClient::createTemplateAsync()} .
     *
     * @example samples/V1/ModelArmorClient/create_template.php
     *
     * @param CreateTemplateRequest $request     A request to house fields associated with the call.
     * @param array                 $callOptions {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return Template
     *
     * @throws ApiException Thrown if the API call fails.
     */
    public function createTemplate(CreateTemplateRequest $request, array $callOptions = []): Template
    {
        return $this->startApiCall('CreateTemplate', $request, $callOptions)->wait();
    }

    /**
     * Deletes a single Template.
     *
     * The async variant is {@see ModelArmorClient::deleteTemplateAsync()} .
     *
     * @example samples/V1/ModelArmorClient/delete_template.php
     *
     * @param DeleteTemplateRequest $request     A request to house fields associated with the call.
     * @param array                 $callOptions {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @throws ApiException Thrown if the API call fails.
     */
    public function deleteTemplate(DeleteTemplateRequest $request, array $callOptions = []): void
    {
        $this->startApiCall('DeleteTemplate', $request, $callOptions)->wait();
    }

    /**
     * Gets details of a single floor setting of a project
     *
     * The async variant is {@see ModelArmorClient::getFloorSettingAsync()} .
     *
     * @example samples/V1/ModelArmorClient/get_floor_setting.php
     *
     * @param GetFloorSettingRequest $request     A request to house fields associated with the call.
     * @param array                  $callOptions {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return FloorSetting
     *
     * @throws ApiException Thrown if the API call fails.
     */
    public function getFloorSetting(GetFloorSettingRequest $request, array $callOptions = []): FloorSetting
    {
        return $this->startApiCall('GetFloorSetting', $request, $callOptions)->wait();
    }

    /**
     * Gets details of a single Template.
     *
     * The async variant is {@see ModelArmorClient::getTemplateAsync()} .
     *
     * @example samples/V1/ModelArmorClient/get_template.php
     *
     * @param GetTemplateRequest $request     A request to house fields associated with the call.
     * @param array              $callOptions {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return Template
     *
     * @throws ApiException Thrown if the API call fails.
     */
    public function getTemplate(GetTemplateRequest $request, array $callOptions = []): Template
    {
        return $this->startApiCall('GetTemplate', $request, $callOptions)->wait();
    }

    /**
     * Lists Templates in a given project and location.
     *
     * The async variant is {@see ModelArmorClient::listTemplatesAsync()} .
     *
     * @example samples/V1/ModelArmorClient/list_templates.php
     *
     * @param ListTemplatesRequest $request     A request to house fields associated with the call.
     * @param array                $callOptions {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return PagedListResponse
     *
     * @throws ApiException Thrown if the API call fails.
     */
    public function listTemplates(ListTemplatesRequest $request, array $callOptions = []): PagedListResponse
    {
        return $this->startApiCall('ListTemplates', $request, $callOptions);
    }

    /**
     * Sanitizes Model Response.
     *
     * The async variant is {@see ModelArmorClient::sanitizeModelResponseAsync()} .
     *
     * @example samples/V1/ModelArmorClient/sanitize_model_response.php
     *
     * @param SanitizeModelResponseRequest $request     A request to house fields associated with the call.
     * @param array                        $callOptions {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return SanitizeModelResponseResponse
     *
     * @throws ApiException Thrown if the API call fails.
     */
    public function sanitizeModelResponse(
        SanitizeModelResponseRequest $request,
        array $callOptions = []
    ): SanitizeModelResponseResponse {
        return $this->startApiCall('SanitizeModelResponse', $request, $callOptions)->wait();
    }

    /**
     * Sanitizes User Prompt.
     *
     * The async variant is {@see ModelArmorClient::sanitizeUserPromptAsync()} .
     *
     * @example samples/V1/ModelArmorClient/sanitize_user_prompt.php
     *
     * @param SanitizeUserPromptRequest $request     A request to house fields associated with the call.
     * @param array                     $callOptions {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return SanitizeUserPromptResponse
     *
     * @throws ApiException Thrown if the API call fails.
     */
    public function sanitizeUserPrompt(
        SanitizeUserPromptRequest $request,
        array $callOptions = []
    ): SanitizeUserPromptResponse {
        return $this->startApiCall('SanitizeUserPrompt', $request, $callOptions)->wait();
    }

    /**
     * Updates the parameters of a single floor setting of a project
     *
     * The async variant is {@see ModelArmorClient::updateFloorSettingAsync()} .
     *
     * @example samples/V1/ModelArmorClient/update_floor_setting.php
     *
     * @param UpdateFloorSettingRequest $request     A request to house fields associated with the call.
     * @param array                     $callOptions {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return FloorSetting
     *
     * @throws ApiException Thrown if the API call fails.
     */
    public function updateFloorSetting(UpdateFloorSettingRequest $request, array $callOptions = []): FloorSetting
    {
        return $this->startApiCall('UpdateFloorSetting', $request, $callOptions)->wait();
    }

    /**
     * Updates the parameters of a single Template.
     *
     * The async variant is {@see ModelArmorClient::updateTemplateAsync()} .
     *
     * @example samples/V1/ModelArmorClient/update_template.php
     *
     * @param UpdateTemplateRequest $request     A request to house fields associated with the call.
     * @param array                 $callOptions {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return Template
     *
     * @throws ApiException Thrown if the API call fails.
     */
    public function updateTemplate(UpdateTemplateRequest $request, array $callOptions = []): Template
    {
        return $this->startApiCall('UpdateTemplate', $request, $callOptions)->wait();
    }

    /**
     * Gets information about a location.
     *
     * The async variant is {@see ModelArmorClient::getLocationAsync()} .
     *
     * @example samples/V1/ModelArmorClient/get_location.php
     *
     * @param GetLocationRequest $request     A request to house fields associated with the call.
     * @param array              $callOptions {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return Location
     *
     * @throws ApiException Thrown if the API call fails.
     */
    public function getLocation(GetLocationRequest $request, array $callOptions = []): Location
    {
        return $this->startApiCall('GetLocation', $request, $callOptions)->wait();
    }

    /**
     * Lists information about the supported locations for this service.
     *
     * The async variant is {@see ModelArmorClient::listLocationsAsync()} .
     *
     * @example samples/V1/ModelArmorClient/list_locations.php
     *
     * @param ListLocationsRequest $request     A request to house fields associated with the call.
     * @param array                $callOptions {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return PagedListResponse
     *
     * @throws ApiException Thrown if the API call fails.
     */
    public function listLocations(ListLocationsRequest $request, array $callOptions = []): PagedListResponse
    {
        return $this->startApiCall('ListLocations', $request, $callOptions);
    }
}
