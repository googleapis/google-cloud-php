<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/cloud/bigquery/reservation/v1/reservation.proto

namespace Google\Cloud\BigQuery\Reservation\V1;

use UnexpectedValueException;

/**
 * The failover mode when a user initiates a failover on a reservation
 * determines how writes that arepending replication are handled after the
 * failover is initiated.
 *
 * Protobuf type <code>google.cloud.bigquery.reservation.v1.FailoverMode</code>
 */
class FailoverMode
{
    /**
     * Invalid value.
     *
     * Generated from protobuf enum <code>FAILOVER_MODE_UNSPECIFIED = 0;</code>
     */
    const FAILOVER_MODE_UNSPECIFIED = 0;
    /**
     * When customers initiate a soft failover, BigQuery will wait until all
     * committed writes are replicated to the secondary. This mode requires both
     * regions to be available for the failover to succeed and prevents data loss.
     *
     * Generated from protobuf enum <code>SOFT = 1;</code>
     */
    const SOFT = 1;
    /**
     * When customers initiate a hard failover, BigQuery will not wait until all
     * committed writes are replicated to the secondary. There can be data loss
     * for hard failover.
     *
     * Generated from protobuf enum <code>HARD = 2;</code>
     */
    const HARD = 2;

    private static $valueToName = [
        self::FAILOVER_MODE_UNSPECIFIED => 'FAILOVER_MODE_UNSPECIFIED',
        self::SOFT => 'SOFT',
        self::HARD => 'HARD',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

