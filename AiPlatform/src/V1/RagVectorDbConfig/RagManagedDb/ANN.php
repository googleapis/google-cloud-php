<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/cloud/aiplatform/v1/vertex_rag_data.proto

namespace Google\Cloud\AIPlatform\V1\RagVectorDbConfig\RagManagedDb;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Config for ANN search.
 * RagManagedDb uses a tree-based structure to partition data and
 * facilitate faster searches. As a tradeoff, it requires longer indexing
 * time and manual triggering of index rebuild via the ImportRagFiles and
 * UpdateRagCorpus API.
 *
 * Generated from protobuf message <code>google.cloud.aiplatform.v1.RagVectorDbConfig.RagManagedDb.ANN</code>
 */
class ANN extends \Google\Protobuf\Internal\Message
{
    /**
     * The depth of the tree-based structure. Only depth values of 2 and 3 are
     * supported.
     * Recommended value is 2 if you have if you have O(10K) files in the
     * RagCorpus and set this to 3 if more than that.
     * Default value is 2.
     *
     * Generated from protobuf field <code>int32 tree_depth = 1;</code>
     */
    protected $tree_depth = 0;
    /**
     * Number of leaf nodes in the tree-based structure. Each leaf node
     * contains groups of closely related vectors along with their
     * corresponding centroid.
     * Recommended value is 10 * sqrt(num of RagFiles in your RagCorpus).
     * Default value is 500.
     *
     * Generated from protobuf field <code>int32 leaf_count = 2;</code>
     */
    protected $leaf_count = 0;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type int $tree_depth
     *           The depth of the tree-based structure. Only depth values of 2 and 3 are
     *           supported.
     *           Recommended value is 2 if you have if you have O(10K) files in the
     *           RagCorpus and set this to 3 if more than that.
     *           Default value is 2.
     *     @type int $leaf_count
     *           Number of leaf nodes in the tree-based structure. Each leaf node
     *           contains groups of closely related vectors along with their
     *           corresponding centroid.
     *           Recommended value is 10 * sqrt(num of RagFiles in your RagCorpus).
     *           Default value is 500.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Google\Cloud\Aiplatform\V1\VertexRagData::initOnce();
        parent::__construct($data);
    }

    /**
     * The depth of the tree-based structure. Only depth values of 2 and 3 are
     * supported.
     * Recommended value is 2 if you have if you have O(10K) files in the
     * RagCorpus and set this to 3 if more than that.
     * Default value is 2.
     *
     * Generated from protobuf field <code>int32 tree_depth = 1;</code>
     * @return int
     */
    public function getTreeDepth()
    {
        return $this->tree_depth;
    }

    /**
     * The depth of the tree-based structure. Only depth values of 2 and 3 are
     * supported.
     * Recommended value is 2 if you have if you have O(10K) files in the
     * RagCorpus and set this to 3 if more than that.
     * Default value is 2.
     *
     * Generated from protobuf field <code>int32 tree_depth = 1;</code>
     * @param int $var
     * @return $this
     */
    public function setTreeDepth($var)
    {
        GPBUtil::checkInt32($var);
        $this->tree_depth = $var;

        return $this;
    }

    /**
     * Number of leaf nodes in the tree-based structure. Each leaf node
     * contains groups of closely related vectors along with their
     * corresponding centroid.
     * Recommended value is 10 * sqrt(num of RagFiles in your RagCorpus).
     * Default value is 500.
     *
     * Generated from protobuf field <code>int32 leaf_count = 2;</code>
     * @return int
     */
    public function getLeafCount()
    {
        return $this->leaf_count;
    }

    /**
     * Number of leaf nodes in the tree-based structure. Each leaf node
     * contains groups of closely related vectors along with their
     * corresponding centroid.
     * Recommended value is 10 * sqrt(num of RagFiles in your RagCorpus).
     * Default value is 500.
     *
     * Generated from protobuf field <code>int32 leaf_count = 2;</code>
     * @param int $var
     * @return $this
     */
    public function setLeafCount($var)
    {
        GPBUtil::checkInt32($var);
        $this->leaf_count = $var;

        return $this;
    }

}


