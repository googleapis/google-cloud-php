<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/cloud/aiplatform/v1/feature_group.proto

namespace Google\Cloud\AIPlatform\V1\FeatureGroup;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Input source type for BigQuery Tables and Views.
 *
 * Generated from protobuf message <code>google.cloud.aiplatform.v1.FeatureGroup.BigQuery</code>
 */
class BigQuery extends \Google\Protobuf\Internal\Message
{
    /**
     * Required. Immutable. The BigQuery source URI that points to either a
     * BigQuery Table or View.
     *
     * Generated from protobuf field <code>.google.cloud.aiplatform.v1.BigQuerySource big_query_source = 1 [(.google.api.field_behavior) = IMMUTABLE, (.google.api.field_behavior) = REQUIRED];</code>
     */
    protected $big_query_source = null;
    /**
     * Optional. Columns to construct entity_id / row keys.
     * If not provided defaults to `entity_id`.
     *
     * Generated from protobuf field <code>repeated string entity_id_columns = 2 [(.google.api.field_behavior) = OPTIONAL];</code>
     */
    private $entity_id_columns;
    /**
     * Optional. Set if the data source is not a time-series.
     *
     * Generated from protobuf field <code>bool static_data_source = 3 [(.google.api.field_behavior) = OPTIONAL];</code>
     */
    protected $static_data_source = false;
    /**
     * Optional. If the source is a time-series source, this can be set to
     * control how downstream sources (ex:
     * [FeatureView][google.cloud.aiplatform.v1.FeatureView] ) will treat
     * time-series sources. If not set, will treat the source as a time-series
     * source with `feature_timestamp` as timestamp column and no scan boundary.
     *
     * Generated from protobuf field <code>.google.cloud.aiplatform.v1.FeatureGroup.BigQuery.TimeSeries time_series = 4 [(.google.api.field_behavior) = OPTIONAL];</code>
     */
    protected $time_series = null;
    /**
     * Optional. If set, all feature values will be fetched
     * from a single row per unique entityId including nulls.
     * If not set, will collapse all rows for each unique entityId into a singe
     * row with any non-null values if present, if no non-null values are
     * present will sync null.
     * ex: If source has schema
     * `(entity_id, feature_timestamp, f0, f1)` and the following rows:
     * `(e1, 2020-01-01T10:00:00.123Z, 10, 15)`
     * `(e1, 2020-02-01T10:00:00.123Z, 20, null)`
     * If dense is set, `(e1, 20, null)` is synced to online stores. If dense is
     * not set, `(e1, 20, 15)` is synced to online stores.
     *
     * Generated from protobuf field <code>bool dense = 5 [(.google.api.field_behavior) = OPTIONAL];</code>
     */
    protected $dense = false;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type \Google\Cloud\AIPlatform\V1\BigQuerySource $big_query_source
     *           Required. Immutable. The BigQuery source URI that points to either a
     *           BigQuery Table or View.
     *     @type array<string>|\Google\Protobuf\Internal\RepeatedField $entity_id_columns
     *           Optional. Columns to construct entity_id / row keys.
     *           If not provided defaults to `entity_id`.
     *     @type bool $static_data_source
     *           Optional. Set if the data source is not a time-series.
     *     @type \Google\Cloud\AIPlatform\V1\FeatureGroup\BigQuery\TimeSeries $time_series
     *           Optional. If the source is a time-series source, this can be set to
     *           control how downstream sources (ex:
     *           [FeatureView][google.cloud.aiplatform.v1.FeatureView] ) will treat
     *           time-series sources. If not set, will treat the source as a time-series
     *           source with `feature_timestamp` as timestamp column and no scan boundary.
     *     @type bool $dense
     *           Optional. If set, all feature values will be fetched
     *           from a single row per unique entityId including nulls.
     *           If not set, will collapse all rows for each unique entityId into a singe
     *           row with any non-null values if present, if no non-null values are
     *           present will sync null.
     *           ex: If source has schema
     *           `(entity_id, feature_timestamp, f0, f1)` and the following rows:
     *           `(e1, 2020-01-01T10:00:00.123Z, 10, 15)`
     *           `(e1, 2020-02-01T10:00:00.123Z, 20, null)`
     *           If dense is set, `(e1, 20, null)` is synced to online stores. If dense is
     *           not set, `(e1, 20, 15)` is synced to online stores.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Google\Cloud\Aiplatform\V1\FeatureGroup::initOnce();
        parent::__construct($data);
    }

    /**
     * Required. Immutable. The BigQuery source URI that points to either a
     * BigQuery Table or View.
     *
     * Generated from protobuf field <code>.google.cloud.aiplatform.v1.BigQuerySource big_query_source = 1 [(.google.api.field_behavior) = IMMUTABLE, (.google.api.field_behavior) = REQUIRED];</code>
     * @return \Google\Cloud\AIPlatform\V1\BigQuerySource|null
     */
    public function getBigQuerySource()
    {
        return $this->big_query_source;
    }

    public function hasBigQuerySource()
    {
        return isset($this->big_query_source);
    }

    public function clearBigQuerySource()
    {
        unset($this->big_query_source);
    }

    /**
     * Required. Immutable. The BigQuery source URI that points to either a
     * BigQuery Table or View.
     *
     * Generated from protobuf field <code>.google.cloud.aiplatform.v1.BigQuerySource big_query_source = 1 [(.google.api.field_behavior) = IMMUTABLE, (.google.api.field_behavior) = REQUIRED];</code>
     * @param \Google\Cloud\AIPlatform\V1\BigQuerySource $var
     * @return $this
     */
    public function setBigQuerySource($var)
    {
        GPBUtil::checkMessage($var, \Google\Cloud\AIPlatform\V1\BigQuerySource::class);
        $this->big_query_source = $var;

        return $this;
    }

    /**
     * Optional. Columns to construct entity_id / row keys.
     * If not provided defaults to `entity_id`.
     *
     * Generated from protobuf field <code>repeated string entity_id_columns = 2 [(.google.api.field_behavior) = OPTIONAL];</code>
     * @return \Google\Protobuf\Internal\RepeatedField
     */
    public function getEntityIdColumns()
    {
        return $this->entity_id_columns;
    }

    /**
     * Optional. Columns to construct entity_id / row keys.
     * If not provided defaults to `entity_id`.
     *
     * Generated from protobuf field <code>repeated string entity_id_columns = 2 [(.google.api.field_behavior) = OPTIONAL];</code>
     * @param array<string>|\Google\Protobuf\Internal\RepeatedField $var
     * @return $this
     */
    public function setEntityIdColumns($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::STRING);
        $this->entity_id_columns = $arr;

        return $this;
    }

    /**
     * Optional. Set if the data source is not a time-series.
     *
     * Generated from protobuf field <code>bool static_data_source = 3 [(.google.api.field_behavior) = OPTIONAL];</code>
     * @return bool
     */
    public function getStaticDataSource()
    {
        return $this->static_data_source;
    }

    /**
     * Optional. Set if the data source is not a time-series.
     *
     * Generated from protobuf field <code>bool static_data_source = 3 [(.google.api.field_behavior) = OPTIONAL];</code>
     * @param bool $var
     * @return $this
     */
    public function setStaticDataSource($var)
    {
        GPBUtil::checkBool($var);
        $this->static_data_source = $var;

        return $this;
    }

    /**
     * Optional. If the source is a time-series source, this can be set to
     * control how downstream sources (ex:
     * [FeatureView][google.cloud.aiplatform.v1.FeatureView] ) will treat
     * time-series sources. If not set, will treat the source as a time-series
     * source with `feature_timestamp` as timestamp column and no scan boundary.
     *
     * Generated from protobuf field <code>.google.cloud.aiplatform.v1.FeatureGroup.BigQuery.TimeSeries time_series = 4 [(.google.api.field_behavior) = OPTIONAL];</code>
     * @return \Google\Cloud\AIPlatform\V1\FeatureGroup\BigQuery\TimeSeries|null
     */
    public function getTimeSeries()
    {
        return $this->time_series;
    }

    public function hasTimeSeries()
    {
        return isset($this->time_series);
    }

    public function clearTimeSeries()
    {
        unset($this->time_series);
    }

    /**
     * Optional. If the source is a time-series source, this can be set to
     * control how downstream sources (ex:
     * [FeatureView][google.cloud.aiplatform.v1.FeatureView] ) will treat
     * time-series sources. If not set, will treat the source as a time-series
     * source with `feature_timestamp` as timestamp column and no scan boundary.
     *
     * Generated from protobuf field <code>.google.cloud.aiplatform.v1.FeatureGroup.BigQuery.TimeSeries time_series = 4 [(.google.api.field_behavior) = OPTIONAL];</code>
     * @param \Google\Cloud\AIPlatform\V1\FeatureGroup\BigQuery\TimeSeries $var
     * @return $this
     */
    public function setTimeSeries($var)
    {
        GPBUtil::checkMessage($var, \Google\Cloud\AIPlatform\V1\FeatureGroup\BigQuery\TimeSeries::class);
        $this->time_series = $var;

        return $this;
    }

    /**
     * Optional. If set, all feature values will be fetched
     * from a single row per unique entityId including nulls.
     * If not set, will collapse all rows for each unique entityId into a singe
     * row with any non-null values if present, if no non-null values are
     * present will sync null.
     * ex: If source has schema
     * `(entity_id, feature_timestamp, f0, f1)` and the following rows:
     * `(e1, 2020-01-01T10:00:00.123Z, 10, 15)`
     * `(e1, 2020-02-01T10:00:00.123Z, 20, null)`
     * If dense is set, `(e1, 20, null)` is synced to online stores. If dense is
     * not set, `(e1, 20, 15)` is synced to online stores.
     *
     * Generated from protobuf field <code>bool dense = 5 [(.google.api.field_behavior) = OPTIONAL];</code>
     * @return bool
     */
    public function getDense()
    {
        return $this->dense;
    }

    /**
     * Optional. If set, all feature values will be fetched
     * from a single row per unique entityId including nulls.
     * If not set, will collapse all rows for each unique entityId into a singe
     * row with any non-null values if present, if no non-null values are
     * present will sync null.
     * ex: If source has schema
     * `(entity_id, feature_timestamp, f0, f1)` and the following rows:
     * `(e1, 2020-01-01T10:00:00.123Z, 10, 15)`
     * `(e1, 2020-02-01T10:00:00.123Z, 20, null)`
     * If dense is set, `(e1, 20, null)` is synced to online stores. If dense is
     * not set, `(e1, 20, 15)` is synced to online stores.
     *
     * Generated from protobuf field <code>bool dense = 5 [(.google.api.field_behavior) = OPTIONAL];</code>
     * @param bool $var
     * @return $this
     */
    public function setDense($var)
    {
        GPBUtil::checkBool($var);
        $this->dense = $var;

        return $this;
    }

}


