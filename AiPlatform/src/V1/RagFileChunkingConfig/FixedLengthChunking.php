<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/cloud/aiplatform/v1/vertex_rag_data.proto

namespace Google\Cloud\AIPlatform\V1\RagFileChunkingConfig;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Specifies the fixed length chunking config.
 *
 * Generated from protobuf message <code>google.cloud.aiplatform.v1.RagFileChunkingConfig.FixedLengthChunking</code>
 */
class FixedLengthChunking extends \Google\Protobuf\Internal\Message
{
    /**
     * The size of the chunks.
     *
     * Generated from protobuf field <code>int32 chunk_size = 1;</code>
     */
    protected $chunk_size = 0;
    /**
     * The overlap between chunks.
     *
     * Generated from protobuf field <code>int32 chunk_overlap = 2;</code>
     */
    protected $chunk_overlap = 0;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type int $chunk_size
     *           The size of the chunks.
     *     @type int $chunk_overlap
     *           The overlap between chunks.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Google\Cloud\Aiplatform\V1\VertexRagData::initOnce();
        parent::__construct($data);
    }

    /**
     * The size of the chunks.
     *
     * Generated from protobuf field <code>int32 chunk_size = 1;</code>
     * @return int
     */
    public function getChunkSize()
    {
        return $this->chunk_size;
    }

    /**
     * The size of the chunks.
     *
     * Generated from protobuf field <code>int32 chunk_size = 1;</code>
     * @param int $var
     * @return $this
     */
    public function setChunkSize($var)
    {
        GPBUtil::checkInt32($var);
        $this->chunk_size = $var;

        return $this;
    }

    /**
     * The overlap between chunks.
     *
     * Generated from protobuf field <code>int32 chunk_overlap = 2;</code>
     * @return int
     */
    public function getChunkOverlap()
    {
        return $this->chunk_overlap;
    }

    /**
     * The overlap between chunks.
     *
     * Generated from protobuf field <code>int32 chunk_overlap = 2;</code>
     * @param int $var
     * @return $this
     */
    public function setChunkOverlap($var)
    {
        GPBUtil::checkInt32($var);
        $this->chunk_overlap = $var;

        return $this;
    }

}


