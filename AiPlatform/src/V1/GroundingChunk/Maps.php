<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/cloud/aiplatform/v1/content.proto

namespace Google\Cloud\AIPlatform\V1\GroundingChunk;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Chunk from Google Maps.
 *
 * Generated from protobuf message <code>google.cloud.aiplatform.v1.GroundingChunk.Maps</code>
 */
class Maps extends \Google\Protobuf\Internal\Message
{
    /**
     * URI reference of the chunk.
     *
     * Generated from protobuf field <code>optional string uri = 1;</code>
     */
    protected $uri = null;
    /**
     * Title of the chunk.
     *
     * Generated from protobuf field <code>optional string title = 2;</code>
     */
    protected $title = null;
    /**
     * Text of the chunk.
     *
     * Generated from protobuf field <code>optional string text = 3;</code>
     */
    protected $text = null;
    /**
     * This Place's resource name, in `places/{place_id}` format.  Can be used
     * to look up the Place.
     *
     * Generated from protobuf field <code>optional string place_id = 4;</code>
     */
    protected $place_id = null;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $uri
     *           URI reference of the chunk.
     *     @type string $title
     *           Title of the chunk.
     *     @type string $text
     *           Text of the chunk.
     *     @type string $place_id
     *           This Place's resource name, in `places/{place_id}` format.  Can be used
     *           to look up the Place.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Google\Cloud\Aiplatform\V1\Content::initOnce();
        parent::__construct($data);
    }

    /**
     * URI reference of the chunk.
     *
     * Generated from protobuf field <code>optional string uri = 1;</code>
     * @return string
     */
    public function getUri()
    {
        return isset($this->uri) ? $this->uri : '';
    }

    public function hasUri()
    {
        return isset($this->uri);
    }

    public function clearUri()
    {
        unset($this->uri);
    }

    /**
     * URI reference of the chunk.
     *
     * Generated from protobuf field <code>optional string uri = 1;</code>
     * @param string $var
     * @return $this
     */
    public function setUri($var)
    {
        GPBUtil::checkString($var, True);
        $this->uri = $var;

        return $this;
    }

    /**
     * Title of the chunk.
     *
     * Generated from protobuf field <code>optional string title = 2;</code>
     * @return string
     */
    public function getTitle()
    {
        return isset($this->title) ? $this->title : '';
    }

    public function hasTitle()
    {
        return isset($this->title);
    }

    public function clearTitle()
    {
        unset($this->title);
    }

    /**
     * Title of the chunk.
     *
     * Generated from protobuf field <code>optional string title = 2;</code>
     * @param string $var
     * @return $this
     */
    public function setTitle($var)
    {
        GPBUtil::checkString($var, True);
        $this->title = $var;

        return $this;
    }

    /**
     * Text of the chunk.
     *
     * Generated from protobuf field <code>optional string text = 3;</code>
     * @return string
     */
    public function getText()
    {
        return isset($this->text) ? $this->text : '';
    }

    public function hasText()
    {
        return isset($this->text);
    }

    public function clearText()
    {
        unset($this->text);
    }

    /**
     * Text of the chunk.
     *
     * Generated from protobuf field <code>optional string text = 3;</code>
     * @param string $var
     * @return $this
     */
    public function setText($var)
    {
        GPBUtil::checkString($var, True);
        $this->text = $var;

        return $this;
    }

    /**
     * This Place's resource name, in `places/{place_id}` format.  Can be used
     * to look up the Place.
     *
     * Generated from protobuf field <code>optional string place_id = 4;</code>
     * @return string
     */
    public function getPlaceId()
    {
        return isset($this->place_id) ? $this->place_id : '';
    }

    public function hasPlaceId()
    {
        return isset($this->place_id);
    }

    public function clearPlaceId()
    {
        unset($this->place_id);
    }

    /**
     * This Place's resource name, in `places/{place_id}` format.  Can be used
     * to look up the Place.
     *
     * Generated from protobuf field <code>optional string place_id = 4;</code>
     * @param string $var
     * @return $this
     */
    public function setPlaceId($var)
    {
        GPBUtil::checkString($var, True);
        $this->place_id = $var;

        return $this;
    }

}


