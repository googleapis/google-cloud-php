<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/cloud/aiplatform/v1/feature_view.proto

namespace Google\Cloud\AIPlatform\V1\FeatureView;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Configuration for vector indexing.
 *
 * Generated from protobuf message <code>google.cloud.aiplatform.v1.FeatureView.IndexConfig</code>
 */
class IndexConfig extends \Google\Protobuf\Internal\Message
{
    /**
     * Optional. Column of embedding. This column contains the source data to
     * create index for vector search. embedding_column must be set when using
     * vector search.
     *
     * Generated from protobuf field <code>string embedding_column = 1 [(.google.api.field_behavior) = OPTIONAL];</code>
     */
    protected $embedding_column = '';
    /**
     * Optional. Columns of features that're used to filter vector search
     * results.
     *
     * Generated from protobuf field <code>repeated string filter_columns = 2 [(.google.api.field_behavior) = OPTIONAL];</code>
     */
    private $filter_columns;
    /**
     * Optional. Column of crowding. This column contains crowding attribute
     * which is a constraint on a neighbor list produced by
     * [FeatureOnlineStoreService.SearchNearestEntities][google.cloud.aiplatform.v1.FeatureOnlineStoreService.SearchNearestEntities]
     * to diversify search results. If
     * [NearestNeighborQuery.per_crowding_attribute_neighbor_count][google.cloud.aiplatform.v1.NearestNeighborQuery.per_crowding_attribute_neighbor_count]
     * is set to K in
     * [SearchNearestEntitiesRequest][google.cloud.aiplatform.v1.SearchNearestEntitiesRequest],
     * it's guaranteed that no more than K entities of the same crowding
     * attribute are returned in the response.
     *
     * Generated from protobuf field <code>string crowding_column = 3 [(.google.api.field_behavior) = OPTIONAL];</code>
     */
    protected $crowding_column = '';
    /**
     * Optional. The number of dimensions of the input embedding.
     *
     * Generated from protobuf field <code>optional int32 embedding_dimension = 4 [(.google.api.field_behavior) = OPTIONAL];</code>
     */
    protected $embedding_dimension = null;
    /**
     * Optional. The distance measure used in nearest neighbor search.
     *
     * Generated from protobuf field <code>.google.cloud.aiplatform.v1.FeatureView.IndexConfig.DistanceMeasureType distance_measure_type = 5 [(.google.api.field_behavior) = OPTIONAL];</code>
     */
    protected $distance_measure_type = 0;
    protected $algorithm_config;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type \Google\Cloud\AIPlatform\V1\FeatureView\IndexConfig\TreeAHConfig $tree_ah_config
     *           Optional. Configuration options for the tree-AH algorithm (Shallow tree
     *           + Asymmetric Hashing). Please refer to this paper for more details:
     *           https://arxiv.org/abs/1908.10396
     *     @type \Google\Cloud\AIPlatform\V1\FeatureView\IndexConfig\BruteForceConfig $brute_force_config
     *           Optional. Configuration options for using brute force search, which
     *           simply implements the standard linear search in the database for each
     *           query. It is primarily meant for benchmarking and to generate the
     *           ground truth for approximate search.
     *     @type string $embedding_column
     *           Optional. Column of embedding. This column contains the source data to
     *           create index for vector search. embedding_column must be set when using
     *           vector search.
     *     @type array<string>|\Google\Protobuf\Internal\RepeatedField $filter_columns
     *           Optional. Columns of features that're used to filter vector search
     *           results.
     *     @type string $crowding_column
     *           Optional. Column of crowding. This column contains crowding attribute
     *           which is a constraint on a neighbor list produced by
     *           [FeatureOnlineStoreService.SearchNearestEntities][google.cloud.aiplatform.v1.FeatureOnlineStoreService.SearchNearestEntities]
     *           to diversify search results. If
     *           [NearestNeighborQuery.per_crowding_attribute_neighbor_count][google.cloud.aiplatform.v1.NearestNeighborQuery.per_crowding_attribute_neighbor_count]
     *           is set to K in
     *           [SearchNearestEntitiesRequest][google.cloud.aiplatform.v1.SearchNearestEntitiesRequest],
     *           it's guaranteed that no more than K entities of the same crowding
     *           attribute are returned in the response.
     *     @type int $embedding_dimension
     *           Optional. The number of dimensions of the input embedding.
     *     @type int $distance_measure_type
     *           Optional. The distance measure used in nearest neighbor search.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Google\Cloud\Aiplatform\V1\FeatureView::initOnce();
        parent::__construct($data);
    }

    /**
     * Optional. Configuration options for the tree-AH algorithm (Shallow tree
     * + Asymmetric Hashing). Please refer to this paper for more details:
     * https://arxiv.org/abs/1908.10396
     *
     * Generated from protobuf field <code>.google.cloud.aiplatform.v1.FeatureView.IndexConfig.TreeAHConfig tree_ah_config = 6 [(.google.api.field_behavior) = OPTIONAL];</code>
     * @return \Google\Cloud\AIPlatform\V1\FeatureView\IndexConfig\TreeAHConfig|null
     */
    public function getTreeAhConfig()
    {
        return $this->readOneof(6);
    }

    public function hasTreeAhConfig()
    {
        return $this->hasOneof(6);
    }

    /**
     * Optional. Configuration options for the tree-AH algorithm (Shallow tree
     * + Asymmetric Hashing). Please refer to this paper for more details:
     * https://arxiv.org/abs/1908.10396
     *
     * Generated from protobuf field <code>.google.cloud.aiplatform.v1.FeatureView.IndexConfig.TreeAHConfig tree_ah_config = 6 [(.google.api.field_behavior) = OPTIONAL];</code>
     * @param \Google\Cloud\AIPlatform\V1\FeatureView\IndexConfig\TreeAHConfig $var
     * @return $this
     */
    public function setTreeAhConfig($var)
    {
        GPBUtil::checkMessage($var, \Google\Cloud\AIPlatform\V1\FeatureView\IndexConfig\TreeAHConfig::class);
        $this->writeOneof(6, $var);

        return $this;
    }

    /**
     * Optional. Configuration options for using brute force search, which
     * simply implements the standard linear search in the database for each
     * query. It is primarily meant for benchmarking and to generate the
     * ground truth for approximate search.
     *
     * Generated from protobuf field <code>.google.cloud.aiplatform.v1.FeatureView.IndexConfig.BruteForceConfig brute_force_config = 7 [(.google.api.field_behavior) = OPTIONAL];</code>
     * @return \Google\Cloud\AIPlatform\V1\FeatureView\IndexConfig\BruteForceConfig|null
     */
    public function getBruteForceConfig()
    {
        return $this->readOneof(7);
    }

    public function hasBruteForceConfig()
    {
        return $this->hasOneof(7);
    }

    /**
     * Optional. Configuration options for using brute force search, which
     * simply implements the standard linear search in the database for each
     * query. It is primarily meant for benchmarking and to generate the
     * ground truth for approximate search.
     *
     * Generated from protobuf field <code>.google.cloud.aiplatform.v1.FeatureView.IndexConfig.BruteForceConfig brute_force_config = 7 [(.google.api.field_behavior) = OPTIONAL];</code>
     * @param \Google\Cloud\AIPlatform\V1\FeatureView\IndexConfig\BruteForceConfig $var
     * @return $this
     */
    public function setBruteForceConfig($var)
    {
        GPBUtil::checkMessage($var, \Google\Cloud\AIPlatform\V1\FeatureView\IndexConfig\BruteForceConfig::class);
        $this->writeOneof(7, $var);

        return $this;
    }

    /**
     * Optional. Column of embedding. This column contains the source data to
     * create index for vector search. embedding_column must be set when using
     * vector search.
     *
     * Generated from protobuf field <code>string embedding_column = 1 [(.google.api.field_behavior) = OPTIONAL];</code>
     * @return string
     */
    public function getEmbeddingColumn()
    {
        return $this->embedding_column;
    }

    /**
     * Optional. Column of embedding. This column contains the source data to
     * create index for vector search. embedding_column must be set when using
     * vector search.
     *
     * Generated from protobuf field <code>string embedding_column = 1 [(.google.api.field_behavior) = OPTIONAL];</code>
     * @param string $var
     * @return $this
     */
    public function setEmbeddingColumn($var)
    {
        GPBUtil::checkString($var, True);
        $this->embedding_column = $var;

        return $this;
    }

    /**
     * Optional. Columns of features that're used to filter vector search
     * results.
     *
     * Generated from protobuf field <code>repeated string filter_columns = 2 [(.google.api.field_behavior) = OPTIONAL];</code>
     * @return \Google\Protobuf\Internal\RepeatedField
     */
    public function getFilterColumns()
    {
        return $this->filter_columns;
    }

    /**
     * Optional. Columns of features that're used to filter vector search
     * results.
     *
     * Generated from protobuf field <code>repeated string filter_columns = 2 [(.google.api.field_behavior) = OPTIONAL];</code>
     * @param array<string>|\Google\Protobuf\Internal\RepeatedField $var
     * @return $this
     */
    public function setFilterColumns($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::STRING);
        $this->filter_columns = $arr;

        return $this;
    }

    /**
     * Optional. Column of crowding. This column contains crowding attribute
     * which is a constraint on a neighbor list produced by
     * [FeatureOnlineStoreService.SearchNearestEntities][google.cloud.aiplatform.v1.FeatureOnlineStoreService.SearchNearestEntities]
     * to diversify search results. If
     * [NearestNeighborQuery.per_crowding_attribute_neighbor_count][google.cloud.aiplatform.v1.NearestNeighborQuery.per_crowding_attribute_neighbor_count]
     * is set to K in
     * [SearchNearestEntitiesRequest][google.cloud.aiplatform.v1.SearchNearestEntitiesRequest],
     * it's guaranteed that no more than K entities of the same crowding
     * attribute are returned in the response.
     *
     * Generated from protobuf field <code>string crowding_column = 3 [(.google.api.field_behavior) = OPTIONAL];</code>
     * @return string
     */
    public function getCrowdingColumn()
    {
        return $this->crowding_column;
    }

    /**
     * Optional. Column of crowding. This column contains crowding attribute
     * which is a constraint on a neighbor list produced by
     * [FeatureOnlineStoreService.SearchNearestEntities][google.cloud.aiplatform.v1.FeatureOnlineStoreService.SearchNearestEntities]
     * to diversify search results. If
     * [NearestNeighborQuery.per_crowding_attribute_neighbor_count][google.cloud.aiplatform.v1.NearestNeighborQuery.per_crowding_attribute_neighbor_count]
     * is set to K in
     * [SearchNearestEntitiesRequest][google.cloud.aiplatform.v1.SearchNearestEntitiesRequest],
     * it's guaranteed that no more than K entities of the same crowding
     * attribute are returned in the response.
     *
     * Generated from protobuf field <code>string crowding_column = 3 [(.google.api.field_behavior) = OPTIONAL];</code>
     * @param string $var
     * @return $this
     */
    public function setCrowdingColumn($var)
    {
        GPBUtil::checkString($var, True);
        $this->crowding_column = $var;

        return $this;
    }

    /**
     * Optional. The number of dimensions of the input embedding.
     *
     * Generated from protobuf field <code>optional int32 embedding_dimension = 4 [(.google.api.field_behavior) = OPTIONAL];</code>
     * @return int
     */
    public function getEmbeddingDimension()
    {
        return isset($this->embedding_dimension) ? $this->embedding_dimension : 0;
    }

    public function hasEmbeddingDimension()
    {
        return isset($this->embedding_dimension);
    }

    public function clearEmbeddingDimension()
    {
        unset($this->embedding_dimension);
    }

    /**
     * Optional. The number of dimensions of the input embedding.
     *
     * Generated from protobuf field <code>optional int32 embedding_dimension = 4 [(.google.api.field_behavior) = OPTIONAL];</code>
     * @param int $var
     * @return $this
     */
    public function setEmbeddingDimension($var)
    {
        GPBUtil::checkInt32($var);
        $this->embedding_dimension = $var;

        return $this;
    }

    /**
     * Optional. The distance measure used in nearest neighbor search.
     *
     * Generated from protobuf field <code>.google.cloud.aiplatform.v1.FeatureView.IndexConfig.DistanceMeasureType distance_measure_type = 5 [(.google.api.field_behavior) = OPTIONAL];</code>
     * @return int
     */
    public function getDistanceMeasureType()
    {
        return $this->distance_measure_type;
    }

    /**
     * Optional. The distance measure used in nearest neighbor search.
     *
     * Generated from protobuf field <code>.google.cloud.aiplatform.v1.FeatureView.IndexConfig.DistanceMeasureType distance_measure_type = 5 [(.google.api.field_behavior) = OPTIONAL];</code>
     * @param int $var
     * @return $this
     */
    public function setDistanceMeasureType($var)
    {
        GPBUtil::checkEnum($var, \Google\Cloud\AIPlatform\V1\FeatureView\IndexConfig\DistanceMeasureType::class);
        $this->distance_measure_type = $var;

        return $this;
    }

    /**
     * @return string
     */
    public function getAlgorithmConfig()
    {
        return $this->whichOneof("algorithm_config");
    }

}


