<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/cloud/aiplatform/v1/vizier_service.proto

namespace Google\Cloud\AIPlatform\V1;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Request message for
 * [VizierService.SuggestTrials][google.cloud.aiplatform.v1.VizierService.SuggestTrials].
 *
 * Generated from protobuf message <code>google.cloud.aiplatform.v1.SuggestTrialsRequest</code>
 */
class SuggestTrialsRequest extends \Google\Protobuf\Internal\Message
{
    /**
     * Required. The project and location that the Study belongs to.
     * Format: `projects/{project}/locations/{location}/studies/{study}`
     *
     * Generated from protobuf field <code>string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {</code>
     */
    private $parent = '';
    /**
     * Required. The number of suggestions requested. It must be positive.
     *
     * Generated from protobuf field <code>int32 suggestion_count = 2 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    private $suggestion_count = 0;
    /**
     * Required. The identifier of the client that is requesting the suggestion.
     * If multiple SuggestTrialsRequests have the same `client_id`,
     * the service will return the identical suggested Trial if the Trial is
     * pending, and provide a new Trial if the last suggested Trial was completed.
     *
     * Generated from protobuf field <code>string client_id = 3 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    private $client_id = '';
    /**
     * Optional. This allows you to specify the "context" for a Trial; a context
     * is a slice (a subspace) of the search space.
     * Typical uses for contexts:
     * 1) You are using Vizier to tune a server for best performance, but there's
     *   a strong weekly cycle.  The context specifies the day-of-week.
     *   This allows Tuesday to generalize from Wednesday without assuming that
     *   everything is identical.
     * 2) Imagine you're optimizing some medical treatment for people.
     *   As they walk in the door, you know certain facts about them
     *   (e.g. sex, weight, height, blood-pressure).  Put that information in the
     *   context, and Vizier will adapt its suggestions to the patient.
     * 3) You want to do a fair A/B test efficiently.  Specify the "A" and "B"
     *   conditions as contexts, and Vizier will generalize between "A" and "B"
     *   conditions.  If they are similar, this will allow Vizier to converge
     *   to the optimum faster than if "A" and "B" were separate Studies.
     *   NOTE: You can also enter contexts as REQUESTED Trials, e.g. via the
     *   CreateTrial() RPC; that's the asynchronous option where you don't need a
     *   close association between contexts and suggestions.
     * NOTE: All the Parameters you set in a context MUST be defined in the
     *   Study.
     * NOTE: You must supply 0 or $suggestion_count contexts.
     *   If you don't supply any contexts, Vizier will make suggestions
     *   from the full search space specified in the StudySpec; if you supply
     *   a full set of context, each suggestion will match the corresponding
     *   context.
     * NOTE: A Context with no features set matches anything, and allows
     *   suggestions from the full search space.
     * NOTE: Contexts MUST lie within the search space specified in the
     *   StudySpec.  It's an error if they don't.
     * NOTE: Contexts preferentially match ACTIVE then REQUESTED trials before
     *   new suggestions are generated.
     * NOTE: Generation of suggestions involves a match between a Context and
     *   (optionally) a REQUESTED trial; if that match is not fully specified, a
     *   suggestion will be geneated in the merged subspace.
     *
     * Generated from protobuf field <code>repeated .google.cloud.aiplatform.v1.TrialContext contexts = 4 [(.google.api.field_behavior) = OPTIONAL];</code>
     */
    private $contexts;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $parent
     *           Required. The project and location that the Study belongs to.
     *           Format: `projects/{project}/locations/{location}/studies/{study}`
     *     @type int $suggestion_count
     *           Required. The number of suggestions requested. It must be positive.
     *     @type string $client_id
     *           Required. The identifier of the client that is requesting the suggestion.
     *           If multiple SuggestTrialsRequests have the same `client_id`,
     *           the service will return the identical suggested Trial if the Trial is
     *           pending, and provide a new Trial if the last suggested Trial was completed.
     *     @type array<\Google\Cloud\AIPlatform\V1\TrialContext>|\Google\Protobuf\Internal\RepeatedField $contexts
     *           Optional. This allows you to specify the "context" for a Trial; a context
     *           is a slice (a subspace) of the search space.
     *           Typical uses for contexts:
     *           1) You are using Vizier to tune a server for best performance, but there's
     *             a strong weekly cycle.  The context specifies the day-of-week.
     *             This allows Tuesday to generalize from Wednesday without assuming that
     *             everything is identical.
     *           2) Imagine you're optimizing some medical treatment for people.
     *             As they walk in the door, you know certain facts about them
     *             (e.g. sex, weight, height, blood-pressure).  Put that information in the
     *             context, and Vizier will adapt its suggestions to the patient.
     *           3) You want to do a fair A/B test efficiently.  Specify the "A" and "B"
     *             conditions as contexts, and Vizier will generalize between "A" and "B"
     *             conditions.  If they are similar, this will allow Vizier to converge
     *             to the optimum faster than if "A" and "B" were separate Studies.
     *             NOTE: You can also enter contexts as REQUESTED Trials, e.g. via the
     *             CreateTrial() RPC; that's the asynchronous option where you don't need a
     *             close association between contexts and suggestions.
     *           NOTE: All the Parameters you set in a context MUST be defined in the
     *             Study.
     *           NOTE: You must supply 0 or $suggestion_count contexts.
     *             If you don't supply any contexts, Vizier will make suggestions
     *             from the full search space specified in the StudySpec; if you supply
     *             a full set of context, each suggestion will match the corresponding
     *             context.
     *           NOTE: A Context with no features set matches anything, and allows
     *             suggestions from the full search space.
     *           NOTE: Contexts MUST lie within the search space specified in the
     *             StudySpec.  It's an error if they don't.
     *           NOTE: Contexts preferentially match ACTIVE then REQUESTED trials before
     *             new suggestions are generated.
     *           NOTE: Generation of suggestions involves a match between a Context and
     *             (optionally) a REQUESTED trial; if that match is not fully specified, a
     *             suggestion will be geneated in the merged subspace.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Google\Cloud\Aiplatform\V1\VizierService::initOnce();
        parent::__construct($data);
    }

    /**
     * Required. The project and location that the Study belongs to.
     * Format: `projects/{project}/locations/{location}/studies/{study}`
     *
     * Generated from protobuf field <code>string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {</code>
     * @return string
     */
    public function getParent()
    {
        return $this->parent;
    }

    /**
     * Required. The project and location that the Study belongs to.
     * Format: `projects/{project}/locations/{location}/studies/{study}`
     *
     * Generated from protobuf field <code>string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {</code>
     * @param string $var
     * @return $this
     */
    public function setParent($var)
    {
        GPBUtil::checkString($var, True);
        $this->parent = $var;

        return $this;
    }

    /**
     * Required. The number of suggestions requested. It must be positive.
     *
     * Generated from protobuf field <code>int32 suggestion_count = 2 [(.google.api.field_behavior) = REQUIRED];</code>
     * @return int
     */
    public function getSuggestionCount()
    {
        return $this->suggestion_count;
    }

    /**
     * Required. The number of suggestions requested. It must be positive.
     *
     * Generated from protobuf field <code>int32 suggestion_count = 2 [(.google.api.field_behavior) = REQUIRED];</code>
     * @param int $var
     * @return $this
     */
    public function setSuggestionCount($var)
    {
        GPBUtil::checkInt32($var);
        $this->suggestion_count = $var;

        return $this;
    }

    /**
     * Required. The identifier of the client that is requesting the suggestion.
     * If multiple SuggestTrialsRequests have the same `client_id`,
     * the service will return the identical suggested Trial if the Trial is
     * pending, and provide a new Trial if the last suggested Trial was completed.
     *
     * Generated from protobuf field <code>string client_id = 3 [(.google.api.field_behavior) = REQUIRED];</code>
     * @return string
     */
    public function getClientId()
    {
        return $this->client_id;
    }

    /**
     * Required. The identifier of the client that is requesting the suggestion.
     * If multiple SuggestTrialsRequests have the same `client_id`,
     * the service will return the identical suggested Trial if the Trial is
     * pending, and provide a new Trial if the last suggested Trial was completed.
     *
     * Generated from protobuf field <code>string client_id = 3 [(.google.api.field_behavior) = REQUIRED];</code>
     * @param string $var
     * @return $this
     */
    public function setClientId($var)
    {
        GPBUtil::checkString($var, True);
        $this->client_id = $var;

        return $this;
    }

    /**
     * Optional. This allows you to specify the "context" for a Trial; a context
     * is a slice (a subspace) of the search space.
     * Typical uses for contexts:
     * 1) You are using Vizier to tune a server for best performance, but there's
     *   a strong weekly cycle.  The context specifies the day-of-week.
     *   This allows Tuesday to generalize from Wednesday without assuming that
     *   everything is identical.
     * 2) Imagine you're optimizing some medical treatment for people.
     *   As they walk in the door, you know certain facts about them
     *   (e.g. sex, weight, height, blood-pressure).  Put that information in the
     *   context, and Vizier will adapt its suggestions to the patient.
     * 3) You want to do a fair A/B test efficiently.  Specify the "A" and "B"
     *   conditions as contexts, and Vizier will generalize between "A" and "B"
     *   conditions.  If they are similar, this will allow Vizier to converge
     *   to the optimum faster than if "A" and "B" were separate Studies.
     *   NOTE: You can also enter contexts as REQUESTED Trials, e.g. via the
     *   CreateTrial() RPC; that's the asynchronous option where you don't need a
     *   close association between contexts and suggestions.
     * NOTE: All the Parameters you set in a context MUST be defined in the
     *   Study.
     * NOTE: You must supply 0 or $suggestion_count contexts.
     *   If you don't supply any contexts, Vizier will make suggestions
     *   from the full search space specified in the StudySpec; if you supply
     *   a full set of context, each suggestion will match the corresponding
     *   context.
     * NOTE: A Context with no features set matches anything, and allows
     *   suggestions from the full search space.
     * NOTE: Contexts MUST lie within the search space specified in the
     *   StudySpec.  It's an error if they don't.
     * NOTE: Contexts preferentially match ACTIVE then REQUESTED trials before
     *   new suggestions are generated.
     * NOTE: Generation of suggestions involves a match between a Context and
     *   (optionally) a REQUESTED trial; if that match is not fully specified, a
     *   suggestion will be geneated in the merged subspace.
     *
     * Generated from protobuf field <code>repeated .google.cloud.aiplatform.v1.TrialContext contexts = 4 [(.google.api.field_behavior) = OPTIONAL];</code>
     * @return \Google\Protobuf\Internal\RepeatedField
     */
    public function getContexts()
    {
        return $this->contexts;
    }

    /**
     * Optional. This allows you to specify the "context" for a Trial; a context
     * is a slice (a subspace) of the search space.
     * Typical uses for contexts:
     * 1) You are using Vizier to tune a server for best performance, but there's
     *   a strong weekly cycle.  The context specifies the day-of-week.
     *   This allows Tuesday to generalize from Wednesday without assuming that
     *   everything is identical.
     * 2) Imagine you're optimizing some medical treatment for people.
     *   As they walk in the door, you know certain facts about them
     *   (e.g. sex, weight, height, blood-pressure).  Put that information in the
     *   context, and Vizier will adapt its suggestions to the patient.
     * 3) You want to do a fair A/B test efficiently.  Specify the "A" and "B"
     *   conditions as contexts, and Vizier will generalize between "A" and "B"
     *   conditions.  If they are similar, this will allow Vizier to converge
     *   to the optimum faster than if "A" and "B" were separate Studies.
     *   NOTE: You can also enter contexts as REQUESTED Trials, e.g. via the
     *   CreateTrial() RPC; that's the asynchronous option where you don't need a
     *   close association between contexts and suggestions.
     * NOTE: All the Parameters you set in a context MUST be defined in the
     *   Study.
     * NOTE: You must supply 0 or $suggestion_count contexts.
     *   If you don't supply any contexts, Vizier will make suggestions
     *   from the full search space specified in the StudySpec; if you supply
     *   a full set of context, each suggestion will match the corresponding
     *   context.
     * NOTE: A Context with no features set matches anything, and allows
     *   suggestions from the full search space.
     * NOTE: Contexts MUST lie within the search space specified in the
     *   StudySpec.  It's an error if they don't.
     * NOTE: Contexts preferentially match ACTIVE then REQUESTED trials before
     *   new suggestions are generated.
     * NOTE: Generation of suggestions involves a match between a Context and
     *   (optionally) a REQUESTED trial; if that match is not fully specified, a
     *   suggestion will be geneated in the merged subspace.
     *
     * Generated from protobuf field <code>repeated .google.cloud.aiplatform.v1.TrialContext contexts = 4 [(.google.api.field_behavior) = OPTIONAL];</code>
     * @param array<\Google\Cloud\AIPlatform\V1\TrialContext>|\Google\Protobuf\Internal\RepeatedField $var
     * @return $this
     */
    public function setContexts($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::MESSAGE, \Google\Cloud\AIPlatform\V1\TrialContext::class);
        $this->contexts = $arr;

        return $this;
    }

}

