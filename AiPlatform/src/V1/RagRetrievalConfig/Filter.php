<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/cloud/aiplatform/v1/tool.proto

namespace Google\Cloud\AIPlatform\V1\RagRetrievalConfig;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Config for filters.
 *
 * Generated from protobuf message <code>google.cloud.aiplatform.v1.RagRetrievalConfig.Filter</code>
 */
class Filter extends \Google\Protobuf\Internal\Message
{
    /**
     * Optional. String for metadata filtering.
     *
     * Generated from protobuf field <code>string metadata_filter = 2 [(.google.api.field_behavior) = OPTIONAL];</code>
     */
    protected $metadata_filter = '';
    protected $vector_db_threshold;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type float $vector_distance_threshold
     *           Optional. Only returns contexts with vector distance smaller than the
     *           threshold.
     *     @type float $vector_similarity_threshold
     *           Optional. Only returns contexts with vector similarity larger than the
     *           threshold.
     *     @type string $metadata_filter
     *           Optional. String for metadata filtering.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Google\Cloud\Aiplatform\V1\Tool::initOnce();
        parent::__construct($data);
    }

    /**
     * Optional. Only returns contexts with vector distance smaller than the
     * threshold.
     *
     * Generated from protobuf field <code>double vector_distance_threshold = 3 [(.google.api.field_behavior) = OPTIONAL];</code>
     * @return float
     */
    public function getVectorDistanceThreshold()
    {
        return $this->readOneof(3);
    }

    public function hasVectorDistanceThreshold()
    {
        return $this->hasOneof(3);
    }

    /**
     * Optional. Only returns contexts with vector distance smaller than the
     * threshold.
     *
     * Generated from protobuf field <code>double vector_distance_threshold = 3 [(.google.api.field_behavior) = OPTIONAL];</code>
     * @param float $var
     * @return $this
     */
    public function setVectorDistanceThreshold($var)
    {
        GPBUtil::checkDouble($var);
        $this->writeOneof(3, $var);

        return $this;
    }

    /**
     * Optional. Only returns contexts with vector similarity larger than the
     * threshold.
     *
     * Generated from protobuf field <code>double vector_similarity_threshold = 4 [(.google.api.field_behavior) = OPTIONAL];</code>
     * @return float
     */
    public function getVectorSimilarityThreshold()
    {
        return $this->readOneof(4);
    }

    public function hasVectorSimilarityThreshold()
    {
        return $this->hasOneof(4);
    }

    /**
     * Optional. Only returns contexts with vector similarity larger than the
     * threshold.
     *
     * Generated from protobuf field <code>double vector_similarity_threshold = 4 [(.google.api.field_behavior) = OPTIONAL];</code>
     * @param float $var
     * @return $this
     */
    public function setVectorSimilarityThreshold($var)
    {
        GPBUtil::checkDouble($var);
        $this->writeOneof(4, $var);

        return $this;
    }

    /**
     * Optional. String for metadata filtering.
     *
     * Generated from protobuf field <code>string metadata_filter = 2 [(.google.api.field_behavior) = OPTIONAL];</code>
     * @return string
     */
    public function getMetadataFilter()
    {
        return $this->metadata_filter;
    }

    /**
     * Optional. String for metadata filtering.
     *
     * Generated from protobuf field <code>string metadata_filter = 2 [(.google.api.field_behavior) = OPTIONAL];</code>
     * @param string $var
     * @return $this
     */
    public function setMetadataFilter($var)
    {
        GPBUtil::checkString($var, True);
        $this->metadata_filter = $var;

        return $this;
    }

    /**
     * @return string
     */
    public function getVectorDbThreshold()
    {
        return $this->whichOneof("vector_db_threshold");
    }

}


