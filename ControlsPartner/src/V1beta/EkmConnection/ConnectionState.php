<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/cloud/cloudcontrolspartner/v1beta/ekm_connections.proto

namespace Google\Cloud\CloudControlsPartner\V1beta\EkmConnection;

use UnexpectedValueException;

/**
 * The EKM connection state.
 *
 * Protobuf type <code>google.cloud.cloudcontrolspartner.v1beta.EkmConnection.ConnectionState</code>
 */
class ConnectionState
{
    /**
     * Unspecified EKM connection state
     *
     * Generated from protobuf enum <code>CONNECTION_STATE_UNSPECIFIED = 0;</code>
     */
    const CONNECTION_STATE_UNSPECIFIED = 0;
    /**
     * Available EKM connection state
     *
     * Generated from protobuf enum <code>AVAILABLE = 1;</code>
     */
    const AVAILABLE = 1;
    /**
     * Not available EKM connection state
     *
     * Generated from protobuf enum <code>NOT_AVAILABLE = 2;</code>
     */
    const NOT_AVAILABLE = 2;
    /**
     * Error EKM connection state
     *
     * Generated from protobuf enum <code>ERROR = 3;</code>
     */
    const ERROR = 3;
    /**
     * Permission denied EKM connection state
     *
     * Generated from protobuf enum <code>PERMISSION_DENIED = 4;</code>
     */
    const PERMISSION_DENIED = 4;

    private static $valueToName = [
        self::CONNECTION_STATE_UNSPECIFIED => 'CONNECTION_STATE_UNSPECIFIED',
        self::AVAILABLE => 'AVAILABLE',
        self::NOT_AVAILABLE => 'NOT_AVAILABLE',
        self::ERROR => 'ERROR',
        self::PERMISSION_DENIED => 'PERMISSION_DENIED',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}


