<?php
/*
 * Copyright 2023 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * GENERATED CODE WARNING
 * Generated by gapic-generator-php from the file
 * https://github.com/googleapis/googleapis/blob/master/google/cloud/speech/v1/cloud_speech_adaptation.proto
 * Updates to the above are reflected here through a refresh process.
 */

namespace Google\Cloud\Speech\V1\Client\BaseClient;

use Google\ApiCore\ApiException;
use Google\ApiCore\CredentialsWrapper;
use Google\ApiCore\GapicClientTrait;
use Google\ApiCore\PagedListResponse;
use Google\ApiCore\ResourceHelperTrait;
use Google\ApiCore\RetrySettings;
use Google\ApiCore\Transport\TransportInterface;
use Google\ApiCore\ValidationException;
use Google\Auth\FetchAuthTokenInterface;
use Google\Cloud\Speech\V1\CreateCustomClassRequest;
use Google\Cloud\Speech\V1\CreatePhraseSetRequest;
use Google\Cloud\Speech\V1\CustomClass;
use Google\Cloud\Speech\V1\DeleteCustomClassRequest;
use Google\Cloud\Speech\V1\DeletePhraseSetRequest;
use Google\Cloud\Speech\V1\GetCustomClassRequest;
use Google\Cloud\Speech\V1\GetPhraseSetRequest;
use Google\Cloud\Speech\V1\ListCustomClassesRequest;
use Google\Cloud\Speech\V1\ListPhraseSetRequest;
use Google\Cloud\Speech\V1\PhraseSet;
use Google\Cloud\Speech\V1\UpdateCustomClassRequest;
use Google\Cloud\Speech\V1\UpdatePhraseSetRequest;
use GuzzleHttp\Promise\PromiseInterface;

/**
 * Service Description: Service that implements Google Cloud Speech Adaptation API.
 *
 * This class provides the ability to make remote calls to the backing service through method
 * calls that map to API methods.
 *
 * Many parameters require resource names to be formatted in a particular way. To
 * assist with these names, this class includes a format method for each type of
 * name, and additionally a parseName method to extract the individual identifiers
 * contained within formatted names that are returned by the API.
 *
 * This class is currently experimental and may be subject to changes.
 *
 * @experimental
 *
 * @internal
 *
 * @method PromiseInterface createCustomClassAsync(CreateCustomClassRequest $request, array $optionalArgs = [])
 * @method PromiseInterface createPhraseSetAsync(CreatePhraseSetRequest $request, array $optionalArgs = [])
 * @method PromiseInterface deleteCustomClassAsync(DeleteCustomClassRequest $request, array $optionalArgs = [])
 * @method PromiseInterface deletePhraseSetAsync(DeletePhraseSetRequest $request, array $optionalArgs = [])
 * @method PromiseInterface getCustomClassAsync(GetCustomClassRequest $request, array $optionalArgs = [])
 * @method PromiseInterface getPhraseSetAsync(GetPhraseSetRequest $request, array $optionalArgs = [])
 * @method PromiseInterface listCustomClassesAsync(ListCustomClassesRequest $request, array $optionalArgs = [])
 * @method PromiseInterface listPhraseSetAsync(ListPhraseSetRequest $request, array $optionalArgs = [])
 * @method PromiseInterface updateCustomClassAsync(UpdateCustomClassRequest $request, array $optionalArgs = [])
 * @method PromiseInterface updatePhraseSetAsync(UpdatePhraseSetRequest $request, array $optionalArgs = [])
 */
abstract class AdaptationBaseClient
{
    use GapicClientTrait;
    use ResourceHelperTrait;

    /** The name of the service. */
    private const SERVICE_NAME = 'google.cloud.speech.v1.Adaptation';

    /** The default address of the service. */
    private const SERVICE_ADDRESS = 'speech.googleapis.com';

    /** The default port of the service. */
    private const DEFAULT_SERVICE_PORT = 443;

    /** The name of the code generator, to be included in the agent header. */
    private const CODEGEN_NAME = 'gapic';

    /** The default scopes required by the service. */
    public static $serviceScopes = [
        'https://www.googleapis.com/auth/cloud-platform',
    ];

    private static function getClientDefaults()
    {
        return [
            'serviceName' => self::SERVICE_NAME,
            'apiEndpoint' => self::SERVICE_ADDRESS . ':' . self::DEFAULT_SERVICE_PORT,
            'clientConfig' => __DIR__ . '/../../resources/adaptation_client_config.json',
            'descriptorsConfigPath' => __DIR__ . '/../../resources/adaptation_descriptor_config.php',
            'gcpApiConfigPath' => __DIR__ . '/../../resources/adaptation_grpc_config.json',
            'credentialsConfig' => [
                'defaultScopes' => self::$serviceScopes,
            ],
            'transportConfig' => [
                'rest' => [
                    'restClientConfigPath' => __DIR__ . '/../../resources/adaptation_rest_client_config.php',
                ],
            ],
        ];
    }

    /**
     * Formats a string containing the fully-qualified path to represent a custom_class
     * resource.
     *
     * @param string $project
     * @param string $location
     * @param string $customClass
     *
     * @return string The formatted custom_class resource.
     */
    public static function customClassName(string $project, string $location, string $customClass): string
    {
        return self::getPathTemplate('customClass')->render([
            'project' => $project,
            'location' => $location,
            'custom_class' => $customClass,
        ]);
    }

    /**
     * Formats a string containing the fully-qualified path to represent a location
     * resource.
     *
     * @param string $project
     * @param string $location
     *
     * @return string The formatted location resource.
     */
    public static function locationName(string $project, string $location): string
    {
        return self::getPathTemplate('location')->render([
            'project' => $project,
            'location' => $location,
        ]);
    }

    /**
     * Formats a string containing the fully-qualified path to represent a phrase_set
     * resource.
     *
     * @param string $project
     * @param string $location
     * @param string $phraseSet
     *
     * @return string The formatted phrase_set resource.
     */
    public static function phraseSetName(string $project, string $location, string $phraseSet): string
    {
        return self::getPathTemplate('phraseSet')->render([
            'project' => $project,
            'location' => $location,
            'phrase_set' => $phraseSet,
        ]);
    }

    /**
     * Parses a formatted name string and returns an associative array of the components in the name.
     * The following name formats are supported:
     * Template: Pattern
     * - customClass: projects/{project}/locations/{location}/customClasses/{custom_class}
     * - location: projects/{project}/locations/{location}
     * - phraseSet: projects/{project}/locations/{location}/phraseSets/{phrase_set}
     *
     * The optional $template argument can be supplied to specify a particular pattern,
     * and must match one of the templates listed above. If no $template argument is
     * provided, or if the $template argument does not match one of the templates
     * listed, then parseName will check each of the supported templates, and return
     * the first match.
     *
     * @param string $formattedName The formatted name string
     * @param string $template      Optional name of template to match
     *
     * @return array An associative array from name component IDs to component values.
     *
     * @throws ValidationException If $formattedName could not be matched.
     */
    public static function parseName(string $formattedName, string $template = null): array
    {
        return self::parseFormattedName($formattedName, $template);
    }

    /**
     * Constructor.
     *
     * @param array $options {
     *     Optional. Options for configuring the service API wrapper.
     *
     *     @type string $apiEndpoint
     *           The address of the API remote host. May optionally include the port, formatted
     *           as "<uri>:<port>". Default 'speech.googleapis.com:443'.
     *     @type string|array|FetchAuthTokenInterface|CredentialsWrapper $credentials
     *           The credentials to be used by the client to authorize API calls. This option
     *           accepts either a path to a credentials file, or a decoded credentials file as a
     *           PHP array.
     *           *Advanced usage*: In addition, this option can also accept a pre-constructed
     *           {@see \Google\Auth\FetchAuthTokenInterface} object or
     *           {@see \Google\ApiCore\CredentialsWrapper} object. Note that when one of these
     *           objects are provided, any settings in $credentialsConfig will be ignored.
     *     @type array $credentialsConfig
     *           Options used to configure credentials, including auth token caching, for the
     *           client. For a full list of supporting configuration options, see
     *           {@see \Google\ApiCore\CredentialsWrapper::build()} .
     *     @type bool $disableRetries
     *           Determines whether or not retries defined by the client configuration should be
     *           disabled. Defaults to `false`.
     *     @type string|array $clientConfig
     *           Client method configuration, including retry settings. This option can be either
     *           a path to a JSON file, or a PHP array containing the decoded JSON data. By
     *           default this settings points to the default client config file, which is
     *           provided in the resources folder.
     *     @type string|TransportInterface $transport
     *           The transport used for executing network requests. May be either the string
     *           `rest` or `grpc`. Defaults to `grpc` if gRPC support is detected on the system.
     *           *Advanced usage*: Additionally, it is possible to pass in an already
     *           instantiated {@see \Google\ApiCore\Transport\TransportInterface} object. Note
     *           that when this object is provided, any settings in $transportConfig, and any
     *           $apiEndpoint setting, will be ignored.
     *     @type array $transportConfig
     *           Configuration options that will be used to construct the transport. Options for
     *           each supported transport type should be passed in a key for that transport. For
     *           example:
     *           $transportConfig = [
     *               'grpc' => [...],
     *               'rest' => [...],
     *           ];
     *           See the {@see \Google\ApiCore\Transport\GrpcTransport::build()} and
     *           {@see \Google\ApiCore\Transport\RestTransport::build()} methods for the
     *           supported options.
     *     @type callable $clientCertSource
     *           A callable which returns the client cert as a string. This can be used to
     *           provide a certificate and private key to the transport layer for mTLS.
     * }
     *
     * @throws ValidationException
     */
    public function __construct(array $options = [])
    {
        $clientOptions = $this->buildClientOptions($options);
        $this->setClientOptions($clientOptions);
    }

    /** Handles execution of the async variants for each documented method. */
    public function __call($method, $args)
    {
        if (substr($method, -5) !== 'Async') {
            trigger_error('Call to undefined method ' . __CLASS__ . "::$method()", E_USER_ERROR);
        }

        array_unshift($args, substr($method, 0, -5));
        return call_user_func_array([$this, 'startAsyncCall'], $args);
    }

    /**
     * Create a custom class.
     *
     * The async variant is {@see self::createCustomClassAsync()} .
     *
     * @param CreateCustomClassRequest $request     A request to house fields associated with the call.
     * @param array                    $callOptions {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return CustomClass
     *
     * @throws ApiException Thrown if the API call fails.
     */
    public function createCustomClass(CreateCustomClassRequest $request, array $callOptions = []): CustomClass
    {
        return $this->startApiCall('CreateCustomClass', $request, $callOptions)->wait();
    }

    /**
     * Create a set of phrase hints. Each item in the set can be a single word or
     * a multi-word phrase. The items in the PhraseSet are favored by the
     * recognition model when you send a call that includes the PhraseSet.
     *
     * The async variant is {@see self::createPhraseSetAsync()} .
     *
     * @param CreatePhraseSetRequest $request     A request to house fields associated with the call.
     * @param array                  $callOptions {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return PhraseSet
     *
     * @throws ApiException Thrown if the API call fails.
     */
    public function createPhraseSet(CreatePhraseSetRequest $request, array $callOptions = []): PhraseSet
    {
        return $this->startApiCall('CreatePhraseSet', $request, $callOptions)->wait();
    }

    /**
     * Delete a custom class.
     *
     * The async variant is {@see self::deleteCustomClassAsync()} .
     *
     * @param DeleteCustomClassRequest $request     A request to house fields associated with the call.
     * @param array                    $callOptions {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @throws ApiException Thrown if the API call fails.
     */
    public function deleteCustomClass(DeleteCustomClassRequest $request, array $callOptions = []): void
    {
        $this->startApiCall('DeleteCustomClass', $request, $callOptions)->wait();
    }

    /**
     * Delete a phrase set.
     *
     * The async variant is {@see self::deletePhraseSetAsync()} .
     *
     * @param DeletePhraseSetRequest $request     A request to house fields associated with the call.
     * @param array                  $callOptions {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @throws ApiException Thrown if the API call fails.
     */
    public function deletePhraseSet(DeletePhraseSetRequest $request, array $callOptions = []): void
    {
        $this->startApiCall('DeletePhraseSet', $request, $callOptions)->wait();
    }

    /**
     * Get a custom class.
     *
     * The async variant is {@see self::getCustomClassAsync()} .
     *
     * @param GetCustomClassRequest $request     A request to house fields associated with the call.
     * @param array                 $callOptions {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return CustomClass
     *
     * @throws ApiException Thrown if the API call fails.
     */
    public function getCustomClass(GetCustomClassRequest $request, array $callOptions = []): CustomClass
    {
        return $this->startApiCall('GetCustomClass', $request, $callOptions)->wait();
    }

    /**
     * Get a phrase set.
     *
     * The async variant is {@see self::getPhraseSetAsync()} .
     *
     * @param GetPhraseSetRequest $request     A request to house fields associated with the call.
     * @param array               $callOptions {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return PhraseSet
     *
     * @throws ApiException Thrown if the API call fails.
     */
    public function getPhraseSet(GetPhraseSetRequest $request, array $callOptions = []): PhraseSet
    {
        return $this->startApiCall('GetPhraseSet', $request, $callOptions)->wait();
    }

    /**
     * List custom classes.
     *
     * The async variant is {@see self::listCustomClassesAsync()} .
     *
     * @param ListCustomClassesRequest $request     A request to house fields associated with the call.
     * @param array                    $callOptions {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return PagedListResponse
     *
     * @throws ApiException Thrown if the API call fails.
     */
    public function listCustomClasses(ListCustomClassesRequest $request, array $callOptions = []): PagedListResponse
    {
        return $this->startApiCall('ListCustomClasses', $request, $callOptions);
    }

    /**
     * List phrase sets.
     *
     * The async variant is {@see self::listPhraseSetAsync()} .
     *
     * @param ListPhraseSetRequest $request     A request to house fields associated with the call.
     * @param array                $callOptions {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return PagedListResponse
     *
     * @throws ApiException Thrown if the API call fails.
     */
    public function listPhraseSet(ListPhraseSetRequest $request, array $callOptions = []): PagedListResponse
    {
        return $this->startApiCall('ListPhraseSet', $request, $callOptions);
    }

    /**
     * Update a custom class.
     *
     * The async variant is {@see self::updateCustomClassAsync()} .
     *
     * @param UpdateCustomClassRequest $request     A request to house fields associated with the call.
     * @param array                    $callOptions {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return CustomClass
     *
     * @throws ApiException Thrown if the API call fails.
     */
    public function updateCustomClass(UpdateCustomClassRequest $request, array $callOptions = []): CustomClass
    {
        return $this->startApiCall('UpdateCustomClass', $request, $callOptions)->wait();
    }

    /**
     * Update a phrase set.
     *
     * The async variant is {@see self::updatePhraseSetAsync()} .
     *
     * @param UpdatePhraseSetRequest $request     A request to house fields associated with the call.
     * @param array                  $callOptions {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return PhraseSet
     *
     * @throws ApiException Thrown if the API call fails.
     */
    public function updatePhraseSet(UpdatePhraseSetRequest $request, array $callOptions = []): PhraseSet
    {
        return $this->startApiCall('UpdatePhraseSet', $request, $callOptions)->wait();
    }
}
