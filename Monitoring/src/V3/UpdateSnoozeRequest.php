<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/monitoring/v3/snooze_service.proto

namespace Google\Cloud\Monitoring\V3;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * The message definition for updating a `Snooze`. The field, `snooze.name`
 * identifies the `Snooze` to be updated. The remainder of `snooze` gives the
 * content the `Snooze` in question will be assigned.
 * What fields can be updated depends on the start time and end time of the
 * `Snooze`.
 *   * end time is in the past: These `Snooze`s are considered
 *     read-only and cannot be updated.
 *   * start time is in the past and end time is in the future: `display_name`
 *     and `interval.end_time` can be updated.
 *   * start time is in the future: `display_name`, `interval.start_time` and
 *     `interval.end_time` can be updated.
 *
 * Generated from protobuf message <code>google.monitoring.v3.UpdateSnoozeRequest</code>
 */
class UpdateSnoozeRequest extends \Google\Protobuf\Internal\Message
{
    /**
     * Required. The `Snooze` to update. Must have the name field present.
     *
     * Generated from protobuf field <code>.google.monitoring.v3.Snooze snooze = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    private $snooze = null;
    /**
     * Required. The fields to update.
     * For each field listed in `update_mask`:
     *   * If the `Snooze` object supplied in the `UpdateSnoozeRequest` has a
     *     value for that field, the value of the field in the existing `Snooze`
     *     will be set to the value of the field in the supplied `Snooze`.
     *   * If the field does not have a value in the supplied `Snooze`, the field
     *     in the existing `Snooze` is set to its default value.
     * Fields not listed retain their existing value.
     * The following are the field names that are accepted in `update_mask`:
     *   * `display_name`
     *   * `interval.start_time`
     *   * `interval.end_time`
     * That said, the start time and end time of the `Snooze` determines which
     * fields can legally be updated. Before attempting an update, users should
     * consult the documentation for `UpdateSnoozeRequest`, which talks about
     * which fields can be updated.
     *
     * Generated from protobuf field <code>.google.protobuf.FieldMask update_mask = 2 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    private $update_mask = null;

    /**
     * @param \Google\Cloud\Monitoring\V3\Snooze $snooze     Required. The `Snooze` to update. Must have the name field present.
     * @param \Google\Protobuf\FieldMask         $updateMask Required. The fields to update.
     *
     *                                                       For each field listed in `update_mask`:
     *
     *                                                       * If the `Snooze` object supplied in the `UpdateSnoozeRequest` has a
     *                                                       value for that field, the value of the field in the existing `Snooze`
     *                                                       will be set to the value of the field in the supplied `Snooze`.
     *                                                       * If the field does not have a value in the supplied `Snooze`, the field
     *                                                       in the existing `Snooze` is set to its default value.
     *
     *                                                       Fields not listed retain their existing value.
     *
     *                                                       The following are the field names that are accepted in `update_mask`:
     *
     *                                                       * `display_name`
     *                                                       * `interval.start_time`
     *                                                       * `interval.end_time`
     *
     *                                                       That said, the start time and end time of the `Snooze` determines which
     *                                                       fields can legally be updated. Before attempting an update, users should
     *                                                       consult the documentation for `UpdateSnoozeRequest`, which talks about
     *                                                       which fields can be updated.
     *
     * @return \Google\Cloud\Monitoring\V3\UpdateSnoozeRequest
     *
     * @experimental
     */
    public static function build(\Google\Cloud\Monitoring\V3\Snooze $snooze, \Google\Protobuf\FieldMask $updateMask): self
    {
        return (new self())
            ->setSnooze($snooze)
            ->setUpdateMask($updateMask);
    }

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type \Google\Cloud\Monitoring\V3\Snooze $snooze
     *           Required. The `Snooze` to update. Must have the name field present.
     *     @type \Google\Protobuf\FieldMask $update_mask
     *           Required. The fields to update.
     *           For each field listed in `update_mask`:
     *             * If the `Snooze` object supplied in the `UpdateSnoozeRequest` has a
     *               value for that field, the value of the field in the existing `Snooze`
     *               will be set to the value of the field in the supplied `Snooze`.
     *             * If the field does not have a value in the supplied `Snooze`, the field
     *               in the existing `Snooze` is set to its default value.
     *           Fields not listed retain their existing value.
     *           The following are the field names that are accepted in `update_mask`:
     *             * `display_name`
     *             * `interval.start_time`
     *             * `interval.end_time`
     *           That said, the start time and end time of the `Snooze` determines which
     *           fields can legally be updated. Before attempting an update, users should
     *           consult the documentation for `UpdateSnoozeRequest`, which talks about
     *           which fields can be updated.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Google\Monitoring\V3\SnoozeService::initOnce();
        parent::__construct($data);
    }

    /**
     * Required. The `Snooze` to update. Must have the name field present.
     *
     * Generated from protobuf field <code>.google.monitoring.v3.Snooze snooze = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     * @return \Google\Cloud\Monitoring\V3\Snooze|null
     */
    public function getSnooze()
    {
        return $this->snooze;
    }

    public function hasSnooze()
    {
        return isset($this->snooze);
    }

    public function clearSnooze()
    {
        unset($this->snooze);
    }

    /**
     * Required. The `Snooze` to update. Must have the name field present.
     *
     * Generated from protobuf field <code>.google.monitoring.v3.Snooze snooze = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     * @param \Google\Cloud\Monitoring\V3\Snooze $var
     * @return $this
     */
    public function setSnooze($var)
    {
        GPBUtil::checkMessage($var, \Google\Cloud\Monitoring\V3\Snooze::class);
        $this->snooze = $var;

        return $this;
    }

    /**
     * Required. The fields to update.
     * For each field listed in `update_mask`:
     *   * If the `Snooze` object supplied in the `UpdateSnoozeRequest` has a
     *     value for that field, the value of the field in the existing `Snooze`
     *     will be set to the value of the field in the supplied `Snooze`.
     *   * If the field does not have a value in the supplied `Snooze`, the field
     *     in the existing `Snooze` is set to its default value.
     * Fields not listed retain their existing value.
     * The following are the field names that are accepted in `update_mask`:
     *   * `display_name`
     *   * `interval.start_time`
     *   * `interval.end_time`
     * That said, the start time and end time of the `Snooze` determines which
     * fields can legally be updated. Before attempting an update, users should
     * consult the documentation for `UpdateSnoozeRequest`, which talks about
     * which fields can be updated.
     *
     * Generated from protobuf field <code>.google.protobuf.FieldMask update_mask = 2 [(.google.api.field_behavior) = REQUIRED];</code>
     * @return \Google\Protobuf\FieldMask|null
     */
    public function getUpdateMask()
    {
        return $this->update_mask;
    }

    public function hasUpdateMask()
    {
        return isset($this->update_mask);
    }

    public function clearUpdateMask()
    {
        unset($this->update_mask);
    }

    /**
     * Required. The fields to update.
     * For each field listed in `update_mask`:
     *   * If the `Snooze` object supplied in the `UpdateSnoozeRequest` has a
     *     value for that field, the value of the field in the existing `Snooze`
     *     will be set to the value of the field in the supplied `Snooze`.
     *   * If the field does not have a value in the supplied `Snooze`, the field
     *     in the existing `Snooze` is set to its default value.
     * Fields not listed retain their existing value.
     * The following are the field names that are accepted in `update_mask`:
     *   * `display_name`
     *   * `interval.start_time`
     *   * `interval.end_time`
     * That said, the start time and end time of the `Snooze` determines which
     * fields can legally be updated. Before attempting an update, users should
     * consult the documentation for `UpdateSnoozeRequest`, which talks about
     * which fields can be updated.
     *
     * Generated from protobuf field <code>.google.protobuf.FieldMask update_mask = 2 [(.google.api.field_behavior) = REQUIRED];</code>
     * @param \Google\Protobuf\FieldMask $var
     * @return $this
     */
    public function setUpdateMask($var)
    {
        GPBUtil::checkMessage($var, \Google\Protobuf\FieldMask::class);
        $this->update_mask = $var;

        return $this;
    }

}

