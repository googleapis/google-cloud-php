<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/cloud/gdchardwaremanagement/v1alpha/resources.proto

namespace Google\Cloud\GdcHardwareManagement\V1alpha;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Networking configuration for a zone.
 *
 * Generated from protobuf message <code>google.cloud.gdchardwaremanagement.v1alpha.ZoneNetworkConfig</code>
 */
class ZoneNetworkConfig extends \Google\Protobuf\Internal\Message
{
    /**
     * Required. An IPv4 address block for machine management.
     * Should be a private RFC1918 or public CIDR block large enough to allocate
     * at least one address per machine in the Zone.
     * Should be in `management_ipv4_subnet`, and disjoint with other address
     * ranges.
     *
     * Generated from protobuf field <code>string machine_mgmt_ipv4_range = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.field_info) = {</code>
     */
    protected $machine_mgmt_ipv4_range = '';
    /**
     * Required. An IPv4 address block for kubernetes nodes.
     * Should be a private RFC1918 or public CIDR block large enough to allocate
     * at least one address per machine in the Zone.
     * Should be in `kubernetes_ipv4_subnet`, and disjoint with other address
     * ranges.
     *
     * Generated from protobuf field <code>string kubernetes_node_ipv4_range = 2 [(.google.api.field_behavior) = REQUIRED, (.google.api.field_info) = {</code>
     */
    protected $kubernetes_node_ipv4_range = '';
    /**
     * Required. An IPv4 address block for kubernetes control plane.
     * Should be a private RFC1918 or public CIDR block large enough to allocate
     * at least one address per cluster in the Zone.
     * Should be in `kubernetes_ipv4_subnet`, and disjoint with other address
     * ranges.
     *
     * Generated from protobuf field <code>string kubernetes_control_plane_ipv4_range = 3 [(.google.api.field_behavior) = REQUIRED, (.google.api.field_info) = {</code>
     */
    protected $kubernetes_control_plane_ipv4_range = '';
    /**
     * Required. An IPv4 subnet for the management network.
     *
     * Generated from protobuf field <code>.google.cloud.gdchardwaremanagement.v1alpha.Subnet management_ipv4_subnet = 4 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    protected $management_ipv4_subnet = null;
    /**
     * Optional. An IPv4 subnet for the kubernetes network.
     * If unspecified, the kubernetes subnet will be the same as the management
     * subnet.
     *
     * Generated from protobuf field <code>.google.cloud.gdchardwaremanagement.v1alpha.Subnet kubernetes_ipv4_subnet = 5 [(.google.api.field_behavior) = OPTIONAL];</code>
     */
    protected $kubernetes_ipv4_subnet = null;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $machine_mgmt_ipv4_range
     *           Required. An IPv4 address block for machine management.
     *           Should be a private RFC1918 or public CIDR block large enough to allocate
     *           at least one address per machine in the Zone.
     *           Should be in `management_ipv4_subnet`, and disjoint with other address
     *           ranges.
     *     @type string $kubernetes_node_ipv4_range
     *           Required. An IPv4 address block for kubernetes nodes.
     *           Should be a private RFC1918 or public CIDR block large enough to allocate
     *           at least one address per machine in the Zone.
     *           Should be in `kubernetes_ipv4_subnet`, and disjoint with other address
     *           ranges.
     *     @type string $kubernetes_control_plane_ipv4_range
     *           Required. An IPv4 address block for kubernetes control plane.
     *           Should be a private RFC1918 or public CIDR block large enough to allocate
     *           at least one address per cluster in the Zone.
     *           Should be in `kubernetes_ipv4_subnet`, and disjoint with other address
     *           ranges.
     *     @type \Google\Cloud\GdcHardwareManagement\V1alpha\Subnet $management_ipv4_subnet
     *           Required. An IPv4 subnet for the management network.
     *     @type \Google\Cloud\GdcHardwareManagement\V1alpha\Subnet $kubernetes_ipv4_subnet
     *           Optional. An IPv4 subnet for the kubernetes network.
     *           If unspecified, the kubernetes subnet will be the same as the management
     *           subnet.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Google\Cloud\Gdchardwaremanagement\V1Alpha\Resources::initOnce();
        parent::__construct($data);
    }

    /**
     * Required. An IPv4 address block for machine management.
     * Should be a private RFC1918 or public CIDR block large enough to allocate
     * at least one address per machine in the Zone.
     * Should be in `management_ipv4_subnet`, and disjoint with other address
     * ranges.
     *
     * Generated from protobuf field <code>string machine_mgmt_ipv4_range = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.field_info) = {</code>
     * @return string
     */
    public function getMachineMgmtIpv4Range()
    {
        return $this->machine_mgmt_ipv4_range;
    }

    /**
     * Required. An IPv4 address block for machine management.
     * Should be a private RFC1918 or public CIDR block large enough to allocate
     * at least one address per machine in the Zone.
     * Should be in `management_ipv4_subnet`, and disjoint with other address
     * ranges.
     *
     * Generated from protobuf field <code>string machine_mgmt_ipv4_range = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.field_info) = {</code>
     * @param string $var
     * @return $this
     */
    public function setMachineMgmtIpv4Range($var)
    {
        GPBUtil::checkString($var, True);
        $this->machine_mgmt_ipv4_range = $var;

        return $this;
    }

    /**
     * Required. An IPv4 address block for kubernetes nodes.
     * Should be a private RFC1918 or public CIDR block large enough to allocate
     * at least one address per machine in the Zone.
     * Should be in `kubernetes_ipv4_subnet`, and disjoint with other address
     * ranges.
     *
     * Generated from protobuf field <code>string kubernetes_node_ipv4_range = 2 [(.google.api.field_behavior) = REQUIRED, (.google.api.field_info) = {</code>
     * @return string
     */
    public function getKubernetesNodeIpv4Range()
    {
        return $this->kubernetes_node_ipv4_range;
    }

    /**
     * Required. An IPv4 address block for kubernetes nodes.
     * Should be a private RFC1918 or public CIDR block large enough to allocate
     * at least one address per machine in the Zone.
     * Should be in `kubernetes_ipv4_subnet`, and disjoint with other address
     * ranges.
     *
     * Generated from protobuf field <code>string kubernetes_node_ipv4_range = 2 [(.google.api.field_behavior) = REQUIRED, (.google.api.field_info) = {</code>
     * @param string $var
     * @return $this
     */
    public function setKubernetesNodeIpv4Range($var)
    {
        GPBUtil::checkString($var, True);
        $this->kubernetes_node_ipv4_range = $var;

        return $this;
    }

    /**
     * Required. An IPv4 address block for kubernetes control plane.
     * Should be a private RFC1918 or public CIDR block large enough to allocate
     * at least one address per cluster in the Zone.
     * Should be in `kubernetes_ipv4_subnet`, and disjoint with other address
     * ranges.
     *
     * Generated from protobuf field <code>string kubernetes_control_plane_ipv4_range = 3 [(.google.api.field_behavior) = REQUIRED, (.google.api.field_info) = {</code>
     * @return string
     */
    public function getKubernetesControlPlaneIpv4Range()
    {
        return $this->kubernetes_control_plane_ipv4_range;
    }

    /**
     * Required. An IPv4 address block for kubernetes control plane.
     * Should be a private RFC1918 or public CIDR block large enough to allocate
     * at least one address per cluster in the Zone.
     * Should be in `kubernetes_ipv4_subnet`, and disjoint with other address
     * ranges.
     *
     * Generated from protobuf field <code>string kubernetes_control_plane_ipv4_range = 3 [(.google.api.field_behavior) = REQUIRED, (.google.api.field_info) = {</code>
     * @param string $var
     * @return $this
     */
    public function setKubernetesControlPlaneIpv4Range($var)
    {
        GPBUtil::checkString($var, True);
        $this->kubernetes_control_plane_ipv4_range = $var;

        return $this;
    }

    /**
     * Required. An IPv4 subnet for the management network.
     *
     * Generated from protobuf field <code>.google.cloud.gdchardwaremanagement.v1alpha.Subnet management_ipv4_subnet = 4 [(.google.api.field_behavior) = REQUIRED];</code>
     * @return \Google\Cloud\GdcHardwareManagement\V1alpha\Subnet|null
     */
    public function getManagementIpv4Subnet()
    {
        return $this->management_ipv4_subnet;
    }

    public function hasManagementIpv4Subnet()
    {
        return isset($this->management_ipv4_subnet);
    }

    public function clearManagementIpv4Subnet()
    {
        unset($this->management_ipv4_subnet);
    }

    /**
     * Required. An IPv4 subnet for the management network.
     *
     * Generated from protobuf field <code>.google.cloud.gdchardwaremanagement.v1alpha.Subnet management_ipv4_subnet = 4 [(.google.api.field_behavior) = REQUIRED];</code>
     * @param \Google\Cloud\GdcHardwareManagement\V1alpha\Subnet $var
     * @return $this
     */
    public function setManagementIpv4Subnet($var)
    {
        GPBUtil::checkMessage($var, \Google\Cloud\GdcHardwareManagement\V1alpha\Subnet::class);
        $this->management_ipv4_subnet = $var;

        return $this;
    }

    /**
     * Optional. An IPv4 subnet for the kubernetes network.
     * If unspecified, the kubernetes subnet will be the same as the management
     * subnet.
     *
     * Generated from protobuf field <code>.google.cloud.gdchardwaremanagement.v1alpha.Subnet kubernetes_ipv4_subnet = 5 [(.google.api.field_behavior) = OPTIONAL];</code>
     * @return \Google\Cloud\GdcHardwareManagement\V1alpha\Subnet|null
     */
    public function getKubernetesIpv4Subnet()
    {
        return $this->kubernetes_ipv4_subnet;
    }

    public function hasKubernetesIpv4Subnet()
    {
        return isset($this->kubernetes_ipv4_subnet);
    }

    public function clearKubernetesIpv4Subnet()
    {
        unset($this->kubernetes_ipv4_subnet);
    }

    /**
     * Optional. An IPv4 subnet for the kubernetes network.
     * If unspecified, the kubernetes subnet will be the same as the management
     * subnet.
     *
     * Generated from protobuf field <code>.google.cloud.gdchardwaremanagement.v1alpha.Subnet kubernetes_ipv4_subnet = 5 [(.google.api.field_behavior) = OPTIONAL];</code>
     * @param \Google\Cloud\GdcHardwareManagement\V1alpha\Subnet $var
     * @return $this
     */
    public function setKubernetesIpv4Subnet($var)
    {
        GPBUtil::checkMessage($var, \Google\Cloud\GdcHardwareManagement\V1alpha\Subnet::class);
        $this->kubernetes_ipv4_subnet = $var;

        return $this;
    }

}

