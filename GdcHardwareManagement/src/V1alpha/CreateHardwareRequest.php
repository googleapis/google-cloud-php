<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/cloud/gdchardwaremanagement/v1alpha/service.proto

namespace Google\Cloud\GdcHardwareManagement\V1alpha;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * A request to create hardware.
 *
 * Generated from protobuf message <code>google.cloud.gdchardwaremanagement.v1alpha.CreateHardwareRequest</code>
 */
class CreateHardwareRequest extends \Google\Protobuf\Internal\Message
{
    /**
     * Required. The project and location to create hardware in.
     * Format: `projects/{project}/locations/{location}`
     *
     * Generated from protobuf field <code>string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {</code>
     */
    protected $parent = '';
    /**
     * Optional. ID used to uniquely identify the Hardware within its parent
     * scope. This field should contain at most 63 characters and must start with
     * lowercase characters.
     * Only lowercase characters, numbers and `-` are accepted.
     * The `-` character cannot be the first or the last one.
     * A system generated ID will be used if the field is not set.
     * The hardware.name field in the request will be ignored.
     *
     * Generated from protobuf field <code>string hardware_id = 2 [(.google.api.field_behavior) = OPTIONAL];</code>
     */
    protected $hardware_id = '';
    /**
     * Required. The resource to create.
     *
     * Generated from protobuf field <code>.google.cloud.gdchardwaremanagement.v1alpha.Hardware hardware = 3 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    protected $hardware = null;

    /**
     * @param string                                               $parent     Required. The project and location to create hardware in.
     *                                                                         Format: `projects/{project}/locations/{location}`
     *                                                                         Please see {@see GDCHardwareManagementClient::locationName()} for help formatting this field.
     * @param \Google\Cloud\GdcHardwareManagement\V1alpha\Hardware $hardware   Required. The resource to create.
     * @param string                                               $hardwareId Optional. ID used to uniquely identify the Hardware within its parent
     *                                                                         scope. This field should contain at most 63 characters and must start with
     *                                                                         lowercase characters.
     *                                                                         Only lowercase characters, numbers and `-` are accepted.
     *                                                                         The `-` character cannot be the first or the last one.
     *                                                                         A system generated ID will be used if the field is not set.
     *
     *                                                                         The hardware.name field in the request will be ignored.
     *
     * @return \Google\Cloud\GdcHardwareManagement\V1alpha\CreateHardwareRequest
     *
     * @experimental
     */
    public static function build(string $parent, \Google\Cloud\GdcHardwareManagement\V1alpha\Hardware $hardware, string $hardwareId): self
    {
        return (new self())
            ->setParent($parent)
            ->setHardware($hardware)
            ->setHardwareId($hardwareId);
    }

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $parent
     *           Required. The project and location to create hardware in.
     *           Format: `projects/{project}/locations/{location}`
     *     @type string $hardware_id
     *           Optional. ID used to uniquely identify the Hardware within its parent
     *           scope. This field should contain at most 63 characters and must start with
     *           lowercase characters.
     *           Only lowercase characters, numbers and `-` are accepted.
     *           The `-` character cannot be the first or the last one.
     *           A system generated ID will be used if the field is not set.
     *           The hardware.name field in the request will be ignored.
     *     @type \Google\Cloud\GdcHardwareManagement\V1alpha\Hardware $hardware
     *           Required. The resource to create.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Google\Cloud\Gdchardwaremanagement\V1Alpha\Service::initOnce();
        parent::__construct($data);
    }

    /**
     * Required. The project and location to create hardware in.
     * Format: `projects/{project}/locations/{location}`
     *
     * Generated from protobuf field <code>string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {</code>
     * @return string
     */
    public function getParent()
    {
        return $this->parent;
    }

    /**
     * Required. The project and location to create hardware in.
     * Format: `projects/{project}/locations/{location}`
     *
     * Generated from protobuf field <code>string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {</code>
     * @param string $var
     * @return $this
     */
    public function setParent($var)
    {
        GPBUtil::checkString($var, True);
        $this->parent = $var;

        return $this;
    }

    /**
     * Optional. ID used to uniquely identify the Hardware within its parent
     * scope. This field should contain at most 63 characters and must start with
     * lowercase characters.
     * Only lowercase characters, numbers and `-` are accepted.
     * The `-` character cannot be the first or the last one.
     * A system generated ID will be used if the field is not set.
     * The hardware.name field in the request will be ignored.
     *
     * Generated from protobuf field <code>string hardware_id = 2 [(.google.api.field_behavior) = OPTIONAL];</code>
     * @return string
     */
    public function getHardwareId()
    {
        return $this->hardware_id;
    }

    /**
     * Optional. ID used to uniquely identify the Hardware within its parent
     * scope. This field should contain at most 63 characters and must start with
     * lowercase characters.
     * Only lowercase characters, numbers and `-` are accepted.
     * The `-` character cannot be the first or the last one.
     * A system generated ID will be used if the field is not set.
     * The hardware.name field in the request will be ignored.
     *
     * Generated from protobuf field <code>string hardware_id = 2 [(.google.api.field_behavior) = OPTIONAL];</code>
     * @param string $var
     * @return $this
     */
    public function setHardwareId($var)
    {
        GPBUtil::checkString($var, True);
        $this->hardware_id = $var;

        return $this;
    }

    /**
     * Required. The resource to create.
     *
     * Generated from protobuf field <code>.google.cloud.gdchardwaremanagement.v1alpha.Hardware hardware = 3 [(.google.api.field_behavior) = REQUIRED];</code>
     * @return \Google\Cloud\GdcHardwareManagement\V1alpha\Hardware|null
     */
    public function getHardware()
    {
        return $this->hardware;
    }

    public function hasHardware()
    {
        return isset($this->hardware);
    }

    public function clearHardware()
    {
        unset($this->hardware);
    }

    /**
     * Required. The resource to create.
     *
     * Generated from protobuf field <code>.google.cloud.gdchardwaremanagement.v1alpha.Hardware hardware = 3 [(.google.api.field_behavior) = REQUIRED];</code>
     * @param \Google\Cloud\GdcHardwareManagement\V1alpha\Hardware $var
     * @return $this
     */
    public function setHardware($var)
    {
        GPBUtil::checkMessage($var, \Google\Cloud\GdcHardwareManagement\V1alpha\Hardware::class);
        $this->hardware = $var;

        return $this;
    }

}

