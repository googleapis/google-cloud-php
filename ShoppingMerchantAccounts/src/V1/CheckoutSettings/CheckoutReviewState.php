<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/shopping/merchant/accounts/v1/checkoutsettings.proto

namespace Google\Shopping\Merchant\Accounts\V1\CheckoutSettings;

use UnexpectedValueException;

/**
 * Enum indicating the review state of merchant in `Checkout`
 * program.
 *
 * Protobuf type <code>google.shopping.merchant.accounts.v1.CheckoutSettings.CheckoutReviewState</code>
 */
class CheckoutReviewState
{
    /**
     * Default review state when review state is not specified.
     *
     * Generated from protobuf enum <code>CHECKOUT_REVIEW_STATE_UNSPECIFIED = 0;</code>
     */
    const CHECKOUT_REVIEW_STATE_UNSPECIFIED = 0;
    /**
     * Merchant provided URLs are being reviewed for data quality issues.
     *
     * Generated from protobuf enum <code>IN_REVIEW = 1;</code>
     */
    const IN_REVIEW = 1;
    /**
     * Merchant account has been approved. Indicates the data quality checks
     * have passed.
     *
     * Generated from protobuf enum <code>APPROVED = 2;</code>
     */
    const APPROVED = 2;
    /**
     * Merchant account has been disapproved due to data quality issues.
     *
     * Generated from protobuf enum <code>DISAPPROVED = 3;</code>
     */
    const DISAPPROVED = 3;

    private static $valueToName = [
        self::CHECKOUT_REVIEW_STATE_UNSPECIFIED => 'CHECKOUT_REVIEW_STATE_UNSPECIFIED',
        self::IN_REVIEW => 'IN_REVIEW',
        self::APPROVED => 'APPROVED',
        self::DISAPPROVED => 'DISAPPROVED',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}


