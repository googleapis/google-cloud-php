<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/shopping/merchant/accounts/v1beta/businessidentity.proto

namespace Google\Shopping\Merchant\Accounts\V1beta\BusinessIdentity;

use UnexpectedValueException;

/**
 * All possible settings regarding promotions related to the business
 * identity.
 *
 * Protobuf type <code>google.shopping.merchant.accounts.v1beta.BusinessIdentity.PromotionsConsent</code>
 */
class PromotionsConsent
{
    /**
     * Default value indicating that no selection was made.
     *
     * Generated from protobuf enum <code>PROMOTIONS_CONSENT_UNSPECIFIED = 0;</code>
     */
    const PROMOTIONS_CONSENT_UNSPECIFIED = 0;
    /**
     * Indicates that the account consented to having their business identity
     * used for promotions.
     *
     * Generated from protobuf enum <code>PROMOTIONS_CONSENT_GIVEN = 1;</code>
     */
    const PROMOTIONS_CONSENT_GIVEN = 1;
    /**
     * Indicates that the account did not consent to having their business
     * identity used for promotions.
     *
     * Generated from protobuf enum <code>PROMOTIONS_CONSENT_DENIED = 2;</code>
     */
    const PROMOTIONS_CONSENT_DENIED = 2;

    private static $valueToName = [
        self::PROMOTIONS_CONSENT_UNSPECIFIED => 'PROMOTIONS_CONSENT_UNSPECIFIED',
        self::PROMOTIONS_CONSENT_GIVEN => 'PROMOTIONS_CONSENT_GIVEN',
        self::PROMOTIONS_CONSENT_DENIED => 'PROMOTIONS_CONSENT_DENIED',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}


