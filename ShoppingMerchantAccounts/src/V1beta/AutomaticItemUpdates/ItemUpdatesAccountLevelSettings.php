<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/shopping/merchant/accounts/v1beta/automaticimprovements.proto

namespace Google\Shopping\Merchant\Accounts\V1beta\AutomaticItemUpdates;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Settings for the Automatic Item Updates.
 *
 * Generated from protobuf message <code>google.shopping.merchant.accounts.v1beta.AutomaticItemUpdates.ItemUpdatesAccountLevelSettings</code>
 */
class ItemUpdatesAccountLevelSettings extends \Google\Protobuf\Internal\Message
{
    /**
     * If price updates are enabled, Google always updates the active price with
     * the crawled information.
     *
     * Generated from protobuf field <code>optional bool allow_price_updates = 1;</code>
     */
    protected $allow_price_updates = null;
    /**
     * If availability updates are enabled, any previous availability values
     * get overwritten if Google finds an out-of-stock annotation on the offer's
     * page.
     * If additionally `allow_strict_availability_updates` field is set to
     * true, values get overwritten if Google finds an in-stock annotation on
     * the offer’s page.
     *
     * Generated from protobuf field <code>optional bool allow_availability_updates = 2;</code>
     */
    protected $allow_availability_updates = null;
    /**
     * If `allow_availability_updates` is enabled, items are automatically
     * updated in all your Shopping target countries. By default, availability
     * updates will only be applied to items that are 'out of stock' on your
     * website but 'in stock' on Shopping. Set this to true to also update items
     * that are 'in stock' on your website, but 'out of stock' on Google
     * Shopping. In order for this field to have an effect, you must also set
     * `allow_availability_updates`.
     *
     * Generated from protobuf field <code>optional bool allow_strict_availability_updates = 3;</code>
     */
    protected $allow_strict_availability_updates = null;
    /**
     * If condition updates are enabled, Google always updates item condition
     * with the condition detected from the details of your product.
     *
     * Generated from protobuf field <code>optional bool allow_condition_updates = 4;</code>
     */
    protected $allow_condition_updates = null;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type bool $allow_price_updates
     *           If price updates are enabled, Google always updates the active price with
     *           the crawled information.
     *     @type bool $allow_availability_updates
     *           If availability updates are enabled, any previous availability values
     *           get overwritten if Google finds an out-of-stock annotation on the offer's
     *           page.
     *           If additionally `allow_strict_availability_updates` field is set to
     *           true, values get overwritten if Google finds an in-stock annotation on
     *           the offer’s page.
     *     @type bool $allow_strict_availability_updates
     *           If `allow_availability_updates` is enabled, items are automatically
     *           updated in all your Shopping target countries. By default, availability
     *           updates will only be applied to items that are 'out of stock' on your
     *           website but 'in stock' on Shopping. Set this to true to also update items
     *           that are 'in stock' on your website, but 'out of stock' on Google
     *           Shopping. In order for this field to have an effect, you must also set
     *           `allow_availability_updates`.
     *     @type bool $allow_condition_updates
     *           If condition updates are enabled, Google always updates item condition
     *           with the condition detected from the details of your product.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Google\Shopping\Merchant\Accounts\V1Beta\Automaticimprovements::initOnce();
        parent::__construct($data);
    }

    /**
     * If price updates are enabled, Google always updates the active price with
     * the crawled information.
     *
     * Generated from protobuf field <code>optional bool allow_price_updates = 1;</code>
     * @return bool
     */
    public function getAllowPriceUpdates()
    {
        return isset($this->allow_price_updates) ? $this->allow_price_updates : false;
    }

    public function hasAllowPriceUpdates()
    {
        return isset($this->allow_price_updates);
    }

    public function clearAllowPriceUpdates()
    {
        unset($this->allow_price_updates);
    }

    /**
     * If price updates are enabled, Google always updates the active price with
     * the crawled information.
     *
     * Generated from protobuf field <code>optional bool allow_price_updates = 1;</code>
     * @param bool $var
     * @return $this
     */
    public function setAllowPriceUpdates($var)
    {
        GPBUtil::checkBool($var);
        $this->allow_price_updates = $var;

        return $this;
    }

    /**
     * If availability updates are enabled, any previous availability values
     * get overwritten if Google finds an out-of-stock annotation on the offer's
     * page.
     * If additionally `allow_strict_availability_updates` field is set to
     * true, values get overwritten if Google finds an in-stock annotation on
     * the offer’s page.
     *
     * Generated from protobuf field <code>optional bool allow_availability_updates = 2;</code>
     * @return bool
     */
    public function getAllowAvailabilityUpdates()
    {
        return isset($this->allow_availability_updates) ? $this->allow_availability_updates : false;
    }

    public function hasAllowAvailabilityUpdates()
    {
        return isset($this->allow_availability_updates);
    }

    public function clearAllowAvailabilityUpdates()
    {
        unset($this->allow_availability_updates);
    }

    /**
     * If availability updates are enabled, any previous availability values
     * get overwritten if Google finds an out-of-stock annotation on the offer's
     * page.
     * If additionally `allow_strict_availability_updates` field is set to
     * true, values get overwritten if Google finds an in-stock annotation on
     * the offer’s page.
     *
     * Generated from protobuf field <code>optional bool allow_availability_updates = 2;</code>
     * @param bool $var
     * @return $this
     */
    public function setAllowAvailabilityUpdates($var)
    {
        GPBUtil::checkBool($var);
        $this->allow_availability_updates = $var;

        return $this;
    }

    /**
     * If `allow_availability_updates` is enabled, items are automatically
     * updated in all your Shopping target countries. By default, availability
     * updates will only be applied to items that are 'out of stock' on your
     * website but 'in stock' on Shopping. Set this to true to also update items
     * that are 'in stock' on your website, but 'out of stock' on Google
     * Shopping. In order for this field to have an effect, you must also set
     * `allow_availability_updates`.
     *
     * Generated from protobuf field <code>optional bool allow_strict_availability_updates = 3;</code>
     * @return bool
     */
    public function getAllowStrictAvailabilityUpdates()
    {
        return isset($this->allow_strict_availability_updates) ? $this->allow_strict_availability_updates : false;
    }

    public function hasAllowStrictAvailabilityUpdates()
    {
        return isset($this->allow_strict_availability_updates);
    }

    public function clearAllowStrictAvailabilityUpdates()
    {
        unset($this->allow_strict_availability_updates);
    }

    /**
     * If `allow_availability_updates` is enabled, items are automatically
     * updated in all your Shopping target countries. By default, availability
     * updates will only be applied to items that are 'out of stock' on your
     * website but 'in stock' on Shopping. Set this to true to also update items
     * that are 'in stock' on your website, but 'out of stock' on Google
     * Shopping. In order for this field to have an effect, you must also set
     * `allow_availability_updates`.
     *
     * Generated from protobuf field <code>optional bool allow_strict_availability_updates = 3;</code>
     * @param bool $var
     * @return $this
     */
    public function setAllowStrictAvailabilityUpdates($var)
    {
        GPBUtil::checkBool($var);
        $this->allow_strict_availability_updates = $var;

        return $this;
    }

    /**
     * If condition updates are enabled, Google always updates item condition
     * with the condition detected from the details of your product.
     *
     * Generated from protobuf field <code>optional bool allow_condition_updates = 4;</code>
     * @return bool
     */
    public function getAllowConditionUpdates()
    {
        return isset($this->allow_condition_updates) ? $this->allow_condition_updates : false;
    }

    public function hasAllowConditionUpdates()
    {
        return isset($this->allow_condition_updates);
    }

    public function clearAllowConditionUpdates()
    {
        unset($this->allow_condition_updates);
    }

    /**
     * If condition updates are enabled, Google always updates item condition
     * with the condition detected from the details of your product.
     *
     * Generated from protobuf field <code>optional bool allow_condition_updates = 4;</code>
     * @param bool $var
     * @return $this
     */
    public function setAllowConditionUpdates($var)
    {
        GPBUtil::checkBool($var);
        $this->allow_condition_updates = $var;

        return $this;
    }

}


