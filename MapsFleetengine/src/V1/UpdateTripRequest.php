<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/maps/fleetengine/v1/trip_api.proto

namespace Maps\Fleetengine\V1;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * UpdateTrip request message.
 *
 * Generated from protobuf message <code>maps.fleetengine.v1.UpdateTripRequest</code>
 */
class UpdateTripRequest extends \Google\Protobuf\Internal\Message
{
    /**
     * The standard Fleet Engine request header.
     *
     * Generated from protobuf field <code>.maps.fleetengine.v1.RequestHeader header = 1;</code>
     */
    protected $header = null;
    /**
     * Required. Must be in the format
     * `providers/{provider}/trips/{trip}`. The provider must
     * be the Project ID (for example, `sample-consumer-project`) of the Google
     * Cloud Project of which the service account making this call is a member.
     *
     * Generated from protobuf field <code>string name = 3 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    protected $name = '';
    /**
     * Required. The Trip associated with the update.
     * The following fields are maintained by the Fleet Engine. Do not update
     * them using Trip.update.
     * * `current_route_segment`
     * * `current_route_segment_end_point`
     * * `current_route_segment_traffic`
     * * `current_route_segment_traffic_version`
     * * `current_route_segment_version`
     * * `dropoff_time`
     * * `eta_to_next_waypoint`
     * * `intermediate_destinations_version`
     * * `last_location`
     * * `name`
     * * `number_of_passengers`
     * * `pickup_time`
     * * `remaining_distance_meters`
     * * `remaining_time_to_first_waypoint`
     * * `remaining_waypoints`
     * * `remaining_waypoints_version`
     * * `route`
     * When you update the `Trip.vehicle_id` for a shared trip, you must supply
     * the list of `Trip.vehicle_waypoints` to specify the order of the remaining
     * waypoints, otherwise the order will be undetermined.
     * When you specify `Trip.vehicle_waypoints`, the list must contain all
     * the remaining waypoints of the vehicle's trips, with no extra waypoints.
     * You must order these waypoints such that for a given trip, the pickup
     * point is before intermediate destinations, and all intermediate
     * destinations come before the drop-off point. An `EXCLUSIVE` trip's
     * waypoints must not interleave with any other trips.
     * The `trip_id`, `waypoint_type` and `location` fields are used, and all
     * other TripWaypoint fields in `vehicle_waypoints` are ignored.
     * To avoid a race condition for trips with multiple destinations, you
     * should provide `Trip.intermediate_destinations_version` when updating
     * the trip status to `ENROUTE_TO_INTERMEDIATE_DESTINATION`. The
     * `Trip.intermediate_destinations_version` passed must be consistent with
     * Fleet Engine's version. If it isn't, the request fails.
     *
     * Generated from protobuf field <code>.maps.fleetengine.v1.Trip trip = 4 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    protected $trip = null;
    /**
     * Required. The field mask indicating which fields in Trip to update.
     * The `update_mask` must contain at least one field.
     *
     * Generated from protobuf field <code>.google.protobuf.FieldMask update_mask = 5 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    protected $update_mask = null;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type \Maps\Fleetengine\V1\RequestHeader $header
     *           The standard Fleet Engine request header.
     *     @type string $name
     *           Required. Must be in the format
     *           `providers/{provider}/trips/{trip}`. The provider must
     *           be the Project ID (for example, `sample-consumer-project`) of the Google
     *           Cloud Project of which the service account making this call is a member.
     *     @type \Maps\Fleetengine\V1\Trip $trip
     *           Required. The Trip associated with the update.
     *           The following fields are maintained by the Fleet Engine. Do not update
     *           them using Trip.update.
     *           * `current_route_segment`
     *           * `current_route_segment_end_point`
     *           * `current_route_segment_traffic`
     *           * `current_route_segment_traffic_version`
     *           * `current_route_segment_version`
     *           * `dropoff_time`
     *           * `eta_to_next_waypoint`
     *           * `intermediate_destinations_version`
     *           * `last_location`
     *           * `name`
     *           * `number_of_passengers`
     *           * `pickup_time`
     *           * `remaining_distance_meters`
     *           * `remaining_time_to_first_waypoint`
     *           * `remaining_waypoints`
     *           * `remaining_waypoints_version`
     *           * `route`
     *           When you update the `Trip.vehicle_id` for a shared trip, you must supply
     *           the list of `Trip.vehicle_waypoints` to specify the order of the remaining
     *           waypoints, otherwise the order will be undetermined.
     *           When you specify `Trip.vehicle_waypoints`, the list must contain all
     *           the remaining waypoints of the vehicle's trips, with no extra waypoints.
     *           You must order these waypoints such that for a given trip, the pickup
     *           point is before intermediate destinations, and all intermediate
     *           destinations come before the drop-off point. An `EXCLUSIVE` trip's
     *           waypoints must not interleave with any other trips.
     *           The `trip_id`, `waypoint_type` and `location` fields are used, and all
     *           other TripWaypoint fields in `vehicle_waypoints` are ignored.
     *           To avoid a race condition for trips with multiple destinations, you
     *           should provide `Trip.intermediate_destinations_version` when updating
     *           the trip status to `ENROUTE_TO_INTERMEDIATE_DESTINATION`. The
     *           `Trip.intermediate_destinations_version` passed must be consistent with
     *           Fleet Engine's version. If it isn't, the request fails.
     *     @type \Google\Protobuf\FieldMask $update_mask
     *           Required. The field mask indicating which fields in Trip to update.
     *           The `update_mask` must contain at least one field.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Google\Maps\Fleetengine\V1\TripApi::initOnce();
        parent::__construct($data);
    }

    /**
     * The standard Fleet Engine request header.
     *
     * Generated from protobuf field <code>.maps.fleetengine.v1.RequestHeader header = 1;</code>
     * @return \Maps\Fleetengine\V1\RequestHeader|null
     */
    public function getHeader()
    {
        return $this->header;
    }

    public function hasHeader()
    {
        return isset($this->header);
    }

    public function clearHeader()
    {
        unset($this->header);
    }

    /**
     * The standard Fleet Engine request header.
     *
     * Generated from protobuf field <code>.maps.fleetengine.v1.RequestHeader header = 1;</code>
     * @param \Maps\Fleetengine\V1\RequestHeader $var
     * @return $this
     */
    public function setHeader($var)
    {
        GPBUtil::checkMessage($var, \Maps\Fleetengine\V1\RequestHeader::class);
        $this->header = $var;

        return $this;
    }

    /**
     * Required. Must be in the format
     * `providers/{provider}/trips/{trip}`. The provider must
     * be the Project ID (for example, `sample-consumer-project`) of the Google
     * Cloud Project of which the service account making this call is a member.
     *
     * Generated from protobuf field <code>string name = 3 [(.google.api.field_behavior) = REQUIRED];</code>
     * @return string
     */
    public function getName()
    {
        return $this->name;
    }

    /**
     * Required. Must be in the format
     * `providers/{provider}/trips/{trip}`. The provider must
     * be the Project ID (for example, `sample-consumer-project`) of the Google
     * Cloud Project of which the service account making this call is a member.
     *
     * Generated from protobuf field <code>string name = 3 [(.google.api.field_behavior) = REQUIRED];</code>
     * @param string $var
     * @return $this
     */
    public function setName($var)
    {
        GPBUtil::checkString($var, True);
        $this->name = $var;

        return $this;
    }

    /**
     * Required. The Trip associated with the update.
     * The following fields are maintained by the Fleet Engine. Do not update
     * them using Trip.update.
     * * `current_route_segment`
     * * `current_route_segment_end_point`
     * * `current_route_segment_traffic`
     * * `current_route_segment_traffic_version`
     * * `current_route_segment_version`
     * * `dropoff_time`
     * * `eta_to_next_waypoint`
     * * `intermediate_destinations_version`
     * * `last_location`
     * * `name`
     * * `number_of_passengers`
     * * `pickup_time`
     * * `remaining_distance_meters`
     * * `remaining_time_to_first_waypoint`
     * * `remaining_waypoints`
     * * `remaining_waypoints_version`
     * * `route`
     * When you update the `Trip.vehicle_id` for a shared trip, you must supply
     * the list of `Trip.vehicle_waypoints` to specify the order of the remaining
     * waypoints, otherwise the order will be undetermined.
     * When you specify `Trip.vehicle_waypoints`, the list must contain all
     * the remaining waypoints of the vehicle's trips, with no extra waypoints.
     * You must order these waypoints such that for a given trip, the pickup
     * point is before intermediate destinations, and all intermediate
     * destinations come before the drop-off point. An `EXCLUSIVE` trip's
     * waypoints must not interleave with any other trips.
     * The `trip_id`, `waypoint_type` and `location` fields are used, and all
     * other TripWaypoint fields in `vehicle_waypoints` are ignored.
     * To avoid a race condition for trips with multiple destinations, you
     * should provide `Trip.intermediate_destinations_version` when updating
     * the trip status to `ENROUTE_TO_INTERMEDIATE_DESTINATION`. The
     * `Trip.intermediate_destinations_version` passed must be consistent with
     * Fleet Engine's version. If it isn't, the request fails.
     *
     * Generated from protobuf field <code>.maps.fleetengine.v1.Trip trip = 4 [(.google.api.field_behavior) = REQUIRED];</code>
     * @return \Maps\Fleetengine\V1\Trip|null
     */
    public function getTrip()
    {
        return $this->trip;
    }

    public function hasTrip()
    {
        return isset($this->trip);
    }

    public function clearTrip()
    {
        unset($this->trip);
    }

    /**
     * Required. The Trip associated with the update.
     * The following fields are maintained by the Fleet Engine. Do not update
     * them using Trip.update.
     * * `current_route_segment`
     * * `current_route_segment_end_point`
     * * `current_route_segment_traffic`
     * * `current_route_segment_traffic_version`
     * * `current_route_segment_version`
     * * `dropoff_time`
     * * `eta_to_next_waypoint`
     * * `intermediate_destinations_version`
     * * `last_location`
     * * `name`
     * * `number_of_passengers`
     * * `pickup_time`
     * * `remaining_distance_meters`
     * * `remaining_time_to_first_waypoint`
     * * `remaining_waypoints`
     * * `remaining_waypoints_version`
     * * `route`
     * When you update the `Trip.vehicle_id` for a shared trip, you must supply
     * the list of `Trip.vehicle_waypoints` to specify the order of the remaining
     * waypoints, otherwise the order will be undetermined.
     * When you specify `Trip.vehicle_waypoints`, the list must contain all
     * the remaining waypoints of the vehicle's trips, with no extra waypoints.
     * You must order these waypoints such that for a given trip, the pickup
     * point is before intermediate destinations, and all intermediate
     * destinations come before the drop-off point. An `EXCLUSIVE` trip's
     * waypoints must not interleave with any other trips.
     * The `trip_id`, `waypoint_type` and `location` fields are used, and all
     * other TripWaypoint fields in `vehicle_waypoints` are ignored.
     * To avoid a race condition for trips with multiple destinations, you
     * should provide `Trip.intermediate_destinations_version` when updating
     * the trip status to `ENROUTE_TO_INTERMEDIATE_DESTINATION`. The
     * `Trip.intermediate_destinations_version` passed must be consistent with
     * Fleet Engine's version. If it isn't, the request fails.
     *
     * Generated from protobuf field <code>.maps.fleetengine.v1.Trip trip = 4 [(.google.api.field_behavior) = REQUIRED];</code>
     * @param \Maps\Fleetengine\V1\Trip $var
     * @return $this
     */
    public function setTrip($var)
    {
        GPBUtil::checkMessage($var, \Maps\Fleetengine\V1\Trip::class);
        $this->trip = $var;

        return $this;
    }

    /**
     * Required. The field mask indicating which fields in Trip to update.
     * The `update_mask` must contain at least one field.
     *
     * Generated from protobuf field <code>.google.protobuf.FieldMask update_mask = 5 [(.google.api.field_behavior) = REQUIRED];</code>
     * @return \Google\Protobuf\FieldMask|null
     */
    public function getUpdateMask()
    {
        return $this->update_mask;
    }

    public function hasUpdateMask()
    {
        return isset($this->update_mask);
    }

    public function clearUpdateMask()
    {
        unset($this->update_mask);
    }

    /**
     * Required. The field mask indicating which fields in Trip to update.
     * The `update_mask` must contain at least one field.
     *
     * Generated from protobuf field <code>.google.protobuf.FieldMask update_mask = 5 [(.google.api.field_behavior) = REQUIRED];</code>
     * @param \Google\Protobuf\FieldMask $var
     * @return $this
     */
    public function setUpdateMask($var)
    {
        GPBUtil::checkMessage($var, \Google\Protobuf\FieldMask::class);
        $this->update_mask = $var;

        return $this;
    }

}

