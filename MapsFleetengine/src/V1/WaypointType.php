<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/maps/fleetengine/v1/fleetengine.proto

namespace Maps\Fleetengine\V1;

use UnexpectedValueException;

/**
 * The type of waypoint.
 *
 * Protobuf type <code>maps.fleetengine.v1.WaypointType</code>
 */
class WaypointType
{
    /**
     * Unknown or unspecified waypoint type.
     *
     * Generated from protobuf enum <code>UNKNOWN_WAYPOINT_TYPE = 0;</code>
     */
    const UNKNOWN_WAYPOINT_TYPE = 0;
    /**
     * Waypoints for picking up riders or items.
     *
     * Generated from protobuf enum <code>PICKUP_WAYPOINT_TYPE = 1;</code>
     */
    const PICKUP_WAYPOINT_TYPE = 1;
    /**
     * Waypoints for dropping off riders or items.
     *
     * Generated from protobuf enum <code>DROP_OFF_WAYPOINT_TYPE = 2;</code>
     */
    const DROP_OFF_WAYPOINT_TYPE = 2;
    /**
     * Waypoints for intermediate destinations in a multi-destination trip.
     *
     * Generated from protobuf enum <code>INTERMEDIATE_DESTINATION_WAYPOINT_TYPE = 3;</code>
     */
    const INTERMEDIATE_DESTINATION_WAYPOINT_TYPE = 3;

    private static $valueToName = [
        self::UNKNOWN_WAYPOINT_TYPE => 'UNKNOWN_WAYPOINT_TYPE',
        self::PICKUP_WAYPOINT_TYPE => 'PICKUP_WAYPOINT_TYPE',
        self::DROP_OFF_WAYPOINT_TYPE => 'DROP_OFF_WAYPOINT_TYPE',
        self::INTERMEDIATE_DESTINATION_WAYPOINT_TYPE => 'INTERMEDIATE_DESTINATION_WAYPOINT_TYPE',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

