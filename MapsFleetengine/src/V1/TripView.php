<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/maps/fleetengine/v1/trips.proto

namespace Maps\Fleetengine\V1;

use UnexpectedValueException;

/**
 * Selector for different sets of Trip fields in a `GetTrip` response.  See
 * [AIP-157](https://google.aip.dev/157) for context. Additional views are
 * likely to be added.
 *
 * Protobuf type <code>maps.fleetengine.v1.TripView</code>
 */
class TripView
{
    /**
     * The default value. For backwards-compatibility, the API will default to an
     * SDK view. To ensure stability and support, customers are
     * advised to select a `TripView` other than `SDK`.
     *
     * Generated from protobuf enum <code>TRIP_VIEW_UNSPECIFIED = 0;</code>
     */
    const TRIP_VIEW_UNSPECIFIED = 0;
    /**
     * Includes fields that may not be interpretable or supportable using
     * publicly available libraries.
     *
     * Generated from protobuf enum <code>SDK = 1;</code>
     */
    const SDK = 1;
    /**
     * Trip fields are populated for the Journey Sharing use case. This view is
     * intended for server-to-server communications.
     *
     * Generated from protobuf enum <code>JOURNEY_SHARING_V1S = 2;</code>
     */
    const JOURNEY_SHARING_V1S = 2;

    private static $valueToName = [
        self::TRIP_VIEW_UNSPECIFIED => 'TRIP_VIEW_UNSPECIFIED',
        self::SDK => 'SDK',
        self::JOURNEY_SHARING_V1S => 'JOURNEY_SHARING_V1S',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

