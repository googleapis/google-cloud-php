<?php
/*
 * Copyright 2023 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * GENERATED CODE WARNING
 * Generated by gapic-generator-php from the file
 * https://github.com/googleapis/googleapis/blob/master/google/maps/fleetengine/v1/trip_api.proto
 * Updates to the above are reflected here through a refresh process.
 */

namespace Maps\Fleetengine\V1\Gapic;

use Google\ApiCore\ApiException;
use Google\ApiCore\CredentialsWrapper;
use Google\ApiCore\GapicClientTrait;
use Google\ApiCore\PathTemplate;
use Google\ApiCore\RequestParamsHeaderDescriptor;
use Google\ApiCore\RetrySettings;
use Google\ApiCore\Transport\TransportInterface;
use Google\ApiCore\ValidationException;
use Google\Auth\FetchAuthTokenInterface;
use Google\Protobuf\Duration;
use Google\Protobuf\FieldMask;
use Google\Protobuf\GPBEmpty;
use Google\Protobuf\Timestamp;
use Maps\Fleetengine\V1\CreateTripRequest;
use Maps\Fleetengine\V1\GetTripRequest;
use Maps\Fleetengine\V1\ReportBillableTripRequest;
use Maps\Fleetengine\V1\RequestHeader;
use Maps\Fleetengine\V1\SearchTripsRequest;
use Maps\Fleetengine\V1\SearchTripsResponse;
use Maps\Fleetengine\V1\Trip;
use Maps\Fleetengine\V1\UpdateTripRequest;

/**
 * Service Description: Trip management service.
 *
 * This class provides the ability to make remote calls to the backing service through method
 * calls that map to API methods. Sample code to get started:
 *
 * ```
 * $tripServiceClient = new TripServiceClient();
 * try {
 *     $formattedParent = $tripServiceClient->tripName('[PROVIDER]', '[TRIP]');
 *     $tripId = 'trip_id';
 *     $trip = new Trip();
 *     $response = $tripServiceClient->createTrip($formattedParent, $tripId, $trip);
 * } finally {
 *     $tripServiceClient->close();
 * }
 * ```
 *
 * Many parameters require resource names to be formatted in a particular way. To
 * assist with these names, this class includes a format method for each type of
 * name, and additionally a parseName method to extract the individual identifiers
 * contained within formatted names that are returned by the API.
 */
class TripServiceGapicClient
{
    use GapicClientTrait;

    /** The name of the service. */
    const SERVICE_NAME = 'maps.fleetengine.v1.TripService';

    /** The default address of the service. */
    const SERVICE_ADDRESS = 'fleetengine.googleapis.com';

    /** The default port of the service. */
    const DEFAULT_SERVICE_PORT = 443;

    /** The name of the code generator, to be included in the agent header. */
    const CODEGEN_NAME = 'gapic';

    /** The default scopes required by the service. */
    public static $serviceScopes = [
        'https://www.googleapis.com/auth/cloud-platform',
    ];

    private static $tripNameTemplate;

    private static $pathTemplateMap;

    private static function getClientDefaults()
    {
        return [
            'serviceName' => self::SERVICE_NAME,
            'apiEndpoint' => self::SERVICE_ADDRESS . ':' . self::DEFAULT_SERVICE_PORT,
            'clientConfig' => __DIR__ . '/../resources/trip_service_client_config.json',
            'descriptorsConfigPath' => __DIR__ . '/../resources/trip_service_descriptor_config.php',
            'gcpApiConfigPath' => __DIR__ . '/../resources/trip_service_grpc_config.json',
            'credentialsConfig' => [
                'defaultScopes' => self::$serviceScopes,
            ],
            'transportConfig' => [
                'rest' => [
                    'restClientConfigPath' => __DIR__ . '/../resources/trip_service_rest_client_config.php',
                ],
            ],
        ];
    }

    private static function getTripNameTemplate()
    {
        if (self::$tripNameTemplate == null) {
            self::$tripNameTemplate = new PathTemplate('providers/{provider}/trips/{trip}');
        }

        return self::$tripNameTemplate;
    }

    private static function getPathTemplateMap()
    {
        if (self::$pathTemplateMap == null) {
            self::$pathTemplateMap = [
                'trip' => self::getTripNameTemplate(),
            ];
        }

        return self::$pathTemplateMap;
    }

    /**
     * Formats a string containing the fully-qualified path to represent a trip
     * resource.
     *
     * @param string $provider
     * @param string $trip
     *
     * @return string The formatted trip resource.
     */
    public static function tripName($provider, $trip)
    {
        return self::getTripNameTemplate()->render([
            'provider' => $provider,
            'trip' => $trip,
        ]);
    }

    /**
     * Parses a formatted name string and returns an associative array of the components in the name.
     * The following name formats are supported:
     * Template: Pattern
     * - trip: providers/{provider}/trips/{trip}
     *
     * The optional $template argument can be supplied to specify a particular pattern,
     * and must match one of the templates listed above. If no $template argument is
     * provided, or if the $template argument does not match one of the templates
     * listed, then parseName will check each of the supported templates, and return
     * the first match.
     *
     * @param string $formattedName The formatted name string
     * @param string $template      Optional name of template to match
     *
     * @return array An associative array from name component IDs to component values.
     *
     * @throws ValidationException If $formattedName could not be matched.
     */
    public static function parseName($formattedName, $template = null)
    {
        $templateMap = self::getPathTemplateMap();
        if ($template) {
            if (!isset($templateMap[$template])) {
                throw new ValidationException("Template name $template does not exist");
            }

            return $templateMap[$template]->match($formattedName);
        }

        foreach ($templateMap as $templateName => $pathTemplate) {
            try {
                return $pathTemplate->match($formattedName);
            } catch (ValidationException $ex) {
                // Swallow the exception to continue trying other path templates
            }
        }

        throw new ValidationException("Input did not match any known format. Input: $formattedName");
    }

    /**
     * Constructor.
     *
     * @param array $options {
     *     Optional. Options for configuring the service API wrapper.
     *
     *     @type string $apiEndpoint
     *           The address of the API remote host. May optionally include the port, formatted
     *           as "<uri>:<port>". Default 'fleetengine.googleapis.com:443'.
     *     @type string|array|FetchAuthTokenInterface|CredentialsWrapper $credentials
     *           The credentials to be used by the client to authorize API calls. This option
     *           accepts either a path to a credentials file, or a decoded credentials file as a
     *           PHP array.
     *           *Advanced usage*: In addition, this option can also accept a pre-constructed
     *           {@see \Google\Auth\FetchAuthTokenInterface} object or
     *           {@see \Google\ApiCore\CredentialsWrapper} object. Note that when one of these
     *           objects are provided, any settings in $credentialsConfig will be ignored.
     *     @type array $credentialsConfig
     *           Options used to configure credentials, including auth token caching, for the
     *           client. For a full list of supporting configuration options, see
     *           {@see \Google\ApiCore\CredentialsWrapper::build()} .
     *     @type bool $disableRetries
     *           Determines whether or not retries defined by the client configuration should be
     *           disabled. Defaults to `false`.
     *     @type string|array $clientConfig
     *           Client method configuration, including retry settings. This option can be either
     *           a path to a JSON file, or a PHP array containing the decoded JSON data. By
     *           default this settings points to the default client config file, which is
     *           provided in the resources folder.
     *     @type string|TransportInterface $transport
     *           The transport used for executing network requests. May be either the string
     *           `rest` or `grpc`. Defaults to `grpc` if gRPC support is detected on the system.
     *           *Advanced usage*: Additionally, it is possible to pass in an already
     *           instantiated {@see \Google\ApiCore\Transport\TransportInterface} object. Note
     *           that when this object is provided, any settings in $transportConfig, and any
     *           $apiEndpoint setting, will be ignored.
     *     @type array $transportConfig
     *           Configuration options that will be used to construct the transport. Options for
     *           each supported transport type should be passed in a key for that transport. For
     *           example:
     *           $transportConfig = [
     *               'grpc' => [...],
     *               'rest' => [...],
     *           ];
     *           See the {@see \Google\ApiCore\Transport\GrpcTransport::build()} and
     *           {@see \Google\ApiCore\Transport\RestTransport::build()} methods for the
     *           supported options.
     *     @type callable $clientCertSource
     *           A callable which returns the client cert as a string. This can be used to
     *           provide a certificate and private key to the transport layer for mTLS.
     * }
     *
     * @throws ValidationException
     */
    public function __construct(array $options = [])
    {
        $clientOptions = $this->buildClientOptions($options);
        $this->setClientOptions($clientOptions);
    }

    /**
     * Creates a trip in the Fleet Engine and returns the new trip.
     *
     * Sample code:
     * ```
     * $tripServiceClient = new TripServiceClient();
     * try {
     *     $formattedParent = $tripServiceClient->tripName('[PROVIDER]', '[TRIP]');
     *     $tripId = 'trip_id';
     *     $trip = new Trip();
     *     $response = $tripServiceClient->createTrip($formattedParent, $tripId, $trip);
     * } finally {
     *     $tripServiceClient->close();
     * }
     * ```
     *
     * @param string $parent       Required. Must be in the format `providers/{provider}`.
     *                             The provider must be the Project ID (for example, `sample-cloud-project`)
     *                             of the Google Cloud Project of which the service account making
     *                             this call is a member.
     * @param string $tripId       Required. Unique Trip ID.
     *                             Subject to the following restrictions:
     *
     *                             * Must be a valid Unicode string.
     *                             * Limited to a maximum length of 64 characters.
     *                             * Normalized according to [Unicode Normalization Form C]
     *                             (http://www.unicode.org/reports/tr15/).
     *                             * May not contain any of the following ASCII characters: '/', ':', '?',
     *                             ',', or '#'.
     * @param Trip   $trip         Required. Trip entity to create.
     *
     *                             When creating a Trip, the following fields are required:
     *
     *                             * `trip_type`
     *                             * `pickup_point`
     *
     *                             The following fields are used if you provide them:
     *
     *                             * `number_of_passengers`
     *                             * `vehicle_id`
     *                             * `dropoff_point`
     *                             * `intermediate_destinations`
     *                             * `vehicle_waypoints`
     *
     *                             All other Trip fields are ignored. For example, all trips start with a
     *                             `trip_status` of `NEW` even if you pass in a `trip_status` of `CANCELED` in
     *                             the creation request.
     *
     *                             Only `EXCLUSIVE` trips support `intermediate_destinations`.
     *
     *                             When `vehicle_id` is set for a shared trip, you must supply
     *                             the list of `Trip.vehicle_waypoints` to specify the order of the remaining
     *                             waypoints for the vehicle, otherwise the waypoint order will be
     *                             undetermined.
     *
     *                             When you specify `Trip.vehicle_waypoints`, the list must contain all
     *                             the remaining waypoints of the vehicle's trips, with no extra waypoints.
     *                             You must order these waypoints such that for a given trip, the pickup
     *                             point is before intermediate destinations, and all intermediate
     *                             destinations come before the drop-off point. An `EXCLUSIVE` trip's
     *                             waypoints must not interleave with any other trips.
     *
     *                             The `trip_id`, `waypoint_type` and `location` fields are used, and all
     *                             other TripWaypoint fields in `vehicle_waypoints` are ignored.
     * @param array  $optionalArgs {
     *     Optional.
     *
     *     @type RequestHeader $header
     *           The standard Fleet Engine request header.
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return \Maps\Fleetengine\V1\Trip
     *
     * @throws ApiException if the remote call fails
     */
    public function createTrip($parent, $tripId, $trip, array $optionalArgs = [])
    {
        $request = new CreateTripRequest();
        $requestParamHeaders = [];
        $request->setParent($parent);
        $request->setTripId($tripId);
        $request->setTrip($trip);
        $providerIdMatches = [];
        if (preg_match('/^(?<provider_id>providers\/[^\/]+)$/', $parent, $providerIdMatches)) {
            $requestParamHeaders['provider_id'] = $providerIdMatches['provider_id'];
        }

        if (isset($optionalArgs['header'])) {
            $request->setHeader($optionalArgs['header']);
        }

        $requestParams = new RequestParamsHeaderDescriptor($requestParamHeaders);
        $optionalArgs['headers'] = isset($optionalArgs['headers']) ? array_merge($requestParams->getHeader(), $optionalArgs['headers']) : $requestParams->getHeader();
        return $this->startCall('CreateTrip', Trip::class, $optionalArgs, $request)->wait();
    }

    /**
     * Get information about a single trip.
     *
     * Sample code:
     * ```
     * $tripServiceClient = new TripServiceClient();
     * try {
     *     $formattedName = $tripServiceClient->tripName('[PROVIDER]', '[TRIP]');
     *     $response = $tripServiceClient->getTrip($formattedName);
     * } finally {
     *     $tripServiceClient->close();
     * }
     * ```
     *
     * @param string $name         Required. Must be in the format `providers/{provider}/trips/{trip}`.
     *                             The provider must be the Project ID (for example, `sample-cloud-project`)
     *                             of the Google Cloud Project of which the service account making
     *                             this call is a member.
     * @param array  $optionalArgs {
     *     Optional.
     *
     *     @type RequestHeader $header
     *           The standard Fleet Engine request header.
     *     @type int $view
     *           The subset of Trip fields that should be returned and their interpretation.
     *           For allowed values, use constants defined on {@see \Maps\Fleetengine\V1\TripView}
     *     @type Timestamp $currentRouteSegmentVersion
     *           Indicates the minimum timestamp (exclusive) for which `Trip.route` or
     *           `Trip.current_route_segment` data are retrieved. If route data are
     *           unchanged since this timestamp, the route field is not set in the response.
     *           If a minimum is unspecified, the route data are always retrieved.
     *     @type Timestamp $remainingWaypointsVersion
     *           Indicates the minimum timestamp (exclusive) for which
     *           `Trip.remaining_waypoints` are retrieved. If they are unchanged since this
     *           timestamp, the `remaining_waypoints` are not set in the response. If this
     *           field is unspecified, `remaining_waypoints` is always retrieved.
     *     @type int $routeFormatType
     *           The returned current route format, `LAT_LNG_LIST_TYPE` (in `Trip.route`),
     *           or `ENCODED_POLYLINE_TYPE` (in `Trip.current_route_segment`). The default
     *           is `LAT_LNG_LIST_TYPE`.
     *           For allowed values, use constants defined on {@see \Maps\Fleetengine\V1\PolylineFormatType}
     *     @type Timestamp $currentRouteSegmentTrafficVersion
     *           Indicates the minimum timestamp (exclusive) for which
     *           `Trip.current_route_segment_traffic` is retrieved. If traffic data are
     *           unchanged since this timestamp, the `current_route_segment_traffic` field
     *           is not set in the response. If a minimum is unspecified, the traffic data
     *           are always retrieved. Note that traffic is only available for On-Demand
     *           Rides and Deliveries Solution customers.
     *     @type Timestamp $remainingWaypointsRouteVersion
     *           Indicates the minimum timestamp (exclusive) for which
     *           `Trip.remaining_waypoints.traffic_to_waypoint` and
     *           `Trip.remaining_waypoints.path_to_waypoint` data are retrieved. If data are
     *           unchanged since this timestamp, the fields above are
     *           not set in the response. If `remaining_waypoints_route_version` is
     *           unspecified, traffic and path are always retrieved.
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return \Maps\Fleetengine\V1\Trip
     *
     * @throws ApiException if the remote call fails
     */
    public function getTrip($name, array $optionalArgs = [])
    {
        $request = new GetTripRequest();
        $requestParamHeaders = [];
        $request->setName($name);
        $providerIdMatches = [];
        if (preg_match('/^(?<provider_id>providers\/[^\/]+)$/', $name, $providerIdMatches)) {
            $requestParamHeaders['provider_id'] = $providerIdMatches['provider_id'];
        }

        if (isset($optionalArgs['header'])) {
            $request->setHeader($optionalArgs['header']);
        }

        if (isset($optionalArgs['view'])) {
            $request->setView($optionalArgs['view']);
        }

        if (isset($optionalArgs['currentRouteSegmentVersion'])) {
            $request->setCurrentRouteSegmentVersion($optionalArgs['currentRouteSegmentVersion']);
        }

        if (isset($optionalArgs['remainingWaypointsVersion'])) {
            $request->setRemainingWaypointsVersion($optionalArgs['remainingWaypointsVersion']);
        }

        if (isset($optionalArgs['routeFormatType'])) {
            $request->setRouteFormatType($optionalArgs['routeFormatType']);
        }

        if (isset($optionalArgs['currentRouteSegmentTrafficVersion'])) {
            $request->setCurrentRouteSegmentTrafficVersion($optionalArgs['currentRouteSegmentTrafficVersion']);
        }

        if (isset($optionalArgs['remainingWaypointsRouteVersion'])) {
            $request->setRemainingWaypointsRouteVersion($optionalArgs['remainingWaypointsRouteVersion']);
        }

        $requestParams = new RequestParamsHeaderDescriptor($requestParamHeaders);
        $optionalArgs['headers'] = isset($optionalArgs['headers']) ? array_merge($requestParams->getHeader(), $optionalArgs['headers']) : $requestParams->getHeader();
        return $this->startCall('GetTrip', Trip::class, $optionalArgs, $request)->wait();
    }

    /**
     * Report billable trip usage.
     *
     * Sample code:
     * ```
     * $tripServiceClient = new TripServiceClient();
     * try {
     *     $name = 'name';
     *     $countryCode = 'country_code';
     *     $tripServiceClient->reportBillableTrip($name, $countryCode);
     * } finally {
     *     $tripServiceClient->close();
     * }
     * ```
     *
     * @param string $name         Required. Must be in the format
     *                             `providers/{provider}/billableTrips/{billable_trip}`. The
     *                             provider must be the Project ID (for example, `sample-cloud-project`) of
     *                             the Google Cloud Project of which the service account making this call is a
     *                             member.
     * @param string $countryCode  Required. Two letter country code of the country where the trip takes
     *                             place. Price is defined according to country code.
     * @param array  $optionalArgs {
     *     Optional.
     *
     *     @type int $platform
     *           The platform upon which the request was issued.
     *           For allowed values, use constants defined on {@see \Maps\Fleetengine\V1\BillingPlatformIdentifier}
     *     @type string[] $relatedIds
     *           The identifiers that are directly related to the trip being reported. These
     *           are usually IDs (for example, session IDs) of pre-booking operations done
     *           before the trip ID is available. The number of `related_ids` is
     *           limited to 50.
     *     @type int $solutionType
     *           The type of GMP product solution (for example,
     *           `ON_DEMAND_RIDESHARING_AND_DELIVERIES`) used for the reported trip.
     *           For allowed values, use constants defined on {@see \Maps\Fleetengine\V1\ReportBillableTripRequest\SolutionType}
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @throws ApiException if the remote call fails
     */
    public function reportBillableTrip($name, $countryCode, array $optionalArgs = [])
    {
        $request = new ReportBillableTripRequest();
        $requestParamHeaders = [];
        $request->setName($name);
        $request->setCountryCode($countryCode);
        $providerIdMatches = [];
        if (preg_match('/^(?<provider_id>providers\/[^\/]+)$/', $name, $providerIdMatches)) {
            $requestParamHeaders['provider_id'] = $providerIdMatches['provider_id'];
        }

        if (isset($optionalArgs['platform'])) {
            $request->setPlatform($optionalArgs['platform']);
        }

        if (isset($optionalArgs['relatedIds'])) {
            $request->setRelatedIds($optionalArgs['relatedIds']);
        }

        if (isset($optionalArgs['solutionType'])) {
            $request->setSolutionType($optionalArgs['solutionType']);
        }

        $requestParams = new RequestParamsHeaderDescriptor($requestParamHeaders);
        $optionalArgs['headers'] = isset($optionalArgs['headers']) ? array_merge($requestParams->getHeader(), $optionalArgs['headers']) : $requestParams->getHeader();
        return $this->startCall('ReportBillableTrip', GPBEmpty::class, $optionalArgs, $request)->wait();
    }

    /**
     * Get all the trips for a specific vehicle.
     *
     * Sample code:
     * ```
     * $tripServiceClient = new TripServiceClient();
     * try {
     *     $parent = 'parent';
     *     // Iterate over pages of elements
     *     $pagedResponse = $tripServiceClient->searchTrips($parent);
     *     foreach ($pagedResponse->iteratePages() as $page) {
     *         foreach ($page as $element) {
     *             // doSomethingWith($element);
     *         }
     *     }
     *     // Alternatively:
     *     // Iterate through all elements
     *     $pagedResponse = $tripServiceClient->searchTrips($parent);
     *     foreach ($pagedResponse->iterateAllElements() as $element) {
     *         // doSomethingWith($element);
     *     }
     * } finally {
     *     $tripServiceClient->close();
     * }
     * ```
     *
     * @param string $parent       Required. Must be in the format `providers/{provider}`.
     *                             The provider must be the Project ID (for example, `sample-cloud-project`)
     *                             of the Google Cloud Project of which the service account making
     *                             this call is a member.
     * @param array  $optionalArgs {
     *     Optional.
     *
     *     @type RequestHeader $header
     *           The standard Fleet Engine request header.
     *     @type string $vehicleId
     *           The vehicle associated with the trips in the request. If unspecified, the
     *           returned trips do not contain:
     *
     *           * `current_route_segment`
     *           * `remaining_waypoints`
     *           * `remaining_distance_meters`
     *           * `eta_to_first_waypoint`
     *     @type bool $activeTripsOnly
     *           If set to true, the response includes Trips that influence a driver's
     *           route.
     *     @type int $pageSize
     *           The maximum number of resources contained in the underlying API
     *           response. The API may return fewer values in a page, even if
     *           there are additional values to be retrieved.
     *     @type string $pageToken
     *           A page token is used to specify a page of values to be returned.
     *           If no page token is specified (the default), the first page
     *           of values will be returned. Any page token used here must have
     *           been generated by a previous call to the API.
     *     @type Duration $minimumStaleness
     *           If specified, returns the trips that have not been updated after the time
     *           `(current - minimum_staleness)`.
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return \Google\ApiCore\PagedListResponse
     *
     * @throws ApiException if the remote call fails
     */
    public function searchTrips($parent, array $optionalArgs = [])
    {
        $request = new SearchTripsRequest();
        $requestParamHeaders = [];
        $request->setParent($parent);
        $providerIdMatches = [];
        if (preg_match('/^(?<provider_id>providers\/[^\/]+)$/', $parent, $providerIdMatches)) {
            $requestParamHeaders['provider_id'] = $providerIdMatches['provider_id'];
        }

        if (isset($optionalArgs['header'])) {
            $request->setHeader($optionalArgs['header']);
        }

        if (isset($optionalArgs['vehicleId'])) {
            $request->setVehicleId($optionalArgs['vehicleId']);
        }

        if (isset($optionalArgs['activeTripsOnly'])) {
            $request->setActiveTripsOnly($optionalArgs['activeTripsOnly']);
        }

        if (isset($optionalArgs['pageSize'])) {
            $request->setPageSize($optionalArgs['pageSize']);
        }

        if (isset($optionalArgs['pageToken'])) {
            $request->setPageToken($optionalArgs['pageToken']);
        }

        if (isset($optionalArgs['minimumStaleness'])) {
            $request->setMinimumStaleness($optionalArgs['minimumStaleness']);
        }

        $requestParams = new RequestParamsHeaderDescriptor($requestParamHeaders);
        $optionalArgs['headers'] = isset($optionalArgs['headers']) ? array_merge($requestParams->getHeader(), $optionalArgs['headers']) : $requestParams->getHeader();
        return $this->getPagedListResponse('SearchTrips', $optionalArgs, SearchTripsResponse::class, $request);
    }

    /**
     * Updates trip data.
     *
     * Sample code:
     * ```
     * $tripServiceClient = new TripServiceClient();
     * try {
     *     $name = 'name';
     *     $trip = new Trip();
     *     $updateMask = new FieldMask();
     *     $response = $tripServiceClient->updateTrip($name, $trip, $updateMask);
     * } finally {
     *     $tripServiceClient->close();
     * }
     * ```
     *
     * @param string    $name         Required. Must be in the format
     *                                `providers/{provider}/trips/{trip}`. The provider must
     *                                be the Project ID (for example, `sample-consumer-project`) of the Google
     *                                Cloud Project of which the service account making this call is a member.
     * @param Trip      $trip         Required. The Trip associated with the update.
     *
     *                                The following fields are maintained by the Fleet Engine. Do not update
     *                                them using Trip.update.
     *
     *                                * `current_route_segment`
     *                                * `current_route_segment_end_point`
     *                                * `current_route_segment_traffic`
     *                                * `current_route_segment_traffic_version`
     *                                * `current_route_segment_version`
     *                                * `dropoff_time`
     *                                * `eta_to_next_waypoint`
     *                                * `intermediate_destinations_version`
     *                                * `last_location`
     *                                * `name`
     *                                * `number_of_passengers`
     *                                * `pickup_time`
     *                                * `remaining_distance_meters`
     *                                * `remaining_time_to_first_waypoint`
     *                                * `remaining_waypoints`
     *                                * `remaining_waypoints_version`
     *                                * `route`
     *
     *                                When you update the `Trip.vehicle_id` for a shared trip, you must supply
     *                                the list of `Trip.vehicle_waypoints` to specify the order of the remaining
     *                                waypoints, otherwise the order will be undetermined.
     *
     *                                When you specify `Trip.vehicle_waypoints`, the list must contain all
     *                                the remaining waypoints of the vehicle's trips, with no extra waypoints.
     *                                You must order these waypoints such that for a given trip, the pickup
     *                                point is before intermediate destinations, and all intermediate
     *                                destinations come before the drop-off point. An `EXCLUSIVE` trip's
     *                                waypoints must not interleave with any other trips.
     *                                The `trip_id`, `waypoint_type` and `location` fields are used, and all
     *                                other TripWaypoint fields in `vehicle_waypoints` are ignored.
     *
     *                                To avoid a race condition for trips with multiple destinations, you
     *                                should provide `Trip.intermediate_destinations_version` when updating
     *                                the trip status to `ENROUTE_TO_INTERMEDIATE_DESTINATION`. The
     *                                `Trip.intermediate_destinations_version` passed must be consistent with
     *                                Fleet Engine's version. If it isn't, the request fails.
     * @param FieldMask $updateMask   Required. The field mask indicating which fields in Trip to update.
     *                                The `update_mask` must contain at least one field.
     * @param array     $optionalArgs {
     *     Optional.
     *
     *     @type RequestHeader $header
     *           The standard Fleet Engine request header.
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return \Maps\Fleetengine\V1\Trip
     *
     * @throws ApiException if the remote call fails
     */
    public function updateTrip($name, $trip, $updateMask, array $optionalArgs = [])
    {
        $request = new UpdateTripRequest();
        $requestParamHeaders = [];
        $request->setName($name);
        $request->setTrip($trip);
        $request->setUpdateMask($updateMask);
        $providerIdMatches = [];
        if (preg_match('/^(?<provider_id>providers\/[^\/]+)$/', $name, $providerIdMatches)) {
            $requestParamHeaders['provider_id'] = $providerIdMatches['provider_id'];
        }

        if (isset($optionalArgs['header'])) {
            $request->setHeader($optionalArgs['header']);
        }

        $requestParams = new RequestParamsHeaderDescriptor($requestParamHeaders);
        $optionalArgs['headers'] = isset($optionalArgs['headers']) ? array_merge($requestParams->getHeader(), $optionalArgs['headers']) : $requestParams->getHeader();
        return $this->startCall('UpdateTrip', Trip::class, $optionalArgs, $request)->wait();
    }
}
