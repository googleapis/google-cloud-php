<?php
/*
 * Copyright 2023 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * GENERATED CODE WARNING
 * Generated by gapic-generator-php from the file
 * https://github.com/googleapis/googleapis/blob/master/google/maps/fleetengine/delivery/v1/delivery_api.proto
 * Updates to the above are reflected here through a refresh process.
 */

namespace Maps\Fleetengine\Delivery\V1\Gapic;

use Google\ApiCore\ApiException;
use Google\ApiCore\CredentialsWrapper;
use Google\ApiCore\GapicClientTrait;
use Google\ApiCore\PathTemplate;
use Google\ApiCore\RequestParamsHeaderDescriptor;
use Google\ApiCore\RetrySettings;
use Google\ApiCore\Transport\TransportInterface;
use Google\ApiCore\ValidationException;
use Google\Auth\FetchAuthTokenInterface;
use Google\Geo\Type\Viewport;
use Google\Protobuf\FieldMask;
use Maps\Fleetengine\Delivery\V1\BatchCreateTasksRequest;
use Maps\Fleetengine\Delivery\V1\BatchCreateTasksResponse;
use Maps\Fleetengine\Delivery\V1\CreateDeliveryVehicleRequest;
use Maps\Fleetengine\Delivery\V1\CreateTaskRequest;
use Maps\Fleetengine\Delivery\V1\DeliveryRequestHeader;
use Maps\Fleetengine\Delivery\V1\DeliveryVehicle;
use Maps\Fleetengine\Delivery\V1\GetDeliveryVehicleRequest;
use Maps\Fleetengine\Delivery\V1\GetTaskRequest;
use Maps\Fleetengine\Delivery\V1\GetTaskTrackingInfoRequest;
use Maps\Fleetengine\Delivery\V1\ListDeliveryVehiclesRequest;
use Maps\Fleetengine\Delivery\V1\ListDeliveryVehiclesResponse;
use Maps\Fleetengine\Delivery\V1\ListTasksRequest;
use Maps\Fleetengine\Delivery\V1\ListTasksResponse;
use Maps\Fleetengine\Delivery\V1\SearchTasksRequest;
use Maps\Fleetengine\Delivery\V1\SearchTasksResponse;
use Maps\Fleetengine\Delivery\V1\Task;
use Maps\Fleetengine\Delivery\V1\TaskTrackingInfo;
use Maps\Fleetengine\Delivery\V1\UpdateDeliveryVehicleRequest;
use Maps\Fleetengine\Delivery\V1\UpdateTaskRequest;

/**
 * Service Description: The Last Mile Delivery service.
 *
 * This class provides the ability to make remote calls to the backing service through method
 * calls that map to API methods. Sample code to get started:
 *
 * ```
 * $deliveryServiceClient = new DeliveryServiceClient();
 * try {
 *     $formattedParent = $deliveryServiceClient->providerName('[PROVIDER]');
 *     $requests = [];
 *     $response = $deliveryServiceClient->batchCreateTasks($formattedParent, $requests);
 * } finally {
 *     $deliveryServiceClient->close();
 * }
 * ```
 *
 * Many parameters require resource names to be formatted in a particular way. To
 * assist with these names, this class includes a format method for each type of
 * name, and additionally a parseName method to extract the individual identifiers
 * contained within formatted names that are returned by the API.
 */
class DeliveryServiceGapicClient
{
    use GapicClientTrait;

    /** The name of the service. */
    const SERVICE_NAME = 'maps.fleetengine.delivery.v1.DeliveryService';

    /** The default address of the service. */
    const SERVICE_ADDRESS = 'fleetengine.googleapis.com';

    /** The default port of the service. */
    const DEFAULT_SERVICE_PORT = 443;

    /** The name of the code generator, to be included in the agent header. */
    const CODEGEN_NAME = 'gapic';

    /** The default scopes required by the service. */
    public static $serviceScopes = [
        'https://www.googleapis.com/auth/cloud-platform',
    ];

    private static $deliveryVehicleNameTemplate;

    private static $providerNameTemplate;

    private static $taskNameTemplate;

    private static $taskTrackingInfoNameTemplate;

    private static $pathTemplateMap;

    private static function getClientDefaults()
    {
        return [
            'serviceName' => self::SERVICE_NAME,
            'apiEndpoint' => self::SERVICE_ADDRESS . ':' . self::DEFAULT_SERVICE_PORT,
            'clientConfig' => __DIR__ . '/../resources/delivery_service_client_config.json',
            'descriptorsConfigPath' => __DIR__ . '/../resources/delivery_service_descriptor_config.php',
            'gcpApiConfigPath' => __DIR__ . '/../resources/delivery_service_grpc_config.json',
            'credentialsConfig' => [
                'defaultScopes' => self::$serviceScopes,
            ],
            'transportConfig' => [
                'rest' => [
                    'restClientConfigPath' => __DIR__ . '/../resources/delivery_service_rest_client_config.php',
                ],
            ],
        ];
    }

    private static function getDeliveryVehicleNameTemplate()
    {
        if (self::$deliveryVehicleNameTemplate == null) {
            self::$deliveryVehicleNameTemplate = new PathTemplate('providers/{provider}/deliveryVehicles/{vehicle}');
        }

        return self::$deliveryVehicleNameTemplate;
    }

    private static function getProviderNameTemplate()
    {
        if (self::$providerNameTemplate == null) {
            self::$providerNameTemplate = new PathTemplate('providers/{provider}');
        }

        return self::$providerNameTemplate;
    }

    private static function getTaskNameTemplate()
    {
        if (self::$taskNameTemplate == null) {
            self::$taskNameTemplate = new PathTemplate('providers/{provider}/tasks/{task}');
        }

        return self::$taskNameTemplate;
    }

    private static function getTaskTrackingInfoNameTemplate()
    {
        if (self::$taskTrackingInfoNameTemplate == null) {
            self::$taskTrackingInfoNameTemplate = new PathTemplate('providers/{provider}/taskTrackingInfo/{tracking}');
        }

        return self::$taskTrackingInfoNameTemplate;
    }

    private static function getPathTemplateMap()
    {
        if (self::$pathTemplateMap == null) {
            self::$pathTemplateMap = [
                'deliveryVehicle' => self::getDeliveryVehicleNameTemplate(),
                'provider' => self::getProviderNameTemplate(),
                'task' => self::getTaskNameTemplate(),
                'taskTrackingInfo' => self::getTaskTrackingInfoNameTemplate(),
            ];
        }

        return self::$pathTemplateMap;
    }

    /**
     * Formats a string containing the fully-qualified path to represent a
     * delivery_vehicle resource.
     *
     * @param string $provider
     * @param string $vehicle
     *
     * @return string The formatted delivery_vehicle resource.
     */
    public static function deliveryVehicleName($provider, $vehicle)
    {
        return self::getDeliveryVehicleNameTemplate()->render([
            'provider' => $provider,
            'vehicle' => $vehicle,
        ]);
    }

    /**
     * Formats a string containing the fully-qualified path to represent a provider
     * resource.
     *
     * @param string $provider
     *
     * @return string The formatted provider resource.
     */
    public static function providerName($provider)
    {
        return self::getProviderNameTemplate()->render([
            'provider' => $provider,
        ]);
    }

    /**
     * Formats a string containing the fully-qualified path to represent a task
     * resource.
     *
     * @param string $provider
     * @param string $task
     *
     * @return string The formatted task resource.
     */
    public static function taskName($provider, $task)
    {
        return self::getTaskNameTemplate()->render([
            'provider' => $provider,
            'task' => $task,
        ]);
    }

    /**
     * Formats a string containing the fully-qualified path to represent a
     * task_tracking_info resource.
     *
     * @param string $provider
     * @param string $tracking
     *
     * @return string The formatted task_tracking_info resource.
     */
    public static function taskTrackingInfoName($provider, $tracking)
    {
        return self::getTaskTrackingInfoNameTemplate()->render([
            'provider' => $provider,
            'tracking' => $tracking,
        ]);
    }

    /**
     * Parses a formatted name string and returns an associative array of the components in the name.
     * The following name formats are supported:
     * Template: Pattern
     * - deliveryVehicle: providers/{provider}/deliveryVehicles/{vehicle}
     * - provider: providers/{provider}
     * - task: providers/{provider}/tasks/{task}
     * - taskTrackingInfo: providers/{provider}/taskTrackingInfo/{tracking}
     *
     * The optional $template argument can be supplied to specify a particular pattern,
     * and must match one of the templates listed above. If no $template argument is
     * provided, or if the $template argument does not match one of the templates
     * listed, then parseName will check each of the supported templates, and return
     * the first match.
     *
     * @param string $formattedName The formatted name string
     * @param string $template      Optional name of template to match
     *
     * @return array An associative array from name component IDs to component values.
     *
     * @throws ValidationException If $formattedName could not be matched.
     */
    public static function parseName($formattedName, $template = null)
    {
        $templateMap = self::getPathTemplateMap();
        if ($template) {
            if (!isset($templateMap[$template])) {
                throw new ValidationException("Template name $template does not exist");
            }

            return $templateMap[$template]->match($formattedName);
        }

        foreach ($templateMap as $templateName => $pathTemplate) {
            try {
                return $pathTemplate->match($formattedName);
            } catch (ValidationException $ex) {
                // Swallow the exception to continue trying other path templates
            }
        }

        throw new ValidationException("Input did not match any known format. Input: $formattedName");
    }

    /**
     * Constructor.
     *
     * @param array $options {
     *     Optional. Options for configuring the service API wrapper.
     *
     *     @type string $apiEndpoint
     *           The address of the API remote host. May optionally include the port, formatted
     *           as "<uri>:<port>". Default 'fleetengine.googleapis.com:443'.
     *     @type string|array|FetchAuthTokenInterface|CredentialsWrapper $credentials
     *           The credentials to be used by the client to authorize API calls. This option
     *           accepts either a path to a credentials file, or a decoded credentials file as a
     *           PHP array.
     *           *Advanced usage*: In addition, this option can also accept a pre-constructed
     *           {@see \Google\Auth\FetchAuthTokenInterface} object or
     *           {@see \Google\ApiCore\CredentialsWrapper} object. Note that when one of these
     *           objects are provided, any settings in $credentialsConfig will be ignored.
     *     @type array $credentialsConfig
     *           Options used to configure credentials, including auth token caching, for the
     *           client. For a full list of supporting configuration options, see
     *           {@see \Google\ApiCore\CredentialsWrapper::build()} .
     *     @type bool $disableRetries
     *           Determines whether or not retries defined by the client configuration should be
     *           disabled. Defaults to `false`.
     *     @type string|array $clientConfig
     *           Client method configuration, including retry settings. This option can be either
     *           a path to a JSON file, or a PHP array containing the decoded JSON data. By
     *           default this settings points to the default client config file, which is
     *           provided in the resources folder.
     *     @type string|TransportInterface $transport
     *           The transport used for executing network requests. May be either the string
     *           `rest` or `grpc`. Defaults to `grpc` if gRPC support is detected on the system.
     *           *Advanced usage*: Additionally, it is possible to pass in an already
     *           instantiated {@see \Google\ApiCore\Transport\TransportInterface} object. Note
     *           that when this object is provided, any settings in $transportConfig, and any
     *           $apiEndpoint setting, will be ignored.
     *     @type array $transportConfig
     *           Configuration options that will be used to construct the transport. Options for
     *           each supported transport type should be passed in a key for that transport. For
     *           example:
     *           $transportConfig = [
     *               'grpc' => [...],
     *               'rest' => [...],
     *           ];
     *           See the {@see \Google\ApiCore\Transport\GrpcTransport::build()} and
     *           {@see \Google\ApiCore\Transport\RestTransport::build()} methods for the
     *           supported options.
     *     @type callable $clientCertSource
     *           A callable which returns the client cert as a string. This can be used to
     *           provide a certificate and private key to the transport layer for mTLS.
     * }
     *
     * @throws ValidationException
     */
    public function __construct(array $options = [])
    {
        $clientOptions = $this->buildClientOptions($options);
        $this->setClientOptions($clientOptions);
    }

    /**
     * Creates and returns a batch of new `Task` objects.
     *
     * Sample code:
     * ```
     * $deliveryServiceClient = new DeliveryServiceClient();
     * try {
     *     $formattedParent = $deliveryServiceClient->providerName('[PROVIDER]');
     *     $requests = [];
     *     $response = $deliveryServiceClient->batchCreateTasks($formattedParent, $requests);
     * } finally {
     *     $deliveryServiceClient->close();
     * }
     * ```
     *
     * @param string              $parent       Required. The parent resource shared by all tasks. This value must be in
     *                                          the format `providers/{provider}`. The `provider` must be the Google Cloud
     *                                          Project ID. For example, `sample-cloud-project`. The parent field in the
     *                                          `CreateTaskRequest` messages must either  be empty, or it must match this
     *                                          field.
     * @param CreateTaskRequest[] $requests     Required. The request message that specifies the resources to create.
     *                                          Note: You can create a maximum of 500 tasks in a batch.
     * @param array               $optionalArgs {
     *     Optional.
     *
     *     @type DeliveryRequestHeader $header
     *           Optional. The standard Delivery API request header.
     *           Note: If you set this field, then the header field in the
     *           `CreateTaskRequest` messages must either be empty, or it must match this
     *           field.
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return \Maps\Fleetengine\Delivery\V1\BatchCreateTasksResponse
     *
     * @throws ApiException if the remote call fails
     */
    public function batchCreateTasks($parent, $requests, array $optionalArgs = [])
    {
        $request = new BatchCreateTasksRequest();
        $requestParamHeaders = [];
        $request->setParent($parent);
        $request->setRequests($requests);
        $providerIdMatches = [];
        if (preg_match('/^(?<provider_id>providers\/[^\/]+)$/', $parent, $providerIdMatches)) {
            $requestParamHeaders['provider_id'] = $providerIdMatches['provider_id'];
        }

        if (isset($optionalArgs['header'])) {
            $request->setHeader($optionalArgs['header']);
        }

        $requestParams = new RequestParamsHeaderDescriptor($requestParamHeaders);
        $optionalArgs['headers'] = isset($optionalArgs['headers']) ? array_merge($requestParams->getHeader(), $optionalArgs['headers']) : $requestParams->getHeader();
        return $this->startCall('BatchCreateTasks', BatchCreateTasksResponse::class, $optionalArgs, $request)->wait();
    }

    /**
     * Creates and returns a new `DeliveryVehicle`.
     *
     * Sample code:
     * ```
     * $deliveryServiceClient = new DeliveryServiceClient();
     * try {
     *     $parent = 'parent';
     *     $deliveryVehicleId = 'delivery_vehicle_id';
     *     $deliveryVehicle = new DeliveryVehicle();
     *     $response = $deliveryServiceClient->createDeliveryVehicle($parent, $deliveryVehicleId, $deliveryVehicle);
     * } finally {
     *     $deliveryServiceClient->close();
     * }
     * ```
     *
     * @param string          $parent            Required. Must be in the format `providers/{provider}`. The provider must
     *                                           be the Google Cloud Project ID. For example, `sample-cloud-project`.
     * @param string          $deliveryVehicleId Required. The Delivery Vehicle ID must be unique and subject to the
     *                                           following restrictions:
     *
     *                                           * Must be a valid Unicode string.
     *                                           * Limited to a maximum length of 64 characters.
     *                                           * Normalized according to [Unicode Normalization Form C]
     *                                           (http://www.unicode.org/reports/tr15/).
     *                                           * May not contain any of the following ASCII characters: '/', ':', '?',
     *                                           ',', or '#'.
     * @param DeliveryVehicle $deliveryVehicle   Required. The `DeliveryVehicle` entity to create. When creating a new
     *                                           delivery vehicle, you may set the following optional fields:
     *
     *                                           * last_location
     *                                           * attributes
     *
     *                                           Note: The DeliveryVehicle's `name` field is ignored. All other
     *                                           DeliveryVehicle fields must not be set; otherwise, an error is returned.
     * @param array           $optionalArgs      {
     *     Optional.
     *
     *     @type DeliveryRequestHeader $header
     *           Optional. The standard Delivery API request header.
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return \Maps\Fleetengine\Delivery\V1\DeliveryVehicle
     *
     * @throws ApiException if the remote call fails
     */
    public function createDeliveryVehicle($parent, $deliveryVehicleId, $deliveryVehicle, array $optionalArgs = [])
    {
        $request = new CreateDeliveryVehicleRequest();
        $requestParamHeaders = [];
        $request->setParent($parent);
        $request->setDeliveryVehicleId($deliveryVehicleId);
        $request->setDeliveryVehicle($deliveryVehicle);
        $providerIdMatches = [];
        if (preg_match('/^(?<provider_id>providers\/[^\/]+)$/', $parent, $providerIdMatches)) {
            $requestParamHeaders['provider_id'] = $providerIdMatches['provider_id'];
        }

        if (isset($optionalArgs['header'])) {
            $request->setHeader($optionalArgs['header']);
        }

        $requestParams = new RequestParamsHeaderDescriptor($requestParamHeaders);
        $optionalArgs['headers'] = isset($optionalArgs['headers']) ? array_merge($requestParams->getHeader(), $optionalArgs['headers']) : $requestParams->getHeader();
        return $this->startCall('CreateDeliveryVehicle', DeliveryVehicle::class, $optionalArgs, $request)->wait();
    }

    /**
     * Creates and returns a new `Task` object.
     *
     * Sample code:
     * ```
     * $deliveryServiceClient = new DeliveryServiceClient();
     * try {
     *     $parent = 'parent';
     *     $taskId = 'task_id';
     *     $task = new Task();
     *     $response = $deliveryServiceClient->createTask($parent, $taskId, $task);
     * } finally {
     *     $deliveryServiceClient->close();
     * }
     * ```
     *
     * @param string $parent       Required. Must be in the format `providers/{provider}`. The `provider` must
     *                             be the Google Cloud Project ID. For example, `sample-cloud-project`.
     * @param string $taskId       Required. The Task ID must be unique, but it should be not a shipment
     *                             tracking ID. To store a shipment tracking ID, use the `tracking_id` field.
     *                             Note that multiple tasks can have the same `tracking_id`. Task IDs are
     *                             subject to the following restrictions:
     *
     *                             * Must be a valid Unicode string.
     *                             * Limited to a maximum length of 64 characters.
     *                             * Normalized according to [Unicode Normalization Form C]
     *                             (http://www.unicode.org/reports/tr15/).
     *                             * May not contain any of the following ASCII characters: '/', ':', '?',
     *                             ',', or '#'.
     * @param Task   $task         Required. The Task entity to create.
     *                             When creating a Task, the following fields are required:
     *
     *                             * `type`
     *                             * `state` (must be set to `OPEN`)
     *                             * `tracking_id` (must not be set for `UNAVAILABLE` or `SCHEDULED_STOP`
     *                             tasks, but required for all other task types)
     *                             * `planned_location` (optional for `UNAVAILABLE` tasks)
     *                             * `task_duration`
     *
     *                             Note: The Task's `name` field is ignored. All other Task fields must not be
     *                             set; otherwise, an error is returned.
     * @param array  $optionalArgs {
     *     Optional.
     *
     *     @type DeliveryRequestHeader $header
     *           Optional. The standard Delivery API request header.
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return \Maps\Fleetengine\Delivery\V1\Task
     *
     * @throws ApiException if the remote call fails
     */
    public function createTask($parent, $taskId, $task, array $optionalArgs = [])
    {
        $request = new CreateTaskRequest();
        $requestParamHeaders = [];
        $request->setParent($parent);
        $request->setTaskId($taskId);
        $request->setTask($task);
        $providerIdMatches = [];
        if (preg_match('/^(?<provider_id>providers\/[^\/]+)$/', $parent, $providerIdMatches)) {
            $requestParamHeaders['provider_id'] = $providerIdMatches['provider_id'];
        }

        if (isset($optionalArgs['header'])) {
            $request->setHeader($optionalArgs['header']);
        }

        $requestParams = new RequestParamsHeaderDescriptor($requestParamHeaders);
        $optionalArgs['headers'] = isset($optionalArgs['headers']) ? array_merge($requestParams->getHeader(), $optionalArgs['headers']) : $requestParams->getHeader();
        return $this->startCall('CreateTask', Task::class, $optionalArgs, $request)->wait();
    }

    /**
     * Returns the specified `DeliveryVehicle` instance.
     *
     * Sample code:
     * ```
     * $deliveryServiceClient = new DeliveryServiceClient();
     * try {
     *     $formattedName = $deliveryServiceClient->deliveryVehicleName('[PROVIDER]', '[VEHICLE]');
     *     $response = $deliveryServiceClient->getDeliveryVehicle($formattedName);
     * } finally {
     *     $deliveryServiceClient->close();
     * }
     * ```
     *
     * @param string $name         Required. Must be in the format
     *                             `providers/{provider}/deliveryVehicles/{delivery_vehicle}`.
     *                             The `provider` must be the Google Cloud Project ID. For example,
     *                             `sample-cloud-project`.
     * @param array  $optionalArgs {
     *     Optional.
     *
     *     @type DeliveryRequestHeader $header
     *           Optional. The standard Delivery API request header.
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return \Maps\Fleetengine\Delivery\V1\DeliveryVehicle
     *
     * @throws ApiException if the remote call fails
     */
    public function getDeliveryVehicle($name, array $optionalArgs = [])
    {
        $request = new GetDeliveryVehicleRequest();
        $requestParamHeaders = [];
        $request->setName($name);
        $providerIdMatches = [];
        if (preg_match('/^(?<provider_id>providers\/[^\/]+)$/', $name, $providerIdMatches)) {
            $requestParamHeaders['provider_id'] = $providerIdMatches['provider_id'];
        }

        if (isset($optionalArgs['header'])) {
            $request->setHeader($optionalArgs['header']);
        }

        $requestParams = new RequestParamsHeaderDescriptor($requestParamHeaders);
        $optionalArgs['headers'] = isset($optionalArgs['headers']) ? array_merge($requestParams->getHeader(), $optionalArgs['headers']) : $requestParams->getHeader();
        return $this->startCall('GetDeliveryVehicle', DeliveryVehicle::class, $optionalArgs, $request)->wait();
    }

    /**
     * Gets information about a `Task`.
     *
     * Sample code:
     * ```
     * $deliveryServiceClient = new DeliveryServiceClient();
     * try {
     *     $formattedName = $deliveryServiceClient->taskName('[PROVIDER]', '[TASK]');
     *     $response = $deliveryServiceClient->getTask($formattedName);
     * } finally {
     *     $deliveryServiceClient->close();
     * }
     * ```
     *
     * @param string $name         Required. Must be in the format `providers/{provider}/tasks/{task}`. The
     *                             `provider` must be the Google Cloud Project ID. For example,
     *                             `sample-cloud-project`.
     * @param array  $optionalArgs {
     *     Optional.
     *
     *     @type DeliveryRequestHeader $header
     *           Optional. The standard Delivery API request header.
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return \Maps\Fleetengine\Delivery\V1\Task
     *
     * @throws ApiException if the remote call fails
     */
    public function getTask($name, array $optionalArgs = [])
    {
        $request = new GetTaskRequest();
        $requestParamHeaders = [];
        $request->setName($name);
        $providerIdMatches = [];
        if (preg_match('/^(?<provider_id>providers\/[^\/]+)$/', $name, $providerIdMatches)) {
            $requestParamHeaders['provider_id'] = $providerIdMatches['provider_id'];
        }

        if (isset($optionalArgs['header'])) {
            $request->setHeader($optionalArgs['header']);
        }

        $requestParams = new RequestParamsHeaderDescriptor($requestParamHeaders);
        $optionalArgs['headers'] = isset($optionalArgs['headers']) ? array_merge($requestParams->getHeader(), $optionalArgs['headers']) : $requestParams->getHeader();
        return $this->startCall('GetTask', Task::class, $optionalArgs, $request)->wait();
    }

    /**
     * Returns the specified `TaskTrackingInfo` instance.
     *
     * Sample code:
     * ```
     * $deliveryServiceClient = new DeliveryServiceClient();
     * try {
     *     $formattedName = $deliveryServiceClient->taskTrackingInfoName('[PROVIDER]', '[TRACKING]');
     *     $response = $deliveryServiceClient->getTaskTrackingInfo($formattedName);
     * } finally {
     *     $deliveryServiceClient->close();
     * }
     * ```
     *
     * @param string $name         Required. Must be in the format
     *                             `providers/{provider}/taskTrackingInfo/{tracking_id}`. The `provider`
     *                             must be the Google Cloud Project ID, and the `tracking_id` must be the
     *                             tracking ID associated with the task. An example name can be
     *                             `providers/sample-cloud-project/taskTrackingInfo/sample-tracking-id`.
     * @param array  $optionalArgs {
     *     Optional.
     *
     *     @type DeliveryRequestHeader $header
     *           Optional. The standard Delivery API request header.
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return \Maps\Fleetengine\Delivery\V1\TaskTrackingInfo
     *
     * @throws ApiException if the remote call fails
     */
    public function getTaskTrackingInfo($name, array $optionalArgs = [])
    {
        $request = new GetTaskTrackingInfoRequest();
        $requestParamHeaders = [];
        $request->setName($name);
        $providerIdMatches = [];
        if (preg_match('/^(?<provider_id>providers\/[^\/]+)$/', $name, $providerIdMatches)) {
            $requestParamHeaders['provider_id'] = $providerIdMatches['provider_id'];
        }

        if (isset($optionalArgs['header'])) {
            $request->setHeader($optionalArgs['header']);
        }

        $requestParams = new RequestParamsHeaderDescriptor($requestParamHeaders);
        $optionalArgs['headers'] = isset($optionalArgs['headers']) ? array_merge($requestParams->getHeader(), $optionalArgs['headers']) : $requestParams->getHeader();
        return $this->startCall('GetTaskTrackingInfo', TaskTrackingInfo::class, $optionalArgs, $request)->wait();
    }

    /**
     * Gets all `DeliveryVehicle`s that meet the specified filtering criteria.
     *
     * Sample code:
     * ```
     * $deliveryServiceClient = new DeliveryServiceClient();
     * try {
     *     $formattedParent = $deliveryServiceClient->providerName('[PROVIDER]');
     *     // Iterate over pages of elements
     *     $pagedResponse = $deliveryServiceClient->listDeliveryVehicles($formattedParent);
     *     foreach ($pagedResponse->iteratePages() as $page) {
     *         foreach ($page as $element) {
     *             // doSomethingWith($element);
     *         }
     *     }
     *     // Alternatively:
     *     // Iterate through all elements
     *     $pagedResponse = $deliveryServiceClient->listDeliveryVehicles($formattedParent);
     *     foreach ($pagedResponse->iterateAllElements() as $element) {
     *         // doSomethingWith($element);
     *     }
     * } finally {
     *     $deliveryServiceClient->close();
     * }
     * ```
     *
     * @param string $parent       Required. Must be in the format `providers/{provider}`.
     *                             The `provider` must be the Google Cloud Project ID.
     *                             For example, `sample-cloud-project`.
     * @param array  $optionalArgs {
     *     Optional.
     *
     *     @type DeliveryRequestHeader $header
     *           Optional. The standard Delivery API request header.
     *     @type int $pageSize
     *           The maximum number of resources contained in the underlying API
     *           response. The API may return fewer values in a page, even if
     *           there are additional values to be retrieved.
     *     @type string $pageToken
     *           A page token is used to specify a page of values to be returned.
     *           If no page token is specified (the default), the first page
     *           of values will be returned. Any page token used here must have
     *           been generated by a previous call to the API.
     *     @type string $filter
     *           Optional. A filter query to apply when listing delivery vehicles. See
     *           http://aip.dev/160 for examples of the filter syntax. If you don't specify
     *           a value, or if you specify an empty string for the filter, then all
     *           delivery vehicles are returned.
     *
     *           Note that the only queries supported for `ListDeliveryVehicles` are
     *           on vehicle attributes (for example, `attributes.<key> = <value>` or
     *           `attributes.<key1> = <value1> AND attributes.<key2> = <value2>`). Also, all
     *           attributes are stored as strings, so the only supported comparisons against
     *           attributes are string comparisons. In order to compare against number or
     *           boolean values, the values must be explicitly quoted to be treated as
     *           strings (for example, `attributes.<key> = "10"` or
     *           `attributes.<key> = "true"`).
     *
     *           The maximum number of restrictions allowed in a filter query is 50. A
     *           restriction is a part of the query of the form
     *           `attribute.<KEY> <COMPARATOR> <VALUE>`, for example `attributes.foo = bar`
     *           is 1 restriction.
     *     @type Viewport $viewport
     *           Optional. A filter that limits the vehicles returned to those whose last
     *           known location was in the rectangular area defined by the viewport.
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return \Google\ApiCore\PagedListResponse
     *
     * @throws ApiException if the remote call fails
     */
    public function listDeliveryVehicles($parent, array $optionalArgs = [])
    {
        $request = new ListDeliveryVehiclesRequest();
        $requestParamHeaders = [];
        $request->setParent($parent);
        $providerIdMatches = [];
        if (preg_match('/^(?<provider_id>providers\/[^\/]+)$/', $parent, $providerIdMatches)) {
            $requestParamHeaders['provider_id'] = $providerIdMatches['provider_id'];
        }

        if (isset($optionalArgs['header'])) {
            $request->setHeader($optionalArgs['header']);
        }

        if (isset($optionalArgs['pageSize'])) {
            $request->setPageSize($optionalArgs['pageSize']);
        }

        if (isset($optionalArgs['pageToken'])) {
            $request->setPageToken($optionalArgs['pageToken']);
        }

        if (isset($optionalArgs['filter'])) {
            $request->setFilter($optionalArgs['filter']);
        }

        if (isset($optionalArgs['viewport'])) {
            $request->setViewport($optionalArgs['viewport']);
        }

        $requestParams = new RequestParamsHeaderDescriptor($requestParamHeaders);
        $optionalArgs['headers'] = isset($optionalArgs['headers']) ? array_merge($requestParams->getHeader(), $optionalArgs['headers']) : $requestParams->getHeader();
        return $this->getPagedListResponse('ListDeliveryVehicles', $optionalArgs, ListDeliveryVehiclesResponse::class, $request);
    }

    /**
     * Gets all `Task`s that meet the specified filtering criteria.
     *
     * Sample code:
     * ```
     * $deliveryServiceClient = new DeliveryServiceClient();
     * try {
     *     $formattedParent = $deliveryServiceClient->providerName('[PROVIDER]');
     *     // Iterate over pages of elements
     *     $pagedResponse = $deliveryServiceClient->listTasks($formattedParent);
     *     foreach ($pagedResponse->iteratePages() as $page) {
     *         foreach ($page as $element) {
     *             // doSomethingWith($element);
     *         }
     *     }
     *     // Alternatively:
     *     // Iterate through all elements
     *     $pagedResponse = $deliveryServiceClient->listTasks($formattedParent);
     *     foreach ($pagedResponse->iterateAllElements() as $element) {
     *         // doSomethingWith($element);
     *     }
     * } finally {
     *     $deliveryServiceClient->close();
     * }
     * ```
     *
     * @param string $parent       Required. Must be in the format `providers/{provider}`.
     *                             The `provider` must be the Google Cloud Project ID. For example,
     *                             `sample-cloud-project`.
     * @param array  $optionalArgs {
     *     Optional.
     *
     *     @type DeliveryRequestHeader $header
     *           Optional. The standard Delivery API request header.
     *     @type int $pageSize
     *           The maximum number of resources contained in the underlying API
     *           response. The API may return fewer values in a page, even if
     *           there are additional values to be retrieved.
     *     @type string $pageToken
     *           A page token is used to specify a page of values to be returned.
     *           If no page token is specified (the default), the first page
     *           of values will be returned. Any page token used here must have
     *           been generated by a previous call to the API.
     *     @type string $filter
     *           Optional. A filter query to apply when listing Tasks. See
     *           http://aip.dev/160 for examples of filter syntax. If you don't specify a
     *           value, or if you filter on an empty string, then all Tasks are returned.
     *           For information about the Task properties that you can filter on, see [Task
     *           list](/maps/documentation/transportation-logistics/last-mile-fleet-solution/fleet-performance/fleet-engine/deliveries_api#list_tasks).
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return \Google\ApiCore\PagedListResponse
     *
     * @throws ApiException if the remote call fails
     */
    public function listTasks($parent, array $optionalArgs = [])
    {
        $request = new ListTasksRequest();
        $requestParamHeaders = [];
        $request->setParent($parent);
        $providerIdMatches = [];
        if (preg_match('/^(?<provider_id>providers\/[^\/]+)$/', $parent, $providerIdMatches)) {
            $requestParamHeaders['provider_id'] = $providerIdMatches['provider_id'];
        }

        if (isset($optionalArgs['header'])) {
            $request->setHeader($optionalArgs['header']);
        }

        if (isset($optionalArgs['pageSize'])) {
            $request->setPageSize($optionalArgs['pageSize']);
        }

        if (isset($optionalArgs['pageToken'])) {
            $request->setPageToken($optionalArgs['pageToken']);
        }

        if (isset($optionalArgs['filter'])) {
            $request->setFilter($optionalArgs['filter']);
        }

        $requestParams = new RequestParamsHeaderDescriptor($requestParamHeaders);
        $optionalArgs['headers'] = isset($optionalArgs['headers']) ? array_merge($requestParams->getHeader(), $optionalArgs['headers']) : $requestParams->getHeader();
        return $this->getPagedListResponse('ListTasks', $optionalArgs, ListTasksResponse::class, $request);
    }

    /**
     * Deprecated: Use `GetTaskTrackingInfo` instead.
     *
     * Sample code:
     * ```
     * $deliveryServiceClient = new DeliveryServiceClient();
     * try {
     *     $parent = 'parent';
     *     $trackingId = 'tracking_id';
     *     // Iterate over pages of elements
     *     $pagedResponse = $deliveryServiceClient->searchTasks($parent, $trackingId);
     *     foreach ($pagedResponse->iteratePages() as $page) {
     *         foreach ($page as $element) {
     *             // doSomethingWith($element);
     *         }
     *     }
     *     // Alternatively:
     *     // Iterate through all elements
     *     $pagedResponse = $deliveryServiceClient->searchTasks($parent, $trackingId);
     *     foreach ($pagedResponse->iterateAllElements() as $element) {
     *         // doSomethingWith($element);
     *     }
     * } finally {
     *     $deliveryServiceClient->close();
     * }
     * ```
     *
     * @param string $parent       Required. Must be in the format `providers/{provider}`.
     *                             The provider must be the Google Cloud Project ID. For example,
     *                             `sample-cloud-project`.
     * @param string $trackingId   Required. The identifier of the set of related Tasks being requested.
     *                             Tracking IDs are subject to the following restrictions:
     *
     *                             * Must be a valid Unicode string.
     *                             * Limited to a maximum length of 64 characters.
     *                             * Normalized according to [Unicode Normalization Form C]
     *                             (http://www.unicode.org/reports/tr15/).
     *                             * May not contain any of the following ASCII characters: '/', ':', '?',
     *                             ',', or '#'.
     * @param array  $optionalArgs {
     *     Optional.
     *
     *     @type DeliveryRequestHeader $header
     *           Optional. The standard Delivery API request header.
     *     @type int $pageSize
     *           The maximum number of resources contained in the underlying API
     *           response. The API may return fewer values in a page, even if
     *           there are additional values to be retrieved.
     *     @type string $pageToken
     *           A page token is used to specify a page of values to be returned.
     *           If no page token is specified (the default), the first page
     *           of values will be returned. Any page token used here must have
     *           been generated by a previous call to the API.
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return \Google\ApiCore\PagedListResponse
     *
     * @throws ApiException if the remote call fails
     *
     * @deprecated This method will be removed in the next major version update.
     */
    public function searchTasks($parent, $trackingId, array $optionalArgs = [])
    {
        $request = new SearchTasksRequest();
        $requestParamHeaders = [];
        $request->setParent($parent);
        $request->setTrackingId($trackingId);
        $providerIdMatches = [];
        if (preg_match('/^(?<provider_id>providers\/[^\/]+)$/', $parent, $providerIdMatches)) {
            $requestParamHeaders['provider_id'] = $providerIdMatches['provider_id'];
        }

        if (isset($optionalArgs['header'])) {
            $request->setHeader($optionalArgs['header']);
        }

        if (isset($optionalArgs['pageSize'])) {
            $request->setPageSize($optionalArgs['pageSize']);
        }

        if (isset($optionalArgs['pageToken'])) {
            $request->setPageToken($optionalArgs['pageToken']);
        }

        $requestParams = new RequestParamsHeaderDescriptor($requestParamHeaders);
        $optionalArgs['headers'] = isset($optionalArgs['headers']) ? array_merge($requestParams->getHeader(), $optionalArgs['headers']) : $requestParams->getHeader();
        return $this->getPagedListResponse('SearchTasks', $optionalArgs, SearchTasksResponse::class, $request);
    }

    /**
     * Writes updated `DeliveryVehicle` data to Fleet Engine, and assigns
     * `Tasks` to the `DeliveryVehicle`. You cannot update the name of the
     * `DeliveryVehicle`. You *can* update `remaining_vehicle_journey_segments`
     * though, but it must contain all of the `VehicleJourneySegment`s currently
     * on the `DeliveryVehicle`. The `task_id`s are retrieved from
     * `remaining_vehicle_journey_segments`, and their corresponding `Tasks` are
     * assigned to the `DeliveryVehicle` if they have not yet been assigned.
     *
     * Sample code:
     * ```
     * $deliveryServiceClient = new DeliveryServiceClient();
     * try {
     *     $deliveryVehicle = new DeliveryVehicle();
     *     $updateMask = new FieldMask();
     *     $response = $deliveryServiceClient->updateDeliveryVehicle($deliveryVehicle, $updateMask);
     * } finally {
     *     $deliveryServiceClient->close();
     * }
     * ```
     *
     * @param DeliveryVehicle $deliveryVehicle Required. The `DeliveryVehicle` entity update to apply.
     *                                         Note: You cannot update the name of the `DeliveryVehicle`.
     * @param FieldMask       $updateMask      Required. A field mask that indicates which `DeliveryVehicle` fields to
     *                                         update. Note that the update_mask must contain at least one field.
     *
     *                                         This is a comma-separated list of fully qualified names of fields. Example:
     *                                         `"remaining_vehicle_journey_segments"`.
     * @param array           $optionalArgs    {
     *     Optional.
     *
     *     @type DeliveryRequestHeader $header
     *           Optional. The standard Delivery API request header.
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return \Maps\Fleetengine\Delivery\V1\DeliveryVehicle
     *
     * @throws ApiException if the remote call fails
     */
    public function updateDeliveryVehicle($deliveryVehicle, $updateMask, array $optionalArgs = [])
    {
        $request = new UpdateDeliveryVehicleRequest();
        $requestParamHeaders = [];
        $request->setDeliveryVehicle($deliveryVehicle);
        $request->setUpdateMask($updateMask);
        $providerIdMatches = [];
        if (preg_match('/^(?<provider_id>providers\/[^\/]+)$/', $deliveryVehicle->getName(), $providerIdMatches)) {
            $requestParamHeaders['provider_id'] = $providerIdMatches['provider_id'];
        }

        if (isset($optionalArgs['header'])) {
            $request->setHeader($optionalArgs['header']);
        }

        $requestParams = new RequestParamsHeaderDescriptor($requestParamHeaders);
        $optionalArgs['headers'] = isset($optionalArgs['headers']) ? array_merge($requestParams->getHeader(), $optionalArgs['headers']) : $requestParams->getHeader();
        return $this->startCall('UpdateDeliveryVehicle', DeliveryVehicle::class, $optionalArgs, $request)->wait();
    }

    /**
     * Updates `Task` data.
     *
     * Sample code:
     * ```
     * $deliveryServiceClient = new DeliveryServiceClient();
     * try {
     *     $task = new Task();
     *     $updateMask = new FieldMask();
     *     $response = $deliveryServiceClient->updateTask($task, $updateMask);
     * } finally {
     *     $deliveryServiceClient->close();
     * }
     * ```
     *
     * @param Task      $task         Required. The Task associated with the update.
     *                                The following fields are maintained by Fleet Engine. Do not update
     *                                them using `Task.update`.
     *
     *                                * `last_location`.
     *                                * `last_location_snappable`.
     *                                * `name`.
     *                                * `remaining_vehicle_journey_segments`.
     *                                * `task_outcome_location_source`.
     *
     *                                Note: You cannot change the value of `task_outcome` once you set it.
     *
     *                                If the Task has been assigned to a delivery vehicle, then don't set the
     *                                Task state to CLOSED using `Task.update`. Instead, remove the `VehicleStop`
     *                                that contains the Task from the delivery vehicle, which automatically sets
     *                                the Task state to CLOSED.
     * @param FieldMask $updateMask   Required. The field mask that indicates which Task fields to update.
     *                                Note: The `update_mask` must contain at least one field.
     *
     *                                This is a comma-separated list of fully qualified names of fields. Example:
     *                                `"task_outcome,task_outcome_time,task_outcome_location"`.
     * @param array     $optionalArgs {
     *     Optional.
     *
     *     @type DeliveryRequestHeader $header
     *           Optional. The standard Delivery API request header.
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return \Maps\Fleetengine\Delivery\V1\Task
     *
     * @throws ApiException if the remote call fails
     */
    public function updateTask($task, $updateMask, array $optionalArgs = [])
    {
        $request = new UpdateTaskRequest();
        $requestParamHeaders = [];
        $request->setTask($task);
        $request->setUpdateMask($updateMask);
        $providerIdMatches = [];
        if (preg_match('/^(?<provider_id>providers\/[^\/]+)$/', $task->getName(), $providerIdMatches)) {
            $requestParamHeaders['provider_id'] = $providerIdMatches['provider_id'];
        }

        if (isset($optionalArgs['header'])) {
            $request->setHeader($optionalArgs['header']);
        }

        $requestParams = new RequestParamsHeaderDescriptor($requestParamHeaders);
        $optionalArgs['headers'] = isset($optionalArgs['headers']) ? array_merge($requestParams->getHeader(), $optionalArgs['headers']) : $requestParams->getHeader();
        return $this->startCall('UpdateTask', Task::class, $optionalArgs, $request)->wait();
    }
}
