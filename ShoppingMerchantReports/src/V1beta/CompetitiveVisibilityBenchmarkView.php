<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/shopping/merchant/reports/v1beta/reports.proto

namespace Google\Shopping\Merchant\Reports\V1beta;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Fields available for query in `competitive_visibility_benchmark_view` table.
 * [Competitive
 * visibility](https://support.google.com/merchants/answer/11366442) report with
 * the category benchmark.
 * Values are only set for fields requested explicitly in the request's search
 * query.
 *
 * Generated from protobuf message <code>google.shopping.merchant.reports.v1beta.CompetitiveVisibilityBenchmarkView</code>
 */
class CompetitiveVisibilityBenchmarkView extends \Google\Protobuf\Internal\Message
{
    /**
     * Date of this row.
     * Required in the `SELECT` clause. A condition on `date` is required in the
     * `WHERE` clause.
     *
     * Generated from protobuf field <code>.google.type.Date date = 1;</code>
     */
    protected $date = null;
    /**
     * Country where impressions appeared.
     * Required in the `SELECT` clause. A condition on `report_country_code` is
     * required in the `WHERE` clause.
     *
     * Generated from protobuf field <code>optional string report_country_code = 2;</code>
     */
    protected $report_country_code = null;
    /**
     * Google product category ID to calculate the report for, represented in
     * [Google's product
     * taxonomy](https://support.google.com/merchants/answer/6324436).
     * Required in the `SELECT` clause. A condition on `report_category_id` is
     * required in the `WHERE` clause.
     *
     * Generated from protobuf field <code>optional int64 report_category_id = 3;</code>
     */
    protected $report_category_id = null;
    /**
     * Traffic source of impressions.
     * Required in the `SELECT` clause.
     *
     * Generated from protobuf field <code>optional .google.shopping.merchant.reports.v1beta.TrafficSource traffic_source = 4;</code>
     */
    protected $traffic_source = null;
    /**
     * Change in visibility based on impressions for your domain with respect to
     * the start of the selected time range (or first day with non-zero
     * impressions).
     * Cannot be filtered on in the 'WHERE' clause.
     *
     * Generated from protobuf field <code>optional double your_domain_visibility_trend = 5;</code>
     */
    protected $your_domain_visibility_trend = null;
    /**
     * Change in visibility based on impressions with respect to the start of the
     * selected time range (or first day with non-zero impressions) for a
     * combined set of merchants with highest visibility approximating the
     * market.
     * Cannot be filtered on in the 'WHERE' clause.
     *
     * Generated from protobuf field <code>optional double category_benchmark_visibility_trend = 6;</code>
     */
    protected $category_benchmark_visibility_trend = null;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type \Google\Type\Date $date
     *           Date of this row.
     *           Required in the `SELECT` clause. A condition on `date` is required in the
     *           `WHERE` clause.
     *     @type string $report_country_code
     *           Country where impressions appeared.
     *           Required in the `SELECT` clause. A condition on `report_country_code` is
     *           required in the `WHERE` clause.
     *     @type int|string $report_category_id
     *           Google product category ID to calculate the report for, represented in
     *           [Google's product
     *           taxonomy](https://support.google.com/merchants/answer/6324436).
     *           Required in the `SELECT` clause. A condition on `report_category_id` is
     *           required in the `WHERE` clause.
     *     @type int $traffic_source
     *           Traffic source of impressions.
     *           Required in the `SELECT` clause.
     *     @type float $your_domain_visibility_trend
     *           Change in visibility based on impressions for your domain with respect to
     *           the start of the selected time range (or first day with non-zero
     *           impressions).
     *           Cannot be filtered on in the 'WHERE' clause.
     *     @type float $category_benchmark_visibility_trend
     *           Change in visibility based on impressions with respect to the start of the
     *           selected time range (or first day with non-zero impressions) for a
     *           combined set of merchants with highest visibility approximating the
     *           market.
     *           Cannot be filtered on in the 'WHERE' clause.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Google\Shopping\Merchant\Reports\V1Beta\Reports::initOnce();
        parent::__construct($data);
    }

    /**
     * Date of this row.
     * Required in the `SELECT` clause. A condition on `date` is required in the
     * `WHERE` clause.
     *
     * Generated from protobuf field <code>.google.type.Date date = 1;</code>
     * @return \Google\Type\Date|null
     */
    public function getDate()
    {
        return $this->date;
    }

    public function hasDate()
    {
        return isset($this->date);
    }

    public function clearDate()
    {
        unset($this->date);
    }

    /**
     * Date of this row.
     * Required in the `SELECT` clause. A condition on `date` is required in the
     * `WHERE` clause.
     *
     * Generated from protobuf field <code>.google.type.Date date = 1;</code>
     * @param \Google\Type\Date $var
     * @return $this
     */
    public function setDate($var)
    {
        GPBUtil::checkMessage($var, \Google\Type\Date::class);
        $this->date = $var;

        return $this;
    }

    /**
     * Country where impressions appeared.
     * Required in the `SELECT` clause. A condition on `report_country_code` is
     * required in the `WHERE` clause.
     *
     * Generated from protobuf field <code>optional string report_country_code = 2;</code>
     * @return string
     */
    public function getReportCountryCode()
    {
        return isset($this->report_country_code) ? $this->report_country_code : '';
    }

    public function hasReportCountryCode()
    {
        return isset($this->report_country_code);
    }

    public function clearReportCountryCode()
    {
        unset($this->report_country_code);
    }

    /**
     * Country where impressions appeared.
     * Required in the `SELECT` clause. A condition on `report_country_code` is
     * required in the `WHERE` clause.
     *
     * Generated from protobuf field <code>optional string report_country_code = 2;</code>
     * @param string $var
     * @return $this
     */
    public function setReportCountryCode($var)
    {
        GPBUtil::checkString($var, True);
        $this->report_country_code = $var;

        return $this;
    }

    /**
     * Google product category ID to calculate the report for, represented in
     * [Google's product
     * taxonomy](https://support.google.com/merchants/answer/6324436).
     * Required in the `SELECT` clause. A condition on `report_category_id` is
     * required in the `WHERE` clause.
     *
     * Generated from protobuf field <code>optional int64 report_category_id = 3;</code>
     * @return int|string
     */
    public function getReportCategoryId()
    {
        return isset($this->report_category_id) ? $this->report_category_id : 0;
    }

    public function hasReportCategoryId()
    {
        return isset($this->report_category_id);
    }

    public function clearReportCategoryId()
    {
        unset($this->report_category_id);
    }

    /**
     * Google product category ID to calculate the report for, represented in
     * [Google's product
     * taxonomy](https://support.google.com/merchants/answer/6324436).
     * Required in the `SELECT` clause. A condition on `report_category_id` is
     * required in the `WHERE` clause.
     *
     * Generated from protobuf field <code>optional int64 report_category_id = 3;</code>
     * @param int|string $var
     * @return $this
     */
    public function setReportCategoryId($var)
    {
        GPBUtil::checkInt64($var);
        $this->report_category_id = $var;

        return $this;
    }

    /**
     * Traffic source of impressions.
     * Required in the `SELECT` clause.
     *
     * Generated from protobuf field <code>optional .google.shopping.merchant.reports.v1beta.TrafficSource traffic_source = 4;</code>
     * @return int
     */
    public function getTrafficSource()
    {
        return isset($this->traffic_source) ? $this->traffic_source : 0;
    }

    public function hasTrafficSource()
    {
        return isset($this->traffic_source);
    }

    public function clearTrafficSource()
    {
        unset($this->traffic_source);
    }

    /**
     * Traffic source of impressions.
     * Required in the `SELECT` clause.
     *
     * Generated from protobuf field <code>optional .google.shopping.merchant.reports.v1beta.TrafficSource traffic_source = 4;</code>
     * @param int $var
     * @return $this
     */
    public function setTrafficSource($var)
    {
        GPBUtil::checkEnum($var, \Google\Shopping\Merchant\Reports\V1beta\TrafficSource::class);
        $this->traffic_source = $var;

        return $this;
    }

    /**
     * Change in visibility based on impressions for your domain with respect to
     * the start of the selected time range (or first day with non-zero
     * impressions).
     * Cannot be filtered on in the 'WHERE' clause.
     *
     * Generated from protobuf field <code>optional double your_domain_visibility_trend = 5;</code>
     * @return float
     */
    public function getYourDomainVisibilityTrend()
    {
        return isset($this->your_domain_visibility_trend) ? $this->your_domain_visibility_trend : 0.0;
    }

    public function hasYourDomainVisibilityTrend()
    {
        return isset($this->your_domain_visibility_trend);
    }

    public function clearYourDomainVisibilityTrend()
    {
        unset($this->your_domain_visibility_trend);
    }

    /**
     * Change in visibility based on impressions for your domain with respect to
     * the start of the selected time range (or first day with non-zero
     * impressions).
     * Cannot be filtered on in the 'WHERE' clause.
     *
     * Generated from protobuf field <code>optional double your_domain_visibility_trend = 5;</code>
     * @param float $var
     * @return $this
     */
    public function setYourDomainVisibilityTrend($var)
    {
        GPBUtil::checkDouble($var);
        $this->your_domain_visibility_trend = $var;

        return $this;
    }

    /**
     * Change in visibility based on impressions with respect to the start of the
     * selected time range (or first day with non-zero impressions) for a
     * combined set of merchants with highest visibility approximating the
     * market.
     * Cannot be filtered on in the 'WHERE' clause.
     *
     * Generated from protobuf field <code>optional double category_benchmark_visibility_trend = 6;</code>
     * @return float
     */
    public function getCategoryBenchmarkVisibilityTrend()
    {
        return isset($this->category_benchmark_visibility_trend) ? $this->category_benchmark_visibility_trend : 0.0;
    }

    public function hasCategoryBenchmarkVisibilityTrend()
    {
        return isset($this->category_benchmark_visibility_trend);
    }

    public function clearCategoryBenchmarkVisibilityTrend()
    {
        unset($this->category_benchmark_visibility_trend);
    }

    /**
     * Change in visibility based on impressions with respect to the start of the
     * selected time range (or first day with non-zero impressions) for a
     * combined set of merchants with highest visibility approximating the
     * market.
     * Cannot be filtered on in the 'WHERE' clause.
     *
     * Generated from protobuf field <code>optional double category_benchmark_visibility_trend = 6;</code>
     * @param float $var
     * @return $this
     */
    public function setCategoryBenchmarkVisibilityTrend($var)
    {
        GPBUtil::checkDouble($var);
        $this->category_benchmark_visibility_trend = $var;

        return $this;
    }

}

