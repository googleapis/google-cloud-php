<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/cloud/capacityplanner/v1beta/allocation.proto

namespace Google\Cloud\CapacityPlanner\V1beta\Allocation\SpecificSKUAllocation\AllocatedInstanceProperties\AllocatedDisk;

use UnexpectedValueException;

/**
 * guest device interface options to use for the disk.
 *
 * Protobuf type <code>google.cloud.capacityplanner.v1beta.Allocation.SpecificSKUAllocation.AllocatedInstanceProperties.AllocatedDisk.DiskInterface</code>
 */
class DiskInterface
{
    /**
     * Default value. This value is unused.
     *
     * Generated from protobuf enum <code>DISK_INTERFACE_UNSPECIFIED = 0;</code>
     */
    const DISK_INTERFACE_UNSPECIFIED = 0;
    /**
     * SCSI disk interface.
     *
     * Generated from protobuf enum <code>SCSI = 1;</code>
     */
    const SCSI = 1;
    /**
     * NVME disk interface.
     *
     * Generated from protobuf enum <code>NVME = 2;</code>
     */
    const NVME = 2;
    /**
     * NVDIMM disk interface.
     *
     * Generated from protobuf enum <code>NVDIMM = 3;</code>
     */
    const NVDIMM = 3;
    /**
     * ISCSI disk interface.
     *
     * Generated from protobuf enum <code>ISCSI = 4;</code>
     */
    const ISCSI = 4;

    private static $valueToName = [
        self::DISK_INTERFACE_UNSPECIFIED => 'DISK_INTERFACE_UNSPECIFIED',
        self::SCSI => 'SCSI',
        self::NVME => 'NVME',
        self::NVDIMM => 'NVDIMM',
        self::ISCSI => 'ISCSI',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}


