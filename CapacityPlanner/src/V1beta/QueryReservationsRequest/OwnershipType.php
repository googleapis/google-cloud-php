<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/cloud/capacityplanner/v1beta/usage_service.proto

namespace Google\Cloud\CapacityPlanner\V1beta\QueryReservationsRequest;

use UnexpectedValueException;

/**
 * Reservation ownership status to provide distinction for Capacity Planning.
 *
 * Protobuf type <code>google.cloud.capacityplanner.v1beta.QueryReservationsRequest.OwnershipType</code>
 */
class OwnershipType
{
    /**
     * No ownership status specified.
     *
     * Generated from protobuf enum <code>OWNERSHIP_TYPE_UNSPECIFIED = 0;</code>
     */
    const OWNERSHIP_TYPE_UNSPECIFIED = 0;
    /**
     * For the reservations owned within selected Google Cloud Platform Resource
     * Container (project/folder/organization).
     *
     * Generated from protobuf enum <code>OWNERSHIP_TYPE_OWNED = 1;</code>
     */
    const OWNERSHIP_TYPE_OWNED = 1;
    /**
     * For the reservations consumable within selected Google Cloud Platform
     * Resource Container (project/folder/organization), but not owned by them.
     *
     * Generated from protobuf enum <code>OWNERSHIP_TYPE_SHARED_BY_OTHERS = 2;</code>
     */
    const OWNERSHIP_TYPE_SHARED_BY_OTHERS = 2;

    private static $valueToName = [
        self::OWNERSHIP_TYPE_UNSPECIFIED => 'OWNERSHIP_TYPE_UNSPECIFIED',
        self::OWNERSHIP_TYPE_OWNED => 'OWNERSHIP_TYPE_OWNED',
        self::OWNERSHIP_TYPE_SHARED_BY_OTHERS => 'OWNERSHIP_TYPE_SHARED_BY_OTHERS',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}


