<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/cloud/contactcenterinsights/v1/contact_center_insights.proto

namespace Google\Cloud\ContactCenterInsights\V1\QueryMetricsResponse\Slice\DataPoint;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * The measure related to conversations.
 *
 * Generated from protobuf message <code>google.cloud.contactcenterinsights.v1.QueryMetricsResponse.Slice.DataPoint.ConversationMeasure</code>
 */
class ConversationMeasure extends \Google\Protobuf\Internal\Message
{
    /**
     * The conversation count.
     *
     * Generated from protobuf field <code>optional int32 conversation_count = 1;</code>
     */
    protected $conversation_count = null;
    /**
     * The average silence percentage.
     *
     * Generated from protobuf field <code>optional float average_silence_percentage = 2;</code>
     */
    protected $average_silence_percentage = null;
    /**
     * The average duration.
     *
     * Generated from protobuf field <code>optional .google.protobuf.Duration average_duration = 3;</code>
     */
    protected $average_duration = null;
    /**
     * The average turn count.
     *
     * Generated from protobuf field <code>optional float average_turn_count = 4;</code>
     */
    protected $average_turn_count = null;
    /**
     * The average agent's sentiment score.
     *
     * Generated from protobuf field <code>optional float average_agent_sentiment_score = 5;</code>
     */
    protected $average_agent_sentiment_score = null;
    /**
     * The average client's sentiment score.
     *
     * Generated from protobuf field <code>optional float average_client_sentiment_score = 6;</code>
     */
    protected $average_client_sentiment_score = null;
    /**
     * The average customer satisfaction rating.
     *
     * Generated from protobuf field <code>optional double average_customer_satisfaction_rating = 8;</code>
     */
    protected $average_customer_satisfaction_rating = null;
    /**
     * Average QA normalized score.
     * Will exclude 0's in average calculation.
     *
     * Generated from protobuf field <code>optional double average_qa_normalized_score = 7;</code>
     */
    protected $average_qa_normalized_score = null;
    /**
     * Average QA normalized score for all the tags.
     *
     * Generated from protobuf field <code>repeated .google.cloud.contactcenterinsights.v1.QueryMetricsResponse.Slice.DataPoint.ConversationMeasure.QaTagScore qa_tag_scores = 9;</code>
     */
    private $qa_tag_scores;
    /**
     * Average QA normalized score averaged for questions averaged across
     * all revisions of the parent scorecard.
     * Will be only populated if the request specifies a dimension of
     * QA_QUESTION_ID.
     *
     * Generated from protobuf field <code>optional double average_qa_question_normalized_score = 10;</code>
     */
    protected $average_qa_question_normalized_score = null;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type int $conversation_count
     *           The conversation count.
     *     @type float $average_silence_percentage
     *           The average silence percentage.
     *     @type \Google\Protobuf\Duration $average_duration
     *           The average duration.
     *     @type float $average_turn_count
     *           The average turn count.
     *     @type float $average_agent_sentiment_score
     *           The average agent's sentiment score.
     *     @type float $average_client_sentiment_score
     *           The average client's sentiment score.
     *     @type float $average_customer_satisfaction_rating
     *           The average customer satisfaction rating.
     *     @type float $average_qa_normalized_score
     *           Average QA normalized score.
     *           Will exclude 0's in average calculation.
     *     @type array<\Google\Cloud\ContactCenterInsights\V1\QueryMetricsResponse\Slice\DataPoint\ConversationMeasure\QaTagScore>|\Google\Protobuf\Internal\RepeatedField $qa_tag_scores
     *           Average QA normalized score for all the tags.
     *     @type float $average_qa_question_normalized_score
     *           Average QA normalized score averaged for questions averaged across
     *           all revisions of the parent scorecard.
     *           Will be only populated if the request specifies a dimension of
     *           QA_QUESTION_ID.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Google\Cloud\Contactcenterinsights\V1\ContactCenterInsights::initOnce();
        parent::__construct($data);
    }

    /**
     * The conversation count.
     *
     * Generated from protobuf field <code>optional int32 conversation_count = 1;</code>
     * @return int
     */
    public function getConversationCount()
    {
        return isset($this->conversation_count) ? $this->conversation_count : 0;
    }

    public function hasConversationCount()
    {
        return isset($this->conversation_count);
    }

    public function clearConversationCount()
    {
        unset($this->conversation_count);
    }

    /**
     * The conversation count.
     *
     * Generated from protobuf field <code>optional int32 conversation_count = 1;</code>
     * @param int $var
     * @return $this
     */
    public function setConversationCount($var)
    {
        GPBUtil::checkInt32($var);
        $this->conversation_count = $var;

        return $this;
    }

    /**
     * The average silence percentage.
     *
     * Generated from protobuf field <code>optional float average_silence_percentage = 2;</code>
     * @return float
     */
    public function getAverageSilencePercentage()
    {
        return isset($this->average_silence_percentage) ? $this->average_silence_percentage : 0.0;
    }

    public function hasAverageSilencePercentage()
    {
        return isset($this->average_silence_percentage);
    }

    public function clearAverageSilencePercentage()
    {
        unset($this->average_silence_percentage);
    }

    /**
     * The average silence percentage.
     *
     * Generated from protobuf field <code>optional float average_silence_percentage = 2;</code>
     * @param float $var
     * @return $this
     */
    public function setAverageSilencePercentage($var)
    {
        GPBUtil::checkFloat($var);
        $this->average_silence_percentage = $var;

        return $this;
    }

    /**
     * The average duration.
     *
     * Generated from protobuf field <code>optional .google.protobuf.Duration average_duration = 3;</code>
     * @return \Google\Protobuf\Duration|null
     */
    public function getAverageDuration()
    {
        return $this->average_duration;
    }

    public function hasAverageDuration()
    {
        return isset($this->average_duration);
    }

    public function clearAverageDuration()
    {
        unset($this->average_duration);
    }

    /**
     * The average duration.
     *
     * Generated from protobuf field <code>optional .google.protobuf.Duration average_duration = 3;</code>
     * @param \Google\Protobuf\Duration $var
     * @return $this
     */
    public function setAverageDuration($var)
    {
        GPBUtil::checkMessage($var, \Google\Protobuf\Duration::class);
        $this->average_duration = $var;

        return $this;
    }

    /**
     * The average turn count.
     *
     * Generated from protobuf field <code>optional float average_turn_count = 4;</code>
     * @return float
     */
    public function getAverageTurnCount()
    {
        return isset($this->average_turn_count) ? $this->average_turn_count : 0.0;
    }

    public function hasAverageTurnCount()
    {
        return isset($this->average_turn_count);
    }

    public function clearAverageTurnCount()
    {
        unset($this->average_turn_count);
    }

    /**
     * The average turn count.
     *
     * Generated from protobuf field <code>optional float average_turn_count = 4;</code>
     * @param float $var
     * @return $this
     */
    public function setAverageTurnCount($var)
    {
        GPBUtil::checkFloat($var);
        $this->average_turn_count = $var;

        return $this;
    }

    /**
     * The average agent's sentiment score.
     *
     * Generated from protobuf field <code>optional float average_agent_sentiment_score = 5;</code>
     * @return float
     */
    public function getAverageAgentSentimentScore()
    {
        return isset($this->average_agent_sentiment_score) ? $this->average_agent_sentiment_score : 0.0;
    }

    public function hasAverageAgentSentimentScore()
    {
        return isset($this->average_agent_sentiment_score);
    }

    public function clearAverageAgentSentimentScore()
    {
        unset($this->average_agent_sentiment_score);
    }

    /**
     * The average agent's sentiment score.
     *
     * Generated from protobuf field <code>optional float average_agent_sentiment_score = 5;</code>
     * @param float $var
     * @return $this
     */
    public function setAverageAgentSentimentScore($var)
    {
        GPBUtil::checkFloat($var);
        $this->average_agent_sentiment_score = $var;

        return $this;
    }

    /**
     * The average client's sentiment score.
     *
     * Generated from protobuf field <code>optional float average_client_sentiment_score = 6;</code>
     * @return float
     */
    public function getAverageClientSentimentScore()
    {
        return isset($this->average_client_sentiment_score) ? $this->average_client_sentiment_score : 0.0;
    }

    public function hasAverageClientSentimentScore()
    {
        return isset($this->average_client_sentiment_score);
    }

    public function clearAverageClientSentimentScore()
    {
        unset($this->average_client_sentiment_score);
    }

    /**
     * The average client's sentiment score.
     *
     * Generated from protobuf field <code>optional float average_client_sentiment_score = 6;</code>
     * @param float $var
     * @return $this
     */
    public function setAverageClientSentimentScore($var)
    {
        GPBUtil::checkFloat($var);
        $this->average_client_sentiment_score = $var;

        return $this;
    }

    /**
     * The average customer satisfaction rating.
     *
     * Generated from protobuf field <code>optional double average_customer_satisfaction_rating = 8;</code>
     * @return float
     */
    public function getAverageCustomerSatisfactionRating()
    {
        return isset($this->average_customer_satisfaction_rating) ? $this->average_customer_satisfaction_rating : 0.0;
    }

    public function hasAverageCustomerSatisfactionRating()
    {
        return isset($this->average_customer_satisfaction_rating);
    }

    public function clearAverageCustomerSatisfactionRating()
    {
        unset($this->average_customer_satisfaction_rating);
    }

    /**
     * The average customer satisfaction rating.
     *
     * Generated from protobuf field <code>optional double average_customer_satisfaction_rating = 8;</code>
     * @param float $var
     * @return $this
     */
    public function setAverageCustomerSatisfactionRating($var)
    {
        GPBUtil::checkDouble($var);
        $this->average_customer_satisfaction_rating = $var;

        return $this;
    }

    /**
     * Average QA normalized score.
     * Will exclude 0's in average calculation.
     *
     * Generated from protobuf field <code>optional double average_qa_normalized_score = 7;</code>
     * @return float
     */
    public function getAverageQaNormalizedScore()
    {
        return isset($this->average_qa_normalized_score) ? $this->average_qa_normalized_score : 0.0;
    }

    public function hasAverageQaNormalizedScore()
    {
        return isset($this->average_qa_normalized_score);
    }

    public function clearAverageQaNormalizedScore()
    {
        unset($this->average_qa_normalized_score);
    }

    /**
     * Average QA normalized score.
     * Will exclude 0's in average calculation.
     *
     * Generated from protobuf field <code>optional double average_qa_normalized_score = 7;</code>
     * @param float $var
     * @return $this
     */
    public function setAverageQaNormalizedScore($var)
    {
        GPBUtil::checkDouble($var);
        $this->average_qa_normalized_score = $var;

        return $this;
    }

    /**
     * Average QA normalized score for all the tags.
     *
     * Generated from protobuf field <code>repeated .google.cloud.contactcenterinsights.v1.QueryMetricsResponse.Slice.DataPoint.ConversationMeasure.QaTagScore qa_tag_scores = 9;</code>
     * @return \Google\Protobuf\Internal\RepeatedField
     */
    public function getQaTagScores()
    {
        return $this->qa_tag_scores;
    }

    /**
     * Average QA normalized score for all the tags.
     *
     * Generated from protobuf field <code>repeated .google.cloud.contactcenterinsights.v1.QueryMetricsResponse.Slice.DataPoint.ConversationMeasure.QaTagScore qa_tag_scores = 9;</code>
     * @param array<\Google\Cloud\ContactCenterInsights\V1\QueryMetricsResponse\Slice\DataPoint\ConversationMeasure\QaTagScore>|\Google\Protobuf\Internal\RepeatedField $var
     * @return $this
     */
    public function setQaTagScores($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::MESSAGE, \Google\Cloud\ContactCenterInsights\V1\QueryMetricsResponse\Slice\DataPoint\ConversationMeasure\QaTagScore::class);
        $this->qa_tag_scores = $arr;

        return $this;
    }

    /**
     * Average QA normalized score averaged for questions averaged across
     * all revisions of the parent scorecard.
     * Will be only populated if the request specifies a dimension of
     * QA_QUESTION_ID.
     *
     * Generated from protobuf field <code>optional double average_qa_question_normalized_score = 10;</code>
     * @return float
     */
    public function getAverageQaQuestionNormalizedScore()
    {
        return isset($this->average_qa_question_normalized_score) ? $this->average_qa_question_normalized_score : 0.0;
    }

    public function hasAverageQaQuestionNormalizedScore()
    {
        return isset($this->average_qa_question_normalized_score);
    }

    public function clearAverageQaQuestionNormalizedScore()
    {
        unset($this->average_qa_question_normalized_score);
    }

    /**
     * Average QA normalized score averaged for questions averaged across
     * all revisions of the parent scorecard.
     * Will be only populated if the request specifies a dimension of
     * QA_QUESTION_ID.
     *
     * Generated from protobuf field <code>optional double average_qa_question_normalized_score = 10;</code>
     * @param float $var
     * @return $this
     */
    public function setAverageQaQuestionNormalizedScore($var)
    {
        GPBUtil::checkDouble($var);
        $this->average_qa_question_normalized_score = $var;

        return $this;
    }

}


