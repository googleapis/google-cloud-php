<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/cloud/policytroubleshooter/iam/v3/troubleshooter.proto

namespace Google\Cloud\PolicyTroubleshooter\Iam\V3;

use UnexpectedValueException;

/**
 * Whether the principal in the request matches the principal in the policy.
 *
 * Protobuf type <code>google.cloud.policytroubleshooter.iam.v3.MembershipMatchingState</code>
 */
class MembershipMatchingState
{
    /**
     * Not specified.
     *
     * Generated from protobuf enum <code>MEMBERSHIP_MATCHING_STATE_UNSPECIFIED = 0;</code>
     */
    const MEMBERSHIP_MATCHING_STATE_UNSPECIFIED = 0;
    /**
     * The principal in the request matches the principal in the policy. The
     * principal can be included directly or indirectly:
     * * A principal is included directly if that principal is listed in the
     *   role binding.
     * * A principal is included indirectly if that principal is in a Google
     *   group, Google Workspace account, or Cloud Identity domain that is listed
     *   in the policy.
     *
     * Generated from protobuf enum <code>MEMBERSHIP_MATCHED = 1;</code>
     */
    const MEMBERSHIP_MATCHED = 1;
    /**
     * The principal in the request doesn't match the principal in the policy.
     *
     * Generated from protobuf enum <code>MEMBERSHIP_NOT_MATCHED = 2;</code>
     */
    const MEMBERSHIP_NOT_MATCHED = 2;
    /**
     * The principal in the policy is a group or domain, and the sender of the
     * request doesn't have permission to view whether the principal in the
     * request is a member of the group or domain.
     *
     * Generated from protobuf enum <code>MEMBERSHIP_UNKNOWN_INFO = 3;</code>
     */
    const MEMBERSHIP_UNKNOWN_INFO = 3;
    /**
     * The principal is an unsupported type.
     *
     * Generated from protobuf enum <code>MEMBERSHIP_UNKNOWN_UNSUPPORTED = 4;</code>
     */
    const MEMBERSHIP_UNKNOWN_UNSUPPORTED = 4;

    private static $valueToName = [
        self::MEMBERSHIP_MATCHING_STATE_UNSPECIFIED => 'MEMBERSHIP_MATCHING_STATE_UNSPECIFIED',
        self::MEMBERSHIP_MATCHED => 'MEMBERSHIP_MATCHED',
        self::MEMBERSHIP_NOT_MATCHED => 'MEMBERSHIP_NOT_MATCHED',
        self::MEMBERSHIP_UNKNOWN_INFO => 'MEMBERSHIP_UNKNOWN_INFO',
        self::MEMBERSHIP_UNKNOWN_UNSUPPORTED => 'MEMBERSHIP_UNKNOWN_UNSUPPORTED',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

