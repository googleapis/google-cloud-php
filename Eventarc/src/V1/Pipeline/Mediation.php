<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/cloud/eventarc/v1/pipeline.proto

namespace Google\Cloud\Eventarc\V1\Pipeline;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Mediation defines different ways to modify the Pipeline.
 *
 * Generated from protobuf message <code>google.cloud.eventarc.v1.Pipeline.Mediation</code>
 */
class Mediation extends \Google\Protobuf\Internal\Message
{
    protected $mediation_descriptor;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type \Google\Cloud\Eventarc\V1\Pipeline\Mediation\Transformation $transformation
     *           Optional. How the Pipeline is to transform messages
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Google\Cloud\Eventarc\V1\Pipeline::initOnce();
        parent::__construct($data);
    }

    /**
     * Optional. How the Pipeline is to transform messages
     *
     * Generated from protobuf field <code>.google.cloud.eventarc.v1.Pipeline.Mediation.Transformation transformation = 1 [(.google.api.field_behavior) = OPTIONAL];</code>
     * @return \Google\Cloud\Eventarc\V1\Pipeline\Mediation\Transformation|null
     */
    public function getTransformation()
    {
        return $this->readOneof(1);
    }

    public function hasTransformation()
    {
        return $this->hasOneof(1);
    }

    /**
     * Optional. How the Pipeline is to transform messages
     *
     * Generated from protobuf field <code>.google.cloud.eventarc.v1.Pipeline.Mediation.Transformation transformation = 1 [(.google.api.field_behavior) = OPTIONAL];</code>
     * @param \Google\Cloud\Eventarc\V1\Pipeline\Mediation\Transformation $var
     * @return $this
     */
    public function setTransformation($var)
    {
        GPBUtil::checkMessage($var, \Google\Cloud\Eventarc\V1\Pipeline\Mediation\Transformation::class);
        $this->writeOneof(1, $var);

        return $this;
    }

    /**
     * @return string
     */
    public function getMediationDescriptor()
    {
        return $this->whichOneof("mediation_descriptor");
    }

}


