<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/cloud/channel/v1/entitlement_changes.proto

namespace Google\Cloud\Channel\V1\EntitlementChange;

use UnexpectedValueException;

/**
 * Cancellation reason for the entitlement
 *
 * Protobuf type <code>google.cloud.channel.v1.EntitlementChange.CancellationReason</code>
 */
class CancellationReason
{
    /**
     * Not used.
     *
     * Generated from protobuf enum <code>CANCELLATION_REASON_UNSPECIFIED = 0;</code>
     */
    const CANCELLATION_REASON_UNSPECIFIED = 0;
    /**
     * Reseller triggered a cancellation of the service.
     *
     * Generated from protobuf enum <code>SERVICE_TERMINATED = 1;</code>
     */
    const SERVICE_TERMINATED = 1;
    /**
     * Relationship between the reseller and customer has ended due to a
     * transfer.
     *
     * Generated from protobuf enum <code>RELATIONSHIP_ENDED = 2;</code>
     */
    const RELATIONSHIP_ENDED = 2;
    /**
     * Entitlement transferred away from reseller while still keeping other
     * entitlement(s) with the reseller.
     *
     * Generated from protobuf enum <code>PARTIAL_TRANSFER = 3;</code>
     */
    const PARTIAL_TRANSFER = 3;

    private static $valueToName = [
        self::CANCELLATION_REASON_UNSPECIFIED => 'CANCELLATION_REASON_UNSPECIFIED',
        self::SERVICE_TERMINATED => 'SERVICE_TERMINATED',
        self::RELATIONSHIP_ENDED => 'RELATIONSHIP_ENDED',
        self::PARTIAL_TRANSFER => 'PARTIAL_TRANSFER',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}


