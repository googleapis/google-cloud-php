<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/cloud/channel/v1/customers.proto

namespace Google\Cloud\Channel\V1\Customer;

use UnexpectedValueException;

/**
 * The enum represents whether a customer belongs to public sector
 *
 * Protobuf type <code>google.cloud.channel.v1.Customer.CustomerAttestationState</code>
 */
class CustomerAttestationState
{
    /**
     * Default value if not set yet
     *
     * Generated from protobuf enum <code>CUSTOMER_ATTESTATION_STATE_UNSPECIFIED = 0;</code>
     */
    const CUSTOMER_ATTESTATION_STATE_UNSPECIFIED = 0;
    /**
     * Customer is exempt from attesting based on exemption list at
     * https://cloud.google.com/terms/direct-tos-exemptions. Contact information
     * of customer will be mandatory.
     *
     * Generated from protobuf enum <code>EXEMPT = 1;</code>
     */
    const EXEMPT = 1;
    /**
     * Customer is not exempt and has verified the information provided is
     * correct. Contact information of customer will be mandatory.
     *
     * Generated from protobuf enum <code>NON_EXEMPT_AND_INFO_VERIFIED = 2;</code>
     */
    const NON_EXEMPT_AND_INFO_VERIFIED = 2;

    private static $valueToName = [
        self::CUSTOMER_ATTESTATION_STATE_UNSPECIFIED => 'CUSTOMER_ATTESTATION_STATE_UNSPECIFIED',
        self::EXEMPT => 'EXEMPT',
        self::NON_EXEMPT_AND_INFO_VERIFIED => 'NON_EXEMPT_AND_INFO_VERIFIED',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}


