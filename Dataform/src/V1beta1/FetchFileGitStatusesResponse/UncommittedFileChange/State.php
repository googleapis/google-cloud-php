<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/cloud/dataform/v1beta1/dataform.proto

namespace Google\Cloud\Dataform\V1beta1\FetchFileGitStatusesResponse\UncommittedFileChange;

use UnexpectedValueException;

/**
 * Indicates the status of an uncommitted file change.
 *
 * Protobuf type <code>google.cloud.dataform.v1beta1.FetchFileGitStatusesResponse.UncommittedFileChange.State</code>
 */
class State
{
    /**
     * Default value. This value is unused.
     *
     * Generated from protobuf enum <code>STATE_UNSPECIFIED = 0;</code>
     */
    const STATE_UNSPECIFIED = 0;
    /**
     * The file has been newly added.
     *
     * Generated from protobuf enum <code>ADDED = 1;</code>
     */
    const ADDED = 1;
    /**
     * The file has been deleted.
     *
     * Generated from protobuf enum <code>DELETED = 2;</code>
     */
    const DELETED = 2;
    /**
     * The file has been modified.
     *
     * Generated from protobuf enum <code>MODIFIED = 3;</code>
     */
    const MODIFIED = 3;
    /**
     * The file contains merge conflicts.
     *
     * Generated from protobuf enum <code>HAS_CONFLICTS = 4;</code>
     */
    const HAS_CONFLICTS = 4;

    private static $valueToName = [
        self::STATE_UNSPECIFIED => 'STATE_UNSPECIFIED',
        self::ADDED => 'ADDED',
        self::DELETED => 'DELETED',
        self::MODIFIED => 'MODIFIED',
        self::HAS_CONFLICTS => 'HAS_CONFLICTS',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}


