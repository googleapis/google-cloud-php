<?php
/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * GENERATED CODE WARNING
 * Generated by gapic-generator-php from the file
 * https://github.com/googleapis/googleapis/blob/master/google/cloud/recaptchaenterprise/v1/recaptchaenterprise.proto
 * Updates to the above are reflected here through a refresh process.
 */

namespace Google\Cloud\RecaptchaEnterprise\V1\Gapic;

use Google\ApiCore\ApiException;
use Google\ApiCore\CredentialsWrapper;
use Google\ApiCore\GapicClientTrait;
use Google\ApiCore\PathTemplate;
use Google\ApiCore\RequestParamsHeaderDescriptor;
use Google\ApiCore\RetrySettings;
use Google\ApiCore\Transport\TransportInterface;
use Google\ApiCore\ValidationException;
use Google\Auth\FetchAuthTokenInterface;
use Google\Cloud\RecaptchaEnterprise\V1\AnnotateAssessmentRequest;
use Google\Cloud\RecaptchaEnterprise\V1\AnnotateAssessmentRequest\Annotation;
use Google\Cloud\RecaptchaEnterprise\V1\AnnotateAssessmentResponse;
use Google\Cloud\RecaptchaEnterprise\V1\Assessment;
use Google\Cloud\RecaptchaEnterprise\V1\CreateAssessmentRequest;
use Google\Cloud\RecaptchaEnterprise\V1\CreateFirewallPolicyRequest;
use Google\Cloud\RecaptchaEnterprise\V1\CreateKeyRequest;
use Google\Cloud\RecaptchaEnterprise\V1\DeleteFirewallPolicyRequest;
use Google\Cloud\RecaptchaEnterprise\V1\DeleteKeyRequest;
use Google\Cloud\RecaptchaEnterprise\V1\FirewallPolicy;
use Google\Cloud\RecaptchaEnterprise\V1\GetFirewallPolicyRequest;
use Google\Cloud\RecaptchaEnterprise\V1\GetKeyRequest;
use Google\Cloud\RecaptchaEnterprise\V1\GetMetricsRequest;
use Google\Cloud\RecaptchaEnterprise\V1\Key;
use Google\Cloud\RecaptchaEnterprise\V1\ListFirewallPoliciesRequest;
use Google\Cloud\RecaptchaEnterprise\V1\ListFirewallPoliciesResponse;
use Google\Cloud\RecaptchaEnterprise\V1\ListKeysRequest;
use Google\Cloud\RecaptchaEnterprise\V1\ListKeysResponse;
use Google\Cloud\RecaptchaEnterprise\V1\ListRelatedAccountGroupMembershipsRequest;
use Google\Cloud\RecaptchaEnterprise\V1\ListRelatedAccountGroupMembershipsResponse;
use Google\Cloud\RecaptchaEnterprise\V1\ListRelatedAccountGroupsRequest;
use Google\Cloud\RecaptchaEnterprise\V1\ListRelatedAccountGroupsResponse;
use Google\Cloud\RecaptchaEnterprise\V1\Metrics;
use Google\Cloud\RecaptchaEnterprise\V1\MigrateKeyRequest;
use Google\Cloud\RecaptchaEnterprise\V1\RetrieveLegacySecretKeyRequest;
use Google\Cloud\RecaptchaEnterprise\V1\RetrieveLegacySecretKeyResponse;
use Google\Cloud\RecaptchaEnterprise\V1\SearchRelatedAccountGroupMembershipsRequest;
use Google\Cloud\RecaptchaEnterprise\V1\SearchRelatedAccountGroupMembershipsResponse;
use Google\Cloud\RecaptchaEnterprise\V1\TransactionEvent;
use Google\Cloud\RecaptchaEnterprise\V1\UpdateFirewallPolicyRequest;
use Google\Cloud\RecaptchaEnterprise\V1\UpdateKeyRequest;
use Google\Protobuf\FieldMask;
use Google\Protobuf\GPBEmpty;

/**
 * Service Description: Service to determine the likelihood an event is legitimate.
 *
 * This class provides the ability to make remote calls to the backing service through method
 * calls that map to API methods. Sample code to get started:
 *
 * ```
 * $recaptchaEnterpriseServiceClient = new RecaptchaEnterpriseServiceClient();
 * try {
 *     $annotation = Annotation::ANNOTATION_UNSPECIFIED;
 *     $response = $recaptchaEnterpriseServiceClient->annotateAssessment($annotation);
 * } finally {
 *     $recaptchaEnterpriseServiceClient->close();
 * }
 * ```
 *
 * Many parameters require resource names to be formatted in a particular way. To
 * assist with these names, this class includes a format method for each type of
 * name, and additionally a parseName method to extract the individual identifiers
 * contained within formatted names that are returned by the API.
 *
 * @deprecated Please use the new service client {@see \Google\Cloud\RecaptchaEnterprise\V1\Client\RecaptchaEnterpriseServiceClient}.
 */
class RecaptchaEnterpriseServiceGapicClient
{
    use GapicClientTrait;

    /** The name of the service. */
    const SERVICE_NAME = 'google.cloud.recaptchaenterprise.v1.RecaptchaEnterpriseService';

    /**
     * The default address of the service.
     *
     * @deprecated SERVICE_ADDRESS_TEMPLATE should be used instead.
     */
    const SERVICE_ADDRESS = 'recaptchaenterprise.googleapis.com';

    /** The address template of the service. */
    private const SERVICE_ADDRESS_TEMPLATE = 'recaptchaenterprise.UNIVERSE_DOMAIN';

    /** The default port of the service. */
    const DEFAULT_SERVICE_PORT = 443;

    /** The name of the code generator, to be included in the agent header. */
    const CODEGEN_NAME = 'gapic';

    /** The default scopes required by the service. */
    public static $serviceScopes = [
        'https://www.googleapis.com/auth/cloud-platform',
    ];

    private static $assessmentNameTemplate;

    private static $firewallPolicyNameTemplate;

    private static $keyNameTemplate;

    private static $metricsNameTemplate;

    private static $projectNameTemplate;

    private static $relatedAccountGroupNameTemplate;

    private static $pathTemplateMap;

    private static function getClientDefaults()
    {
        return [
            'serviceName' => self::SERVICE_NAME,
            'apiEndpoint' =>
                self::SERVICE_ADDRESS . ':' . self::DEFAULT_SERVICE_PORT,
            'clientConfig' =>
                __DIR__ .
                '/../resources/recaptcha_enterprise_service_client_config.json',
            'descriptorsConfigPath' =>
                __DIR__ .
                '/../resources/recaptcha_enterprise_service_descriptor_config.php',
            'gcpApiConfigPath' =>
                __DIR__ .
                '/../resources/recaptcha_enterprise_service_grpc_config.json',
            'credentialsConfig' => [
                'defaultScopes' => self::$serviceScopes,
            ],
            'transportConfig' => [
                'rest' => [
                    'restClientConfigPath' =>
                        __DIR__ .
                        '/../resources/recaptcha_enterprise_service_rest_client_config.php',
                ],
            ],
        ];
    }

    private static function getAssessmentNameTemplate()
    {
        if (self::$assessmentNameTemplate == null) {
            self::$assessmentNameTemplate = new PathTemplate(
                'projects/{project}/assessments/{assessment}'
            );
        }

        return self::$assessmentNameTemplate;
    }

    private static function getFirewallPolicyNameTemplate()
    {
        if (self::$firewallPolicyNameTemplate == null) {
            self::$firewallPolicyNameTemplate = new PathTemplate(
                'projects/{project}/firewallpolicies/{firewallpolicy}'
            );
        }

        return self::$firewallPolicyNameTemplate;
    }

    private static function getKeyNameTemplate()
    {
        if (self::$keyNameTemplate == null) {
            self::$keyNameTemplate = new PathTemplate(
                'projects/{project}/keys/{key}'
            );
        }

        return self::$keyNameTemplate;
    }

    private static function getMetricsNameTemplate()
    {
        if (self::$metricsNameTemplate == null) {
            self::$metricsNameTemplate = new PathTemplate(
                'projects/{project}/keys/{key}/metrics'
            );
        }

        return self::$metricsNameTemplate;
    }

    private static function getProjectNameTemplate()
    {
        if (self::$projectNameTemplate == null) {
            self::$projectNameTemplate = new PathTemplate('projects/{project}');
        }

        return self::$projectNameTemplate;
    }

    private static function getRelatedAccountGroupNameTemplate()
    {
        if (self::$relatedAccountGroupNameTemplate == null) {
            self::$relatedAccountGroupNameTemplate = new PathTemplate(
                'projects/{project}/relatedaccountgroups/{relatedaccountgroup}'
            );
        }

        return self::$relatedAccountGroupNameTemplate;
    }

    private static function getPathTemplateMap()
    {
        if (self::$pathTemplateMap == null) {
            self::$pathTemplateMap = [
                'assessment' => self::getAssessmentNameTemplate(),
                'firewallPolicy' => self::getFirewallPolicyNameTemplate(),
                'key' => self::getKeyNameTemplate(),
                'metrics' => self::getMetricsNameTemplate(),
                'project' => self::getProjectNameTemplate(),
                'relatedAccountGroup' => self::getRelatedAccountGroupNameTemplate(),
            ];
        }

        return self::$pathTemplateMap;
    }

    /**
     * Formats a string containing the fully-qualified path to represent a assessment
     * resource.
     *
     * @param string $project
     * @param string $assessment
     *
     * @return string The formatted assessment resource.
     */
    public static function assessmentName($project, $assessment)
    {
        return self::getAssessmentNameTemplate()->render([
            'project' => $project,
            'assessment' => $assessment,
        ]);
    }

    /**
     * Formats a string containing the fully-qualified path to represent a
     * firewall_policy resource.
     *
     * @param string $project
     * @param string $firewallpolicy
     *
     * @return string The formatted firewall_policy resource.
     */
    public static function firewallPolicyName($project, $firewallpolicy)
    {
        return self::getFirewallPolicyNameTemplate()->render([
            'project' => $project,
            'firewallpolicy' => $firewallpolicy,
        ]);
    }

    /**
     * Formats a string containing the fully-qualified path to represent a key
     * resource.
     *
     * @param string $project
     * @param string $key
     *
     * @return string The formatted key resource.
     */
    public static function keyName($project, $key)
    {
        return self::getKeyNameTemplate()->render([
            'project' => $project,
            'key' => $key,
        ]);
    }

    /**
     * Formats a string containing the fully-qualified path to represent a metrics
     * resource.
     *
     * @param string $project
     * @param string $key
     *
     * @return string The formatted metrics resource.
     */
    public static function metricsName($project, $key)
    {
        return self::getMetricsNameTemplate()->render([
            'project' => $project,
            'key' => $key,
        ]);
    }

    /**
     * Formats a string containing the fully-qualified path to represent a project
     * resource.
     *
     * @param string $project
     *
     * @return string The formatted project resource.
     */
    public static function projectName($project)
    {
        return self::getProjectNameTemplate()->render([
            'project' => $project,
        ]);
    }

    /**
     * Formats a string containing the fully-qualified path to represent a
     * related_account_group resource.
     *
     * @param string $project
     * @param string $relatedaccountgroup
     *
     * @return string The formatted related_account_group resource.
     */
    public static function relatedAccountGroupName(
        $project,
        $relatedaccountgroup
    ) {
        return self::getRelatedAccountGroupNameTemplate()->render([
            'project' => $project,
            'relatedaccountgroup' => $relatedaccountgroup,
        ]);
    }

    /**
     * Parses a formatted name string and returns an associative array of the components in the name.
     * The following name formats are supported:
     * Template: Pattern
     * - assessment: projects/{project}/assessments/{assessment}
     * - firewallPolicy: projects/{project}/firewallpolicies/{firewallpolicy}
     * - key: projects/{project}/keys/{key}
     * - metrics: projects/{project}/keys/{key}/metrics
     * - project: projects/{project}
     * - relatedAccountGroup: projects/{project}/relatedaccountgroups/{relatedaccountgroup}
     *
     * The optional $template argument can be supplied to specify a particular pattern,
     * and must match one of the templates listed above. If no $template argument is
     * provided, or if the $template argument does not match one of the templates
     * listed, then parseName will check each of the supported templates, and return
     * the first match.
     *
     * @param string $formattedName The formatted name string
     * @param string $template      Optional name of template to match
     *
     * @return array An associative array from name component IDs to component values.
     *
     * @throws ValidationException If $formattedName could not be matched.
     */
    public static function parseName($formattedName, $template = null)
    {
        $templateMap = self::getPathTemplateMap();
        if ($template) {
            if (!isset($templateMap[$template])) {
                throw new ValidationException(
                    "Template name $template does not exist"
                );
            }

            return $templateMap[$template]->match($formattedName);
        }

        foreach ($templateMap as $templateName => $pathTemplate) {
            try {
                return $pathTemplate->match($formattedName);
            } catch (ValidationException $ex) {
                // Swallow the exception to continue trying other path templates
            }
        }

        throw new ValidationException(
            "Input did not match any known format. Input: $formattedName"
        );
    }

    /**
     * Constructor.
     *
     * @param array $options {
     *     Optional. Options for configuring the service API wrapper.
     *
     *     @type string $apiEndpoint
     *           The address of the API remote host. May optionally include the port, formatted
     *           as "<uri>:<port>". Default 'recaptchaenterprise.googleapis.com:443'.
     *     @type string|array|FetchAuthTokenInterface|CredentialsWrapper $credentials
     *           The credentials to be used by the client to authorize API calls. This option
     *           accepts either a path to a credentials file, or a decoded credentials file as a
     *           PHP array.
     *           *Advanced usage*: In addition, this option can also accept a pre-constructed
     *           {@see \Google\Auth\FetchAuthTokenInterface} object or
     *           {@see \Google\ApiCore\CredentialsWrapper} object. Note that when one of these
     *           objects are provided, any settings in $credentialsConfig will be ignored.
     *     @type array $credentialsConfig
     *           Options used to configure credentials, including auth token caching, for the
     *           client. For a full list of supporting configuration options, see
     *           {@see \Google\ApiCore\CredentialsWrapper::build()} .
     *     @type bool $disableRetries
     *           Determines whether or not retries defined by the client configuration should be
     *           disabled. Defaults to `false`.
     *     @type string|array $clientConfig
     *           Client method configuration, including retry settings. This option can be either
     *           a path to a JSON file, or a PHP array containing the decoded JSON data. By
     *           default this settings points to the default client config file, which is
     *           provided in the resources folder.
     *     @type string|TransportInterface $transport
     *           The transport used for executing network requests. May be either the string
     *           `rest` or `grpc`. Defaults to `grpc` if gRPC support is detected on the system.
     *           *Advanced usage*: Additionally, it is possible to pass in an already
     *           instantiated {@see \Google\ApiCore\Transport\TransportInterface} object. Note
     *           that when this object is provided, any settings in $transportConfig, and any
     *           $apiEndpoint setting, will be ignored.
     *     @type array $transportConfig
     *           Configuration options that will be used to construct the transport. Options for
     *           each supported transport type should be passed in a key for that transport. For
     *           example:
     *           $transportConfig = [
     *               'grpc' => [...],
     *               'rest' => [...],
     *           ];
     *           See the {@see \Google\ApiCore\Transport\GrpcTransport::build()} and
     *           {@see \Google\ApiCore\Transport\RestTransport::build()} methods for the
     *           supported options.
     *     @type callable $clientCertSource
     *           A callable which returns the client cert as a string. This can be used to
     *           provide a certificate and private key to the transport layer for mTLS.
     * }
     *
     * @throws ValidationException
     */
    public function __construct(array $options = [])
    {
        $clientOptions = $this->buildClientOptions($options);
        $this->setClientOptions($clientOptions);
    }

    /**
     * Annotates a previously created Assessment to provide additional information
     * on whether the event turned out to be authentic or fraudulent.
     *
     * Sample code:
     * ```
     * $recaptchaEnterpriseServiceClient = new RecaptchaEnterpriseServiceClient();
     * try {
     *     $annotation = Annotation::ANNOTATION_UNSPECIFIED;
     *     $response = $recaptchaEnterpriseServiceClient->annotateAssessment($annotation);
     * } finally {
     *     $recaptchaEnterpriseServiceClient->close();
     * }
     * ```
     *
     * @param int   $annotation   Optional. The annotation that will be assigned to the Event. This field can
     *                            be left empty to provide reasons that apply to an event without concluding
     *                            whether the event is legitimate or fraudulent.
     *                            For allowed values, use constants defined on {@see \Google\Cloud\RecaptchaEnterprise\V1\AnnotateAssessmentRequest\Annotation}
     * @param array $optionalArgs {
     *     Optional.
     *
     *     @type string $name
     *           Required. The resource name of the Assessment, in the format
     *           `projects/{project}/assessments/{assessment}`.
     *     @type int[] $reasons
     *           Optional. Reasons for the annotation that are assigned to the event.
     *           For allowed values, use constants defined on {@see \Google\Cloud\RecaptchaEnterprise\V1\AnnotateAssessmentRequest\Reason}
     *     @type string $accountId
     *           Optional. A stable account identifier to apply to the assessment. This is
     *           an alternative to setting `account_id` in `CreateAssessment`, for example
     *           when a stable account identifier is not yet known in the initial request.
     *     @type string $hashedAccountId
     *           Optional. A stable hashed account identifier to apply to the assessment.
     *           This is an alternative to setting `hashed_account_id` in
     *           `CreateAssessment`, for example when a stable account identifier is not yet
     *           known in the initial request.
     *     @type TransactionEvent $transactionEvent
     *           Optional. If the assessment is part of a payment transaction, provide
     *           details on payment lifecycle events that occur in the transaction.
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return \Google\Cloud\RecaptchaEnterprise\V1\AnnotateAssessmentResponse
     *
     * @throws ApiException if the remote call fails
     */
    public function annotateAssessment($annotation, array $optionalArgs = [])
    {
        $request = new AnnotateAssessmentRequest();
        $requestParamHeaders = [];
        $request->setAnnotation($annotation);
        if (isset($optionalArgs['name'])) {
            $request->setName($optionalArgs['name']);
            $requestParamHeaders['name'] = $optionalArgs['name'];
        }

        if (isset($optionalArgs['reasons'])) {
            $request->setReasons($optionalArgs['reasons']);
        }

        if (isset($optionalArgs['accountId'])) {
            $request->setAccountId($optionalArgs['accountId']);
        }

        if (isset($optionalArgs['hashedAccountId'])) {
            $request->setHashedAccountId($optionalArgs['hashedAccountId']);
        }

        if (isset($optionalArgs['transactionEvent'])) {
            $request->setTransactionEvent($optionalArgs['transactionEvent']);
        }

        $requestParams = new RequestParamsHeaderDescriptor(
            $requestParamHeaders
        );
        $optionalArgs['headers'] = isset($optionalArgs['headers'])
            ? array_merge($requestParams->getHeader(), $optionalArgs['headers'])
            : $requestParams->getHeader();
        return $this->startCall(
            'AnnotateAssessment',
            AnnotateAssessmentResponse::class,
            $optionalArgs,
            $request
        )->wait();
    }

    /**
     * Creates an Assessment of the likelihood an event is legitimate.
     *
     * Sample code:
     * ```
     * $recaptchaEnterpriseServiceClient = new RecaptchaEnterpriseServiceClient();
     * try {
     *     $response = $recaptchaEnterpriseServiceClient->createAssessment();
     * } finally {
     *     $recaptchaEnterpriseServiceClient->close();
     * }
     * ```
     *
     * @param array $optionalArgs {
     *     Optional.
     *
     *     @type string $parent
     *           Required. The name of the project in which the assessment will be created,
     *           in the format `projects/{project}`.
     *     @type Assessment $assessment
     *           Required. The assessment details.
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return \Google\Cloud\RecaptchaEnterprise\V1\Assessment
     *
     * @throws ApiException if the remote call fails
     */
    public function createAssessment(array $optionalArgs = [])
    {
        $request = new CreateAssessmentRequest();
        $requestParamHeaders = [];
        if (isset($optionalArgs['parent'])) {
            $request->setParent($optionalArgs['parent']);
            $requestParamHeaders['parent'] = $optionalArgs['parent'];
        }

        if (isset($optionalArgs['assessment'])) {
            $request->setAssessment($optionalArgs['assessment']);
        }

        $requestParams = new RequestParamsHeaderDescriptor(
            $requestParamHeaders
        );
        $optionalArgs['headers'] = isset($optionalArgs['headers'])
            ? array_merge($requestParams->getHeader(), $optionalArgs['headers'])
            : $requestParams->getHeader();
        return $this->startCall(
            'CreateAssessment',
            Assessment::class,
            $optionalArgs,
            $request
        )->wait();
    }

    /**
     * Creates a new FirewallPolicy, specifying conditions at which reCAPTCHA
     * Enterprise actions can be executed.
     * A project may have a maximum of 1000 policies.
     *
     * Sample code:
     * ```
     * $recaptchaEnterpriseServiceClient = new RecaptchaEnterpriseServiceClient();
     * try {
     *     $response = $recaptchaEnterpriseServiceClient->createFirewallPolicy();
     * } finally {
     *     $recaptchaEnterpriseServiceClient->close();
     * }
     * ```
     *
     * @param array $optionalArgs {
     *     Optional.
     *
     *     @type string $parent
     *           Required. The name of the project this policy will apply to, in the format
     *           `projects/{project}`.
     *     @type FirewallPolicy $firewallPolicy
     *           Required. Information to create the policy.
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return \Google\Cloud\RecaptchaEnterprise\V1\FirewallPolicy
     *
     * @throws ApiException if the remote call fails
     */
    public function createFirewallPolicy(array $optionalArgs = [])
    {
        $request = new CreateFirewallPolicyRequest();
        $requestParamHeaders = [];
        if (isset($optionalArgs['parent'])) {
            $request->setParent($optionalArgs['parent']);
            $requestParamHeaders['parent'] = $optionalArgs['parent'];
        }

        if (isset($optionalArgs['firewallPolicy'])) {
            $request->setFirewallPolicy($optionalArgs['firewallPolicy']);
        }

        $requestParams = new RequestParamsHeaderDescriptor(
            $requestParamHeaders
        );
        $optionalArgs['headers'] = isset($optionalArgs['headers'])
            ? array_merge($requestParams->getHeader(), $optionalArgs['headers'])
            : $requestParams->getHeader();
        return $this->startCall(
            'CreateFirewallPolicy',
            FirewallPolicy::class,
            $optionalArgs,
            $request
        )->wait();
    }

    /**
     * Creates a new reCAPTCHA Enterprise key.
     *
     * Sample code:
     * ```
     * $recaptchaEnterpriseServiceClient = new RecaptchaEnterpriseServiceClient();
     * try {
     *     $response = $recaptchaEnterpriseServiceClient->createKey();
     * } finally {
     *     $recaptchaEnterpriseServiceClient->close();
     * }
     * ```
     *
     * @param array $optionalArgs {
     *     Optional.
     *
     *     @type string $parent
     *           Required. The name of the project in which the key will be created, in the
     *           format `projects/{project}`.
     *     @type Key $key
     *           Required. Information to create a reCAPTCHA Enterprise key.
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return \Google\Cloud\RecaptchaEnterprise\V1\Key
     *
     * @throws ApiException if the remote call fails
     */
    public function createKey(array $optionalArgs = [])
    {
        $request = new CreateKeyRequest();
        $requestParamHeaders = [];
        if (isset($optionalArgs['parent'])) {
            $request->setParent($optionalArgs['parent']);
            $requestParamHeaders['parent'] = $optionalArgs['parent'];
        }

        if (isset($optionalArgs['key'])) {
            $request->setKey($optionalArgs['key']);
        }

        $requestParams = new RequestParamsHeaderDescriptor(
            $requestParamHeaders
        );
        $optionalArgs['headers'] = isset($optionalArgs['headers'])
            ? array_merge($requestParams->getHeader(), $optionalArgs['headers'])
            : $requestParams->getHeader();
        return $this->startCall(
            'CreateKey',
            Key::class,
            $optionalArgs,
            $request
        )->wait();
    }

    /**
     * Deletes the specified firewall policy.
     *
     * Sample code:
     * ```
     * $recaptchaEnterpriseServiceClient = new RecaptchaEnterpriseServiceClient();
     * try {
     *     $recaptchaEnterpriseServiceClient->deleteFirewallPolicy();
     * } finally {
     *     $recaptchaEnterpriseServiceClient->close();
     * }
     * ```
     *
     * @param array $optionalArgs {
     *     Optional.
     *
     *     @type string $name
     *           Required. The name of the policy to be deleted, in the format
     *           `projects/{project}/firewallpolicies/{firewallpolicy}`.
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @throws ApiException if the remote call fails
     */
    public function deleteFirewallPolicy(array $optionalArgs = [])
    {
        $request = new DeleteFirewallPolicyRequest();
        $requestParamHeaders = [];
        if (isset($optionalArgs['name'])) {
            $request->setName($optionalArgs['name']);
            $requestParamHeaders['name'] = $optionalArgs['name'];
        }

        $requestParams = new RequestParamsHeaderDescriptor(
            $requestParamHeaders
        );
        $optionalArgs['headers'] = isset($optionalArgs['headers'])
            ? array_merge($requestParams->getHeader(), $optionalArgs['headers'])
            : $requestParams->getHeader();
        return $this->startCall(
            'DeleteFirewallPolicy',
            GPBEmpty::class,
            $optionalArgs,
            $request
        )->wait();
    }

    /**
     * Deletes the specified key.
     *
     * Sample code:
     * ```
     * $recaptchaEnterpriseServiceClient = new RecaptchaEnterpriseServiceClient();
     * try {
     *     $recaptchaEnterpriseServiceClient->deleteKey();
     * } finally {
     *     $recaptchaEnterpriseServiceClient->close();
     * }
     * ```
     *
     * @param array $optionalArgs {
     *     Optional.
     *
     *     @type string $name
     *           Required. The name of the key to be deleted, in the format
     *           `projects/{project}/keys/{key}`.
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @throws ApiException if the remote call fails
     */
    public function deleteKey(array $optionalArgs = [])
    {
        $request = new DeleteKeyRequest();
        $requestParamHeaders = [];
        if (isset($optionalArgs['name'])) {
            $request->setName($optionalArgs['name']);
            $requestParamHeaders['name'] = $optionalArgs['name'];
        }

        $requestParams = new RequestParamsHeaderDescriptor(
            $requestParamHeaders
        );
        $optionalArgs['headers'] = isset($optionalArgs['headers'])
            ? array_merge($requestParams->getHeader(), $optionalArgs['headers'])
            : $requestParams->getHeader();
        return $this->startCall(
            'DeleteKey',
            GPBEmpty::class,
            $optionalArgs,
            $request
        )->wait();
    }

    /**
     * Returns the specified firewall policy.
     *
     * Sample code:
     * ```
     * $recaptchaEnterpriseServiceClient = new RecaptchaEnterpriseServiceClient();
     * try {
     *     $response = $recaptchaEnterpriseServiceClient->getFirewallPolicy();
     * } finally {
     *     $recaptchaEnterpriseServiceClient->close();
     * }
     * ```
     *
     * @param array $optionalArgs {
     *     Optional.
     *
     *     @type string $name
     *           Required. The name of the requested policy, in the format
     *           `projects/{project}/firewallpolicies/{firewallpolicy}`.
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return \Google\Cloud\RecaptchaEnterprise\V1\FirewallPolicy
     *
     * @throws ApiException if the remote call fails
     */
    public function getFirewallPolicy(array $optionalArgs = [])
    {
        $request = new GetFirewallPolicyRequest();
        $requestParamHeaders = [];
        if (isset($optionalArgs['name'])) {
            $request->setName($optionalArgs['name']);
            $requestParamHeaders['name'] = $optionalArgs['name'];
        }

        $requestParams = new RequestParamsHeaderDescriptor(
            $requestParamHeaders
        );
        $optionalArgs['headers'] = isset($optionalArgs['headers'])
            ? array_merge($requestParams->getHeader(), $optionalArgs['headers'])
            : $requestParams->getHeader();
        return $this->startCall(
            'GetFirewallPolicy',
            FirewallPolicy::class,
            $optionalArgs,
            $request
        )->wait();
    }

    /**
     * Returns the specified key.
     *
     * Sample code:
     * ```
     * $recaptchaEnterpriseServiceClient = new RecaptchaEnterpriseServiceClient();
     * try {
     *     $response = $recaptchaEnterpriseServiceClient->getKey();
     * } finally {
     *     $recaptchaEnterpriseServiceClient->close();
     * }
     * ```
     *
     * @param array $optionalArgs {
     *     Optional.
     *
     *     @type string $name
     *           Required. The name of the requested key, in the format
     *           `projects/{project}/keys/{key}`.
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return \Google\Cloud\RecaptchaEnterprise\V1\Key
     *
     * @throws ApiException if the remote call fails
     */
    public function getKey(array $optionalArgs = [])
    {
        $request = new GetKeyRequest();
        $requestParamHeaders = [];
        if (isset($optionalArgs['name'])) {
            $request->setName($optionalArgs['name']);
            $requestParamHeaders['name'] = $optionalArgs['name'];
        }

        $requestParams = new RequestParamsHeaderDescriptor(
            $requestParamHeaders
        );
        $optionalArgs['headers'] = isset($optionalArgs['headers'])
            ? array_merge($requestParams->getHeader(), $optionalArgs['headers'])
            : $requestParams->getHeader();
        return $this->startCall(
            'GetKey',
            Key::class,
            $optionalArgs,
            $request
        )->wait();
    }

    /**
     * Get some aggregated metrics for a Key. This data can be used to build
     * dashboards.
     *
     * Sample code:
     * ```
     * $recaptchaEnterpriseServiceClient = new RecaptchaEnterpriseServiceClient();
     * try {
     *     $response = $recaptchaEnterpriseServiceClient->getMetrics();
     * } finally {
     *     $recaptchaEnterpriseServiceClient->close();
     * }
     * ```
     *
     * @param array $optionalArgs {
     *     Optional.
     *
     *     @type string $name
     *           Required. The name of the requested metrics, in the format
     *           `projects/{project}/keys/{key}/metrics`.
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return \Google\Cloud\RecaptchaEnterprise\V1\Metrics
     *
     * @throws ApiException if the remote call fails
     */
    public function getMetrics(array $optionalArgs = [])
    {
        $request = new GetMetricsRequest();
        $requestParamHeaders = [];
        if (isset($optionalArgs['name'])) {
            $request->setName($optionalArgs['name']);
            $requestParamHeaders['name'] = $optionalArgs['name'];
        }

        $requestParams = new RequestParamsHeaderDescriptor(
            $requestParamHeaders
        );
        $optionalArgs['headers'] = isset($optionalArgs['headers'])
            ? array_merge($requestParams->getHeader(), $optionalArgs['headers'])
            : $requestParams->getHeader();
        return $this->startCall(
            'GetMetrics',
            Metrics::class,
            $optionalArgs,
            $request
        )->wait();
    }

    /**
     * Returns the list of all firewall policies that belong to a project.
     *
     * Sample code:
     * ```
     * $recaptchaEnterpriseServiceClient = new RecaptchaEnterpriseServiceClient();
     * try {
     *     // Iterate over pages of elements
     *     $pagedResponse = $recaptchaEnterpriseServiceClient->listFirewallPolicies();
     *     foreach ($pagedResponse->iteratePages() as $page) {
     *         foreach ($page as $element) {
     *             // doSomethingWith($element);
     *         }
     *     }
     *     // Alternatively:
     *     // Iterate through all elements
     *     $pagedResponse = $recaptchaEnterpriseServiceClient->listFirewallPolicies();
     *     foreach ($pagedResponse->iterateAllElements() as $element) {
     *         // doSomethingWith($element);
     *     }
     * } finally {
     *     $recaptchaEnterpriseServiceClient->close();
     * }
     * ```
     *
     * @param array $optionalArgs {
     *     Optional.
     *
     *     @type string $parent
     *           Required. The name of the project to list the policies for, in the format
     *           `projects/{project}`.
     *     @type int $pageSize
     *           The maximum number of resources contained in the underlying API
     *           response. The API may return fewer values in a page, even if
     *           there are additional values to be retrieved.
     *     @type string $pageToken
     *           A page token is used to specify a page of values to be returned.
     *           If no page token is specified (the default), the first page
     *           of values will be returned. Any page token used here must have
     *           been generated by a previous call to the API.
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return \Google\ApiCore\PagedListResponse
     *
     * @throws ApiException if the remote call fails
     */
    public function listFirewallPolicies(array $optionalArgs = [])
    {
        $request = new ListFirewallPoliciesRequest();
        $requestParamHeaders = [];
        if (isset($optionalArgs['parent'])) {
            $request->setParent($optionalArgs['parent']);
            $requestParamHeaders['parent'] = $optionalArgs['parent'];
        }

        if (isset($optionalArgs['pageSize'])) {
            $request->setPageSize($optionalArgs['pageSize']);
        }

        if (isset($optionalArgs['pageToken'])) {
            $request->setPageToken($optionalArgs['pageToken']);
        }

        $requestParams = new RequestParamsHeaderDescriptor(
            $requestParamHeaders
        );
        $optionalArgs['headers'] = isset($optionalArgs['headers'])
            ? array_merge($requestParams->getHeader(), $optionalArgs['headers'])
            : $requestParams->getHeader();
        return $this->getPagedListResponse(
            'ListFirewallPolicies',
            $optionalArgs,
            ListFirewallPoliciesResponse::class,
            $request
        );
    }

    /**
     * Returns the list of all keys that belong to a project.
     *
     * Sample code:
     * ```
     * $recaptchaEnterpriseServiceClient = new RecaptchaEnterpriseServiceClient();
     * try {
     *     // Iterate over pages of elements
     *     $pagedResponse = $recaptchaEnterpriseServiceClient->listKeys();
     *     foreach ($pagedResponse->iteratePages() as $page) {
     *         foreach ($page as $element) {
     *             // doSomethingWith($element);
     *         }
     *     }
     *     // Alternatively:
     *     // Iterate through all elements
     *     $pagedResponse = $recaptchaEnterpriseServiceClient->listKeys();
     *     foreach ($pagedResponse->iterateAllElements() as $element) {
     *         // doSomethingWith($element);
     *     }
     * } finally {
     *     $recaptchaEnterpriseServiceClient->close();
     * }
     * ```
     *
     * @param array $optionalArgs {
     *     Optional.
     *
     *     @type string $parent
     *           Required. The name of the project that contains the keys that will be
     *           listed, in the format `projects/{project}`.
     *     @type int $pageSize
     *           The maximum number of resources contained in the underlying API
     *           response. The API may return fewer values in a page, even if
     *           there are additional values to be retrieved.
     *     @type string $pageToken
     *           A page token is used to specify a page of values to be returned.
     *           If no page token is specified (the default), the first page
     *           of values will be returned. Any page token used here must have
     *           been generated by a previous call to the API.
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return \Google\ApiCore\PagedListResponse
     *
     * @throws ApiException if the remote call fails
     */
    public function listKeys(array $optionalArgs = [])
    {
        $request = new ListKeysRequest();
        $requestParamHeaders = [];
        if (isset($optionalArgs['parent'])) {
            $request->setParent($optionalArgs['parent']);
            $requestParamHeaders['parent'] = $optionalArgs['parent'];
        }

        if (isset($optionalArgs['pageSize'])) {
            $request->setPageSize($optionalArgs['pageSize']);
        }

        if (isset($optionalArgs['pageToken'])) {
            $request->setPageToken($optionalArgs['pageToken']);
        }

        $requestParams = new RequestParamsHeaderDescriptor(
            $requestParamHeaders
        );
        $optionalArgs['headers'] = isset($optionalArgs['headers'])
            ? array_merge($requestParams->getHeader(), $optionalArgs['headers'])
            : $requestParams->getHeader();
        return $this->getPagedListResponse(
            'ListKeys',
            $optionalArgs,
            ListKeysResponse::class,
            $request
        );
    }

    /**
     * Get memberships in a group of related accounts.
     *
     * Sample code:
     * ```
     * $recaptchaEnterpriseServiceClient = new RecaptchaEnterpriseServiceClient();
     * try {
     *     // Iterate over pages of elements
     *     $pagedResponse = $recaptchaEnterpriseServiceClient->listRelatedAccountGroupMemberships();
     *     foreach ($pagedResponse->iteratePages() as $page) {
     *         foreach ($page as $element) {
     *             // doSomethingWith($element);
     *         }
     *     }
     *     // Alternatively:
     *     // Iterate through all elements
     *     $pagedResponse = $recaptchaEnterpriseServiceClient->listRelatedAccountGroupMemberships();
     *     foreach ($pagedResponse->iterateAllElements() as $element) {
     *         // doSomethingWith($element);
     *     }
     * } finally {
     *     $recaptchaEnterpriseServiceClient->close();
     * }
     * ```
     *
     * @param array $optionalArgs {
     *     Optional.
     *
     *     @type string $parent
     *           Required. The resource name for the related account group in the format
     *           `projects/{project}/relatedaccountgroups/{relatedaccountgroup}`.
     *     @type int $pageSize
     *           The maximum number of resources contained in the underlying API
     *           response. The API may return fewer values in a page, even if
     *           there are additional values to be retrieved.
     *     @type string $pageToken
     *           A page token is used to specify a page of values to be returned.
     *           If no page token is specified (the default), the first page
     *           of values will be returned. Any page token used here must have
     *           been generated by a previous call to the API.
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return \Google\ApiCore\PagedListResponse
     *
     * @throws ApiException if the remote call fails
     */
    public function listRelatedAccountGroupMemberships(array $optionalArgs = [])
    {
        $request = new ListRelatedAccountGroupMembershipsRequest();
        $requestParamHeaders = [];
        if (isset($optionalArgs['parent'])) {
            $request->setParent($optionalArgs['parent']);
            $requestParamHeaders['parent'] = $optionalArgs['parent'];
        }

        if (isset($optionalArgs['pageSize'])) {
            $request->setPageSize($optionalArgs['pageSize']);
        }

        if (isset($optionalArgs['pageToken'])) {
            $request->setPageToken($optionalArgs['pageToken']);
        }

        $requestParams = new RequestParamsHeaderDescriptor(
            $requestParamHeaders
        );
        $optionalArgs['headers'] = isset($optionalArgs['headers'])
            ? array_merge($requestParams->getHeader(), $optionalArgs['headers'])
            : $requestParams->getHeader();
        return $this->getPagedListResponse(
            'ListRelatedAccountGroupMemberships',
            $optionalArgs,
            ListRelatedAccountGroupMembershipsResponse::class,
            $request
        );
    }

    /**
     * List groups of related accounts.
     *
     * Sample code:
     * ```
     * $recaptchaEnterpriseServiceClient = new RecaptchaEnterpriseServiceClient();
     * try {
     *     // Iterate over pages of elements
     *     $pagedResponse = $recaptchaEnterpriseServiceClient->listRelatedAccountGroups();
     *     foreach ($pagedResponse->iteratePages() as $page) {
     *         foreach ($page as $element) {
     *             // doSomethingWith($element);
     *         }
     *     }
     *     // Alternatively:
     *     // Iterate through all elements
     *     $pagedResponse = $recaptchaEnterpriseServiceClient->listRelatedAccountGroups();
     *     foreach ($pagedResponse->iterateAllElements() as $element) {
     *         // doSomethingWith($element);
     *     }
     * } finally {
     *     $recaptchaEnterpriseServiceClient->close();
     * }
     * ```
     *
     * @param array $optionalArgs {
     *     Optional.
     *
     *     @type string $parent
     *           Required. The name of the project to list related account groups from, in
     *           the format `projects/{project}`.
     *     @type int $pageSize
     *           The maximum number of resources contained in the underlying API
     *           response. The API may return fewer values in a page, even if
     *           there are additional values to be retrieved.
     *     @type string $pageToken
     *           A page token is used to specify a page of values to be returned.
     *           If no page token is specified (the default), the first page
     *           of values will be returned. Any page token used here must have
     *           been generated by a previous call to the API.
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return \Google\ApiCore\PagedListResponse
     *
     * @throws ApiException if the remote call fails
     */
    public function listRelatedAccountGroups(array $optionalArgs = [])
    {
        $request = new ListRelatedAccountGroupsRequest();
        $requestParamHeaders = [];
        if (isset($optionalArgs['parent'])) {
            $request->setParent($optionalArgs['parent']);
            $requestParamHeaders['parent'] = $optionalArgs['parent'];
        }

        if (isset($optionalArgs['pageSize'])) {
            $request->setPageSize($optionalArgs['pageSize']);
        }

        if (isset($optionalArgs['pageToken'])) {
            $request->setPageToken($optionalArgs['pageToken']);
        }

        $requestParams = new RequestParamsHeaderDescriptor(
            $requestParamHeaders
        );
        $optionalArgs['headers'] = isset($optionalArgs['headers'])
            ? array_merge($requestParams->getHeader(), $optionalArgs['headers'])
            : $requestParams->getHeader();
        return $this->getPagedListResponse(
            'ListRelatedAccountGroups',
            $optionalArgs,
            ListRelatedAccountGroupsResponse::class,
            $request
        );
    }

    /**
     * Migrates an existing key from reCAPTCHA to reCAPTCHA Enterprise.
     * Once a key is migrated, it can be used from either product. SiteVerify
     * requests are billed as CreateAssessment calls. You must be
     * authenticated as one of the current owners of the reCAPTCHA Key, and
     * your user must have the reCAPTCHA Enterprise Admin IAM role in the
     * destination project.
     *
     * Sample code:
     * ```
     * $recaptchaEnterpriseServiceClient = new RecaptchaEnterpriseServiceClient();
     * try {
     *     $response = $recaptchaEnterpriseServiceClient->migrateKey();
     * } finally {
     *     $recaptchaEnterpriseServiceClient->close();
     * }
     * ```
     *
     * @param array $optionalArgs {
     *     Optional.
     *
     *     @type string $name
     *           Required. The name of the key to be migrated, in the format
     *           `projects/{project}/keys/{key}`.
     *     @type bool $skipBillingCheck
     *           Optional. If true, skips the billing check.
     *           A reCAPTCHA Enterprise key or migrated key behaves differently than a
     *           reCAPTCHA (non-Enterprise version) key when you reach a quota limit (see
     *           https://cloud.google.com/recaptcha-enterprise/quotas#quota_limit). To avoid
     *           any disruption of your usage, we check that a billing account is present.
     *           If your usage of reCAPTCHA is under the free quota, you can safely skip the
     *           billing check and proceed with the migration. See
     *           https://cloud.google.com/recaptcha-enterprise/docs/billing-information.
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return \Google\Cloud\RecaptchaEnterprise\V1\Key
     *
     * @throws ApiException if the remote call fails
     */
    public function migrateKey(array $optionalArgs = [])
    {
        $request = new MigrateKeyRequest();
        $requestParamHeaders = [];
        if (isset($optionalArgs['name'])) {
            $request->setName($optionalArgs['name']);
            $requestParamHeaders['name'] = $optionalArgs['name'];
        }

        if (isset($optionalArgs['skipBillingCheck'])) {
            $request->setSkipBillingCheck($optionalArgs['skipBillingCheck']);
        }

        $requestParams = new RequestParamsHeaderDescriptor(
            $requestParamHeaders
        );
        $optionalArgs['headers'] = isset($optionalArgs['headers'])
            ? array_merge($requestParams->getHeader(), $optionalArgs['headers'])
            : $requestParams->getHeader();
        return $this->startCall(
            'MigrateKey',
            Key::class,
            $optionalArgs,
            $request
        )->wait();
    }

    /**
     * Returns the secret key related to the specified public key.
     * You must use the legacy secret key only in a 3rd party integration with
     * legacy reCAPTCHA.
     *
     * Sample code:
     * ```
     * $recaptchaEnterpriseServiceClient = new RecaptchaEnterpriseServiceClient();
     * try {
     *     $response = $recaptchaEnterpriseServiceClient->retrieveLegacySecretKey();
     * } finally {
     *     $recaptchaEnterpriseServiceClient->close();
     * }
     * ```
     *
     * @param array $optionalArgs {
     *     Optional.
     *
     *     @type string $key
     *           Required. The public key name linked to the requested secret key in the
     *           format `projects/{project}/keys/{key}`.
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return \Google\Cloud\RecaptchaEnterprise\V1\RetrieveLegacySecretKeyResponse
     *
     * @throws ApiException if the remote call fails
     */
    public function retrieveLegacySecretKey(array $optionalArgs = [])
    {
        $request = new RetrieveLegacySecretKeyRequest();
        $requestParamHeaders = [];
        if (isset($optionalArgs['key'])) {
            $request->setKey($optionalArgs['key']);
            $requestParamHeaders['key'] = $optionalArgs['key'];
        }

        $requestParams = new RequestParamsHeaderDescriptor(
            $requestParamHeaders
        );
        $optionalArgs['headers'] = isset($optionalArgs['headers'])
            ? array_merge($requestParams->getHeader(), $optionalArgs['headers'])
            : $requestParams->getHeader();
        return $this->startCall(
            'RetrieveLegacySecretKey',
            RetrieveLegacySecretKeyResponse::class,
            $optionalArgs,
            $request
        )->wait();
    }

    /**
     * Search group memberships related to a given account.
     *
     * Sample code:
     * ```
     * $recaptchaEnterpriseServiceClient = new RecaptchaEnterpriseServiceClient();
     * try {
     *     // Iterate over pages of elements
     *     $pagedResponse = $recaptchaEnterpriseServiceClient->searchRelatedAccountGroupMemberships();
     *     foreach ($pagedResponse->iteratePages() as $page) {
     *         foreach ($page as $element) {
     *             // doSomethingWith($element);
     *         }
     *     }
     *     // Alternatively:
     *     // Iterate through all elements
     *     $pagedResponse = $recaptchaEnterpriseServiceClient->searchRelatedAccountGroupMemberships();
     *     foreach ($pagedResponse->iterateAllElements() as $element) {
     *         // doSomethingWith($element);
     *     }
     * } finally {
     *     $recaptchaEnterpriseServiceClient->close();
     * }
     * ```
     *
     * @param array $optionalArgs {
     *     Optional.
     *
     *     @type string $project
     *           Required. The name of the project to search related account group
     *           memberships from. Specify the project name in the following format:
     *           `projects/{project}`.
     *     @type string $accountId
     *           Optional. The unique stable account identifier used to search connections.
     *           The identifier should correspond to an `account_id` provided in a previous
     *           `CreateAssessment` or `AnnotateAssessment` call. Either hashed_account_id
     *           or account_id must be set, but not both.
     *     @type string $hashedAccountId
     *           Optional. Deprecated: use `account_id` instead.
     *           The unique stable hashed account identifier used to search connections. The
     *           identifier should correspond to a `hashed_account_id` provided in a
     *           previous `CreateAssessment` or `AnnotateAssessment` call. Either
     *           hashed_account_id or account_id must be set, but not both.
     *     @type int $pageSize
     *           The maximum number of resources contained in the underlying API
     *           response. The API may return fewer values in a page, even if
     *           there are additional values to be retrieved.
     *     @type string $pageToken
     *           A page token is used to specify a page of values to be returned.
     *           If no page token is specified (the default), the first page
     *           of values will be returned. Any page token used here must have
     *           been generated by a previous call to the API.
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return \Google\ApiCore\PagedListResponse
     *
     * @throws ApiException if the remote call fails
     */
    public function searchRelatedAccountGroupMemberships(
        array $optionalArgs = []
    ) {
        $request = new SearchRelatedAccountGroupMembershipsRequest();
        $requestParamHeaders = [];
        if (isset($optionalArgs['project'])) {
            $request->setProject($optionalArgs['project']);
            $requestParamHeaders['project'] = $optionalArgs['project'];
        }

        if (isset($optionalArgs['accountId'])) {
            $request->setAccountId($optionalArgs['accountId']);
        }

        if (isset($optionalArgs['hashedAccountId'])) {
            $request->setHashedAccountId($optionalArgs['hashedAccountId']);
        }

        if (isset($optionalArgs['pageSize'])) {
            $request->setPageSize($optionalArgs['pageSize']);
        }

        if (isset($optionalArgs['pageToken'])) {
            $request->setPageToken($optionalArgs['pageToken']);
        }

        $requestParams = new RequestParamsHeaderDescriptor(
            $requestParamHeaders
        );
        $optionalArgs['headers'] = isset($optionalArgs['headers'])
            ? array_merge($requestParams->getHeader(), $optionalArgs['headers'])
            : $requestParams->getHeader();
        return $this->getPagedListResponse(
            'SearchRelatedAccountGroupMemberships',
            $optionalArgs,
            SearchRelatedAccountGroupMembershipsResponse::class,
            $request
        );
    }

    /**
     * Updates the specified firewall policy.
     *
     * Sample code:
     * ```
     * $recaptchaEnterpriseServiceClient = new RecaptchaEnterpriseServiceClient();
     * try {
     *     $response = $recaptchaEnterpriseServiceClient->updateFirewallPolicy();
     * } finally {
     *     $recaptchaEnterpriseServiceClient->close();
     * }
     * ```
     *
     * @param array $optionalArgs {
     *     Optional.
     *
     *     @type FirewallPolicy $firewallPolicy
     *           Required. The policy to update.
     *     @type FieldMask $updateMask
     *           Optional. The mask to control which fields of the policy get updated. If
     *           the mask is not present, all fields will be updated.
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return \Google\Cloud\RecaptchaEnterprise\V1\FirewallPolicy
     *
     * @throws ApiException if the remote call fails
     */
    public function updateFirewallPolicy(array $optionalArgs = [])
    {
        $request = new UpdateFirewallPolicyRequest();
        $requestParamHeaders = [];
        if (isset($optionalArgs['firewallPolicy'])) {
            $request->setFirewallPolicy($optionalArgs['firewallPolicy']);
        }

        if (isset($optionalArgs['updateMask'])) {
            $request->setUpdateMask($optionalArgs['updateMask']);
        }

        $requestParams = new RequestParamsHeaderDescriptor(
            $requestParamHeaders
        );
        $optionalArgs['headers'] = isset($optionalArgs['headers'])
            ? array_merge($requestParams->getHeader(), $optionalArgs['headers'])
            : $requestParams->getHeader();
        return $this->startCall(
            'UpdateFirewallPolicy',
            FirewallPolicy::class,
            $optionalArgs,
            $request
        )->wait();
    }

    /**
     * Updates the specified key.
     *
     * Sample code:
     * ```
     * $recaptchaEnterpriseServiceClient = new RecaptchaEnterpriseServiceClient();
     * try {
     *     $response = $recaptchaEnterpriseServiceClient->updateKey();
     * } finally {
     *     $recaptchaEnterpriseServiceClient->close();
     * }
     * ```
     *
     * @param array $optionalArgs {
     *     Optional.
     *
     *     @type Key $key
     *           Required. The key to update.
     *     @type FieldMask $updateMask
     *           Optional. The mask to control which fields of the key get updated. If the
     *           mask is not present, all fields will be updated.
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return \Google\Cloud\RecaptchaEnterprise\V1\Key
     *
     * @throws ApiException if the remote call fails
     */
    public function updateKey(array $optionalArgs = [])
    {
        $request = new UpdateKeyRequest();
        $requestParamHeaders = [];
        if (isset($optionalArgs['key'])) {
            $request->setKey($optionalArgs['key']);
        }

        if (isset($optionalArgs['updateMask'])) {
            $request->setUpdateMask($optionalArgs['updateMask']);
        }

        $requestParams = new RequestParamsHeaderDescriptor(
            $requestParamHeaders
        );
        $optionalArgs['headers'] = isset($optionalArgs['headers'])
            ? array_merge($requestParams->getHeader(), $optionalArgs['headers'])
            : $requestParams->getHeader();
        return $this->startCall(
            'UpdateKey',
            Key::class,
            $optionalArgs,
            $request
        )->wait();
    }
}
