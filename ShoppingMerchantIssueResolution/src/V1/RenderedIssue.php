<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/shopping/merchant/issueresolution/v1/issueresolution.proto

namespace Google\Shopping\Merchant\IssueResolution\V1;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * An issue affecting specific business or their product.
 *
 * Generated from protobuf message <code>google.shopping.merchant.issueresolution.v1.RenderedIssue</code>
 */
class RenderedIssue extends \Google\Protobuf\Internal\Message
{
    /**
     * Title of the issue.
     *
     * Generated from protobuf field <code>string title = 1;</code>
     */
    protected $title = '';
    /**
     * Clarifies the severity of the issue.
     * The [summarizing
     * message][google.shopping.merchant.issueresolution.v1.Impact.message], if
     * present, should be shown right under the title for each issue. It helps
     * business to quickly understand the impact of the issue.
     * The detailed
     * [breakdown][google.shopping.merchant.issueresolution.v1.Impact.breakdowns]
     * helps the business to fully understand the impact of the issue. It can be
     * rendered as dialog that opens when the business mouse over the summarized
     * impact statement.
     * Issues with different
     * [severity][google.shopping.merchant.issueresolution.v1.Impact.severity] can
     * be styled differently. They may use a different color or icon to signal the
     * difference between `ERROR`, `WARNING` and `INFO`.
     *
     * Generated from protobuf field <code>.google.shopping.merchant.issueresolution.v1.Impact impact = 2;</code>
     */
    protected $impact = null;
    /**
     * A list of actionable steps that can be executed to solve the issue. An
     * example is requesting a re-review or providing arguments when business
     * disagrees with the issue.
     * Actions that are supported in (your) third-party application can be
     * rendered as buttons and should be available to the business when they
     * expand the issue.
     *
     * Generated from protobuf field <code>repeated .google.shopping.merchant.issueresolution.v1.Action actions = 4;</code>
     */
    private $actions;
    protected $content;
    protected $out_of_court_dispute_settlement;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $prerendered_content
     *           Details of the issue as a pre-rendered HTML. HTML elements contain CSS
     *           classes that can be used to customize the style of the content.
     *           Always sanitize the HTML before embedding it directly to your
     *           application. The sanitizer needs to allow basic HTML tags, such as:
     *           `div`, `span`, `p`, `a`, `ul`, `li`, `table`, `tr`, `td`. For example,
     *           you can use [DOMPurify](https://www.npmjs.com/package/dompurify).
     *           CSS classes:
     *           * `issue-detail` - top level container for the detail of the issue
     *           * `callout-banners` - section of the `issue-detail` with callout banners
     *           * `callout-banner` - single callout banner, inside `callout-banners`
     *           * `callout-banner-info` - callout with important information (default)
     *           * `callout-banner-warning` - callout with a warning
     *           * `callout-banner-error` - callout informing about an error (most severe)
     *           * `issue-content` - section of the `issue-detail`, contains multiple
     *           `content-element`
     *           * `content-element` - content element such as a list, link or paragraph,
     *           inside `issue-content`
     *           * `root-causes` - unordered list with items describing root causes of the
     *           issue, inside `issue-content`
     *           * `root-causes-intro` - intro text before the `root-causes` list, inside
     *           `issue-content`
     *           * `segment` - section of the text, `span` inside paragraph
     *           * `segment-attribute` - section of the text that represents a product
     *           attribute, for example 'image\_link'
     *           * `segment-literal` - section of the text that contains a special value,
     *           for example '0-1000 kg'
     *           * `segment-bold` - section of the text that should be rendered as bold
     *           * `segment-italic` - section of the text that should be rendered as
     *           italic
     *           * `tooltip` - used on paragraphs that should be rendered with a tooltip.
     *           A section of the text in such a paragraph will have a class
     *           `tooltip-text` and is intended to be shown in a mouse over dialog. If the
     *           style is not used, the `tooltip-text` section would be shown on a new
     *           line, after the main part of the text.
     *           * `tooltip-text` - marks a section of the text within a `tooltip`, that
     *           is intended to be shown in a mouse over dialog.
     *           * `tooltip-icon` - marks a section of the text within a `tooltip`, that
     *           can be replaced with a tooltip icon, for example '?' or 'i'. By default,
     *           this section contains a `br` tag, that is separating the main text and
     *           the tooltip text when the style is not used.
     *           * `tooltip-style-question` - the tooltip shows helpful information,
     *           can use the '?' as an icon.
     *           * `tooltip-style-info` - the tooltip adds additional information fitting
     *           to the context, can use the 'i' as an icon.
     *           * `content-moderation` - marks the paragraph that explains how the issue
     *           was identified.
     *           * `new-element` - Present for new elements added to the pre-rendered
     *           content in the future. To make sure that a new content element does not
     *           break your style, you can hide everything with this class.
     *     @type string $prerendered_out_of_court_dispute_settlement
     *           Pre-rendered HTML that contains a link to the external location where the
     *           ODS can be requested and instructions for how to request it. HTML
     *           elements contain CSS classes that can be used to customize the style of
     *           this snippet.
     *           Always sanitize the HTML before embedding it directly to your
     *           application. The sanitizer needs to allow basic HTML tags, such as:
     *           `div`, `span`, `p`, `a`, `ul`, `li`, `table`, `tr`, `td`. For example,
     *           you can use [DOMPurify](https://www.npmjs.com/package/dompurify).
     *           CSS classes:
     *           * `ods-section`* - wrapper around the out-of-court dispute resolution
     *           section
     *           * `ods-description`* - intro text for the out-of-court dispute
     *           resolution. It may contain multiple segments and a link.
     *           * `ods-param`* - wrapper around the header-value pair for parameters that
     *           the business may need to provide during the ODS process.
     *           * `ods-routing-id`* - ods param for the Routing ID.
     *           * `ods-reference-id`* - ods param for the Routing ID.
     *           * `ods-param-header`* - header for the ODS parameter
     *           * `ods-param-value`* - value of the ODS parameter. This value should be
     *           rendered in a way that it is easy for the user to identify and copy.
     *           * `segment` - section of the text, `span` inside paragraph
     *           * `segment-attribute` - section of the text that represents a product
     *           attribute, for example 'image\_link'
     *           * `segment-literal` - section of the text that contains a special value,
     *           for example '0-1000 kg'
     *           * `segment-bold` - section of the text that should be rendered as bold
     *           * `segment-italic` - section of the text that should be rendered as
     *           italic
     *           * `tooltip` - used on paragraphs that should be rendered with a tooltip.
     *           A section of the text in such a paragraph will have a class
     *           `tooltip-text` and is intended to be shown in a mouse over dialog. If the
     *           style is not used, the `tooltip-text` section would be shown on a new
     *           line, after the main part of the text.
     *           * `tooltip-text` - marks a section of the text within a `tooltip`, that
     *           is intended to be shown in a mouse over dialog.
     *           * `tooltip-icon` - marks a section of the text within a `tooltip`, that
     *           can be replaced with a tooltip icon, for example '?' or 'i'. By default,
     *           this section contains a `br` tag, that is separating the main text and
     *           the tooltip text when the style is not used.
     *           * `tooltip-style-question` - the tooltip shows helpful information,
     *           can use the '?' as an icon.
     *           * `tooltip-style-info` - the tooltip adds additional information fitting
     *           to the context, can use the 'i' as an icon.
     *     @type string $title
     *           Title of the issue.
     *     @type \Google\Shopping\Merchant\IssueResolution\V1\Impact $impact
     *           Clarifies the severity of the issue.
     *           The [summarizing
     *           message][google.shopping.merchant.issueresolution.v1.Impact.message], if
     *           present, should be shown right under the title for each issue. It helps
     *           business to quickly understand the impact of the issue.
     *           The detailed
     *           [breakdown][google.shopping.merchant.issueresolution.v1.Impact.breakdowns]
     *           helps the business to fully understand the impact of the issue. It can be
     *           rendered as dialog that opens when the business mouse over the summarized
     *           impact statement.
     *           Issues with different
     *           [severity][google.shopping.merchant.issueresolution.v1.Impact.severity] can
     *           be styled differently. They may use a different color or icon to signal the
     *           difference between `ERROR`, `WARNING` and `INFO`.
     *     @type array<\Google\Shopping\Merchant\IssueResolution\V1\Action>|\Google\Protobuf\Internal\RepeatedField $actions
     *           A list of actionable steps that can be executed to solve the issue. An
     *           example is requesting a re-review or providing arguments when business
     *           disagrees with the issue.
     *           Actions that are supported in (your) third-party application can be
     *           rendered as buttons and should be available to the business when they
     *           expand the issue.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Google\Shopping\Merchant\Issueresolution\V1\Issueresolution::initOnce();
        parent::__construct($data);
    }

    /**
     * Details of the issue as a pre-rendered HTML. HTML elements contain CSS
     * classes that can be used to customize the style of the content.
     * Always sanitize the HTML before embedding it directly to your
     * application. The sanitizer needs to allow basic HTML tags, such as:
     * `div`, `span`, `p`, `a`, `ul`, `li`, `table`, `tr`, `td`. For example,
     * you can use [DOMPurify](https://www.npmjs.com/package/dompurify).
     * CSS classes:
     * * `issue-detail` - top level container for the detail of the issue
     * * `callout-banners` - section of the `issue-detail` with callout banners
     * * `callout-banner` - single callout banner, inside `callout-banners`
     * * `callout-banner-info` - callout with important information (default)
     * * `callout-banner-warning` - callout with a warning
     * * `callout-banner-error` - callout informing about an error (most severe)
     * * `issue-content` - section of the `issue-detail`, contains multiple
     * `content-element`
     * * `content-element` - content element such as a list, link or paragraph,
     * inside `issue-content`
     * * `root-causes` - unordered list with items describing root causes of the
     * issue, inside `issue-content`
     * * `root-causes-intro` - intro text before the `root-causes` list, inside
     * `issue-content`
     * * `segment` - section of the text, `span` inside paragraph
     * * `segment-attribute` - section of the text that represents a product
     * attribute, for example 'image\_link'
     * * `segment-literal` - section of the text that contains a special value,
     * for example '0-1000 kg'
     * * `segment-bold` - section of the text that should be rendered as bold
     * * `segment-italic` - section of the text that should be rendered as
     * italic
     * * `tooltip` - used on paragraphs that should be rendered with a tooltip.
     * A section of the text in such a paragraph will have a class
     * `tooltip-text` and is intended to be shown in a mouse over dialog. If the
     * style is not used, the `tooltip-text` section would be shown on a new
     * line, after the main part of the text.
     * * `tooltip-text` - marks a section of the text within a `tooltip`, that
     * is intended to be shown in a mouse over dialog.
     * * `tooltip-icon` - marks a section of the text within a `tooltip`, that
     * can be replaced with a tooltip icon, for example '?' or 'i'. By default,
     * this section contains a `br` tag, that is separating the main text and
     * the tooltip text when the style is not used.
     * * `tooltip-style-question` - the tooltip shows helpful information,
     * can use the '?' as an icon.
     * * `tooltip-style-info` - the tooltip adds additional information fitting
     * to the context, can use the 'i' as an icon.
     * * `content-moderation` - marks the paragraph that explains how the issue
     * was identified.
     * * `new-element` - Present for new elements added to the pre-rendered
     * content in the future. To make sure that a new content element does not
     * break your style, you can hide everything with this class.
     *
     * Generated from protobuf field <code>string prerendered_content = 3;</code>
     * @return string
     */
    public function getPrerenderedContent()
    {
        return $this->readOneof(3);
    }

    public function hasPrerenderedContent()
    {
        return $this->hasOneof(3);
    }

    /**
     * Details of the issue as a pre-rendered HTML. HTML elements contain CSS
     * classes that can be used to customize the style of the content.
     * Always sanitize the HTML before embedding it directly to your
     * application. The sanitizer needs to allow basic HTML tags, such as:
     * `div`, `span`, `p`, `a`, `ul`, `li`, `table`, `tr`, `td`. For example,
     * you can use [DOMPurify](https://www.npmjs.com/package/dompurify).
     * CSS classes:
     * * `issue-detail` - top level container for the detail of the issue
     * * `callout-banners` - section of the `issue-detail` with callout banners
     * * `callout-banner` - single callout banner, inside `callout-banners`
     * * `callout-banner-info` - callout with important information (default)
     * * `callout-banner-warning` - callout with a warning
     * * `callout-banner-error` - callout informing about an error (most severe)
     * * `issue-content` - section of the `issue-detail`, contains multiple
     * `content-element`
     * * `content-element` - content element such as a list, link or paragraph,
     * inside `issue-content`
     * * `root-causes` - unordered list with items describing root causes of the
     * issue, inside `issue-content`
     * * `root-causes-intro` - intro text before the `root-causes` list, inside
     * `issue-content`
     * * `segment` - section of the text, `span` inside paragraph
     * * `segment-attribute` - section of the text that represents a product
     * attribute, for example 'image\_link'
     * * `segment-literal` - section of the text that contains a special value,
     * for example '0-1000 kg'
     * * `segment-bold` - section of the text that should be rendered as bold
     * * `segment-italic` - section of the text that should be rendered as
     * italic
     * * `tooltip` - used on paragraphs that should be rendered with a tooltip.
     * A section of the text in such a paragraph will have a class
     * `tooltip-text` and is intended to be shown in a mouse over dialog. If the
     * style is not used, the `tooltip-text` section would be shown on a new
     * line, after the main part of the text.
     * * `tooltip-text` - marks a section of the text within a `tooltip`, that
     * is intended to be shown in a mouse over dialog.
     * * `tooltip-icon` - marks a section of the text within a `tooltip`, that
     * can be replaced with a tooltip icon, for example '?' or 'i'. By default,
     * this section contains a `br` tag, that is separating the main text and
     * the tooltip text when the style is not used.
     * * `tooltip-style-question` - the tooltip shows helpful information,
     * can use the '?' as an icon.
     * * `tooltip-style-info` - the tooltip adds additional information fitting
     * to the context, can use the 'i' as an icon.
     * * `content-moderation` - marks the paragraph that explains how the issue
     * was identified.
     * * `new-element` - Present for new elements added to the pre-rendered
     * content in the future. To make sure that a new content element does not
     * break your style, you can hide everything with this class.
     *
     * Generated from protobuf field <code>string prerendered_content = 3;</code>
     * @param string $var
     * @return $this
     */
    public function setPrerenderedContent($var)
    {
        GPBUtil::checkString($var, True);
        $this->writeOneof(3, $var);

        return $this;
    }

    /**
     * Pre-rendered HTML that contains a link to the external location where the
     * ODS can be requested and instructions for how to request it. HTML
     * elements contain CSS classes that can be used to customize the style of
     * this snippet.
     * Always sanitize the HTML before embedding it directly to your
     * application. The sanitizer needs to allow basic HTML tags, such as:
     * `div`, `span`, `p`, `a`, `ul`, `li`, `table`, `tr`, `td`. For example,
     * you can use [DOMPurify](https://www.npmjs.com/package/dompurify).
     * CSS classes:
     * * `ods-section`* - wrapper around the out-of-court dispute resolution
     * section
     * * `ods-description`* - intro text for the out-of-court dispute
     * resolution. It may contain multiple segments and a link.
     * * `ods-param`* - wrapper around the header-value pair for parameters that
     * the business may need to provide during the ODS process.
     * * `ods-routing-id`* - ods param for the Routing ID.
     * * `ods-reference-id`* - ods param for the Routing ID.
     * * `ods-param-header`* - header for the ODS parameter
     * * `ods-param-value`* - value of the ODS parameter. This value should be
     * rendered in a way that it is easy for the user to identify and copy.
     * * `segment` - section of the text, `span` inside paragraph
     * * `segment-attribute` - section of the text that represents a product
     * attribute, for example 'image\_link'
     * * `segment-literal` - section of the text that contains a special value,
     * for example '0-1000 kg'
     * * `segment-bold` - section of the text that should be rendered as bold
     * * `segment-italic` - section of the text that should be rendered as
     * italic
     * * `tooltip` - used on paragraphs that should be rendered with a tooltip.
     * A section of the text in such a paragraph will have a class
     * `tooltip-text` and is intended to be shown in a mouse over dialog. If the
     * style is not used, the `tooltip-text` section would be shown on a new
     * line, after the main part of the text.
     * * `tooltip-text` - marks a section of the text within a `tooltip`, that
     * is intended to be shown in a mouse over dialog.
     * * `tooltip-icon` - marks a section of the text within a `tooltip`, that
     * can be replaced with a tooltip icon, for example '?' or 'i'. By default,
     * this section contains a `br` tag, that is separating the main text and
     * the tooltip text when the style is not used.
     * * `tooltip-style-question` - the tooltip shows helpful information,
     * can use the '?' as an icon.
     * * `tooltip-style-info` - the tooltip adds additional information fitting
     * to the context, can use the 'i' as an icon.
     *
     * Generated from protobuf field <code>string prerendered_out_of_court_dispute_settlement = 5;</code>
     * @return string
     */
    public function getPrerenderedOutOfCourtDisputeSettlement()
    {
        return $this->readOneof(5);
    }

    public function hasPrerenderedOutOfCourtDisputeSettlement()
    {
        return $this->hasOneof(5);
    }

    /**
     * Pre-rendered HTML that contains a link to the external location where the
     * ODS can be requested and instructions for how to request it. HTML
     * elements contain CSS classes that can be used to customize the style of
     * this snippet.
     * Always sanitize the HTML before embedding it directly to your
     * application. The sanitizer needs to allow basic HTML tags, such as:
     * `div`, `span`, `p`, `a`, `ul`, `li`, `table`, `tr`, `td`. For example,
     * you can use [DOMPurify](https://www.npmjs.com/package/dompurify).
     * CSS classes:
     * * `ods-section`* - wrapper around the out-of-court dispute resolution
     * section
     * * `ods-description`* - intro text for the out-of-court dispute
     * resolution. It may contain multiple segments and a link.
     * * `ods-param`* - wrapper around the header-value pair for parameters that
     * the business may need to provide during the ODS process.
     * * `ods-routing-id`* - ods param for the Routing ID.
     * * `ods-reference-id`* - ods param for the Routing ID.
     * * `ods-param-header`* - header for the ODS parameter
     * * `ods-param-value`* - value of the ODS parameter. This value should be
     * rendered in a way that it is easy for the user to identify and copy.
     * * `segment` - section of the text, `span` inside paragraph
     * * `segment-attribute` - section of the text that represents a product
     * attribute, for example 'image\_link'
     * * `segment-literal` - section of the text that contains a special value,
     * for example '0-1000 kg'
     * * `segment-bold` - section of the text that should be rendered as bold
     * * `segment-italic` - section of the text that should be rendered as
     * italic
     * * `tooltip` - used on paragraphs that should be rendered with a tooltip.
     * A section of the text in such a paragraph will have a class
     * `tooltip-text` and is intended to be shown in a mouse over dialog. If the
     * style is not used, the `tooltip-text` section would be shown on a new
     * line, after the main part of the text.
     * * `tooltip-text` - marks a section of the text within a `tooltip`, that
     * is intended to be shown in a mouse over dialog.
     * * `tooltip-icon` - marks a section of the text within a `tooltip`, that
     * can be replaced with a tooltip icon, for example '?' or 'i'. By default,
     * this section contains a `br` tag, that is separating the main text and
     * the tooltip text when the style is not used.
     * * `tooltip-style-question` - the tooltip shows helpful information,
     * can use the '?' as an icon.
     * * `tooltip-style-info` - the tooltip adds additional information fitting
     * to the context, can use the 'i' as an icon.
     *
     * Generated from protobuf field <code>string prerendered_out_of_court_dispute_settlement = 5;</code>
     * @param string $var
     * @return $this
     */
    public function setPrerenderedOutOfCourtDisputeSettlement($var)
    {
        GPBUtil::checkString($var, True);
        $this->writeOneof(5, $var);

        return $this;
    }

    /**
     * Title of the issue.
     *
     * Generated from protobuf field <code>string title = 1;</code>
     * @return string
     */
    public function getTitle()
    {
        return $this->title;
    }

    /**
     * Title of the issue.
     *
     * Generated from protobuf field <code>string title = 1;</code>
     * @param string $var
     * @return $this
     */
    public function setTitle($var)
    {
        GPBUtil::checkString($var, True);
        $this->title = $var;

        return $this;
    }

    /**
     * Clarifies the severity of the issue.
     * The [summarizing
     * message][google.shopping.merchant.issueresolution.v1.Impact.message], if
     * present, should be shown right under the title for each issue. It helps
     * business to quickly understand the impact of the issue.
     * The detailed
     * [breakdown][google.shopping.merchant.issueresolution.v1.Impact.breakdowns]
     * helps the business to fully understand the impact of the issue. It can be
     * rendered as dialog that opens when the business mouse over the summarized
     * impact statement.
     * Issues with different
     * [severity][google.shopping.merchant.issueresolution.v1.Impact.severity] can
     * be styled differently. They may use a different color or icon to signal the
     * difference between `ERROR`, `WARNING` and `INFO`.
     *
     * Generated from protobuf field <code>.google.shopping.merchant.issueresolution.v1.Impact impact = 2;</code>
     * @return \Google\Shopping\Merchant\IssueResolution\V1\Impact|null
     */
    public function getImpact()
    {
        return $this->impact;
    }

    public function hasImpact()
    {
        return isset($this->impact);
    }

    public function clearImpact()
    {
        unset($this->impact);
    }

    /**
     * Clarifies the severity of the issue.
     * The [summarizing
     * message][google.shopping.merchant.issueresolution.v1.Impact.message], if
     * present, should be shown right under the title for each issue. It helps
     * business to quickly understand the impact of the issue.
     * The detailed
     * [breakdown][google.shopping.merchant.issueresolution.v1.Impact.breakdowns]
     * helps the business to fully understand the impact of the issue. It can be
     * rendered as dialog that opens when the business mouse over the summarized
     * impact statement.
     * Issues with different
     * [severity][google.shopping.merchant.issueresolution.v1.Impact.severity] can
     * be styled differently. They may use a different color or icon to signal the
     * difference between `ERROR`, `WARNING` and `INFO`.
     *
     * Generated from protobuf field <code>.google.shopping.merchant.issueresolution.v1.Impact impact = 2;</code>
     * @param \Google\Shopping\Merchant\IssueResolution\V1\Impact $var
     * @return $this
     */
    public function setImpact($var)
    {
        GPBUtil::checkMessage($var, \Google\Shopping\Merchant\IssueResolution\V1\Impact::class);
        $this->impact = $var;

        return $this;
    }

    /**
     * A list of actionable steps that can be executed to solve the issue. An
     * example is requesting a re-review or providing arguments when business
     * disagrees with the issue.
     * Actions that are supported in (your) third-party application can be
     * rendered as buttons and should be available to the business when they
     * expand the issue.
     *
     * Generated from protobuf field <code>repeated .google.shopping.merchant.issueresolution.v1.Action actions = 4;</code>
     * @return \Google\Protobuf\Internal\RepeatedField
     */
    public function getActions()
    {
        return $this->actions;
    }

    /**
     * A list of actionable steps that can be executed to solve the issue. An
     * example is requesting a re-review or providing arguments when business
     * disagrees with the issue.
     * Actions that are supported in (your) third-party application can be
     * rendered as buttons and should be available to the business when they
     * expand the issue.
     *
     * Generated from protobuf field <code>repeated .google.shopping.merchant.issueresolution.v1.Action actions = 4;</code>
     * @param array<\Google\Shopping\Merchant\IssueResolution\V1\Action>|\Google\Protobuf\Internal\RepeatedField $var
     * @return $this
     */
    public function setActions($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::MESSAGE, \Google\Shopping\Merchant\IssueResolution\V1\Action::class);
        $this->actions = $arr;

        return $this;
    }

    /**
     * @return string
     */
    public function getContent()
    {
        return $this->whichOneof("content");
    }

    /**
     * @return string
     */
    public function getOutOfCourtDisputeSettlement()
    {
        return $this->whichOneof("out_of_court_dispute_settlement");
    }

}

