<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/cloud/vmmigration/v1/vmmigration.proto

namespace Google\Cloud\VMMigration\V1;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * BootDiskDefaults hold information about the boot disk of a VM.
 *
 * Generated from protobuf message <code>google.cloud.vmmigration.v1.BootDiskDefaults</code>
 */
class BootDiskDefaults extends \Google\Protobuf\Internal\Message
{
    /**
     * Optional. The name of the disk.
     *
     * Generated from protobuf field <code>string disk_name = 1 [(.google.api.field_behavior) = OPTIONAL];</code>
     */
    protected $disk_name = '';
    /**
     * Optional. The type of disk provisioning to use for the VM.
     *
     * Generated from protobuf field <code>.google.cloud.vmmigration.v1.ComputeEngineDiskType disk_type = 2 [(.google.api.field_behavior) = OPTIONAL];</code>
     */
    protected $disk_type = 0;
    /**
     * Optional. Specifies a unique device name of your choice that is reflected
     * into the /dev/disk/by-id/google-* tree of a Linux operating system running
     * within the instance. If not specified, the server chooses a default device
     * name to apply to this disk, in the form persistent-disk-x, where x is a
     * number assigned by Google Compute Engine. This field is only applicable for
     * persistent disks.
     *
     * Generated from protobuf field <code>string device_name = 4 [(.google.api.field_behavior) = OPTIONAL];</code>
     */
    protected $device_name = '';
    /**
     * Optional. The encryption to apply to the boot disk.
     *
     * Generated from protobuf field <code>.google.cloud.vmmigration.v1.Encryption encryption = 5 [(.google.api.field_behavior) = OPTIONAL];</code>
     */
    protected $encryption = null;
    protected $source;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type \Google\Cloud\VMMigration\V1\BootDiskDefaults\DiskImageDefaults $image
     *           The image to use when creating the disk.
     *     @type string $disk_name
     *           Optional. The name of the disk.
     *     @type int $disk_type
     *           Optional. The type of disk provisioning to use for the VM.
     *     @type string $device_name
     *           Optional. Specifies a unique device name of your choice that is reflected
     *           into the /dev/disk/by-id/google-* tree of a Linux operating system running
     *           within the instance. If not specified, the server chooses a default device
     *           name to apply to this disk, in the form persistent-disk-x, where x is a
     *           number assigned by Google Compute Engine. This field is only applicable for
     *           persistent disks.
     *     @type \Google\Cloud\VMMigration\V1\Encryption $encryption
     *           Optional. The encryption to apply to the boot disk.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Google\Cloud\Vmmigration\V1\Vmmigration::initOnce();
        parent::__construct($data);
    }

    /**
     * The image to use when creating the disk.
     *
     * Generated from protobuf field <code>.google.cloud.vmmigration.v1.BootDiskDefaults.DiskImageDefaults image = 3;</code>
     * @return \Google\Cloud\VMMigration\V1\BootDiskDefaults\DiskImageDefaults|null
     */
    public function getImage()
    {
        return $this->readOneof(3);
    }

    public function hasImage()
    {
        return $this->hasOneof(3);
    }

    /**
     * The image to use when creating the disk.
     *
     * Generated from protobuf field <code>.google.cloud.vmmigration.v1.BootDiskDefaults.DiskImageDefaults image = 3;</code>
     * @param \Google\Cloud\VMMigration\V1\BootDiskDefaults\DiskImageDefaults $var
     * @return $this
     */
    public function setImage($var)
    {
        GPBUtil::checkMessage($var, \Google\Cloud\VMMigration\V1\BootDiskDefaults\DiskImageDefaults::class);
        $this->writeOneof(3, $var);

        return $this;
    }

    /**
     * Optional. The name of the disk.
     *
     * Generated from protobuf field <code>string disk_name = 1 [(.google.api.field_behavior) = OPTIONAL];</code>
     * @return string
     */
    public function getDiskName()
    {
        return $this->disk_name;
    }

    /**
     * Optional. The name of the disk.
     *
     * Generated from protobuf field <code>string disk_name = 1 [(.google.api.field_behavior) = OPTIONAL];</code>
     * @param string $var
     * @return $this
     */
    public function setDiskName($var)
    {
        GPBUtil::checkString($var, True);
        $this->disk_name = $var;

        return $this;
    }

    /**
     * Optional. The type of disk provisioning to use for the VM.
     *
     * Generated from protobuf field <code>.google.cloud.vmmigration.v1.ComputeEngineDiskType disk_type = 2 [(.google.api.field_behavior) = OPTIONAL];</code>
     * @return int
     */
    public function getDiskType()
    {
        return $this->disk_type;
    }

    /**
     * Optional. The type of disk provisioning to use for the VM.
     *
     * Generated from protobuf field <code>.google.cloud.vmmigration.v1.ComputeEngineDiskType disk_type = 2 [(.google.api.field_behavior) = OPTIONAL];</code>
     * @param int $var
     * @return $this
     */
    public function setDiskType($var)
    {
        GPBUtil::checkEnum($var, \Google\Cloud\VMMigration\V1\ComputeEngineDiskType::class);
        $this->disk_type = $var;

        return $this;
    }

    /**
     * Optional. Specifies a unique device name of your choice that is reflected
     * into the /dev/disk/by-id/google-* tree of a Linux operating system running
     * within the instance. If not specified, the server chooses a default device
     * name to apply to this disk, in the form persistent-disk-x, where x is a
     * number assigned by Google Compute Engine. This field is only applicable for
     * persistent disks.
     *
     * Generated from protobuf field <code>string device_name = 4 [(.google.api.field_behavior) = OPTIONAL];</code>
     * @return string
     */
    public function getDeviceName()
    {
        return $this->device_name;
    }

    /**
     * Optional. Specifies a unique device name of your choice that is reflected
     * into the /dev/disk/by-id/google-* tree of a Linux operating system running
     * within the instance. If not specified, the server chooses a default device
     * name to apply to this disk, in the form persistent-disk-x, where x is a
     * number assigned by Google Compute Engine. This field is only applicable for
     * persistent disks.
     *
     * Generated from protobuf field <code>string device_name = 4 [(.google.api.field_behavior) = OPTIONAL];</code>
     * @param string $var
     * @return $this
     */
    public function setDeviceName($var)
    {
        GPBUtil::checkString($var, True);
        $this->device_name = $var;

        return $this;
    }

    /**
     * Optional. The encryption to apply to the boot disk.
     *
     * Generated from protobuf field <code>.google.cloud.vmmigration.v1.Encryption encryption = 5 [(.google.api.field_behavior) = OPTIONAL];</code>
     * @return \Google\Cloud\VMMigration\V1\Encryption|null
     */
    public function getEncryption()
    {
        return $this->encryption;
    }

    public function hasEncryption()
    {
        return isset($this->encryption);
    }

    public function clearEncryption()
    {
        unset($this->encryption);
    }

    /**
     * Optional. The encryption to apply to the boot disk.
     *
     * Generated from protobuf field <code>.google.cloud.vmmigration.v1.Encryption encryption = 5 [(.google.api.field_behavior) = OPTIONAL];</code>
     * @param \Google\Cloud\VMMigration\V1\Encryption $var
     * @return $this
     */
    public function setEncryption($var)
    {
        GPBUtil::checkMessage($var, \Google\Cloud\VMMigration\V1\Encryption::class);
        $this->encryption = $var;

        return $this;
    }

    /**
     * @return string
     */
    public function getSource()
    {
        return $this->whichOneof("source");
    }

}

