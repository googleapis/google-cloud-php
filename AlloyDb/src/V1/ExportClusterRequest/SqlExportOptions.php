<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/cloud/alloydb/v1/service.proto

namespace Google\Cloud\AlloyDb\V1\ExportClusterRequest;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Options for exporting data in SQL format.
 *
 * Generated from protobuf message <code>google.cloud.alloydb.v1.ExportClusterRequest.SqlExportOptions</code>
 */
class SqlExportOptions extends \Google\Protobuf\Internal\Message
{
    /**
     * Optional. Tables to export from.
     *
     * Generated from protobuf field <code>repeated string tables = 1 [(.google.api.field_behavior) = OPTIONAL];</code>
     */
    private $tables;
    /**
     * Optional. If true, only export the schema.
     *
     * Generated from protobuf field <code>optional bool schema_only = 2 [(.google.api.field_behavior) = OPTIONAL];</code>
     */
    protected $schema_only = null;
    /**
     * Optional. If true, output commands to DROP all the dumped database
     * objects prior to outputting the commands for creating them.
     *
     * Generated from protobuf field <code>optional bool clean_target_objects = 3 [(.google.api.field_behavior) = OPTIONAL];</code>
     */
    protected $clean_target_objects = null;
    /**
     * Optional. If true, use DROP ... IF EXISTS commands to check for the
     * object's existence before dropping it in clean_target_objects mode.
     *
     * Generated from protobuf field <code>optional bool if_exist_target_objects = 4 [(.google.api.field_behavior) = OPTIONAL];</code>
     */
    protected $if_exist_target_objects = null;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type array<string>|\Google\Protobuf\Internal\RepeatedField $tables
     *           Optional. Tables to export from.
     *     @type bool $schema_only
     *           Optional. If true, only export the schema.
     *     @type bool $clean_target_objects
     *           Optional. If true, output commands to DROP all the dumped database
     *           objects prior to outputting the commands for creating them.
     *     @type bool $if_exist_target_objects
     *           Optional. If true, use DROP ... IF EXISTS commands to check for the
     *           object's existence before dropping it in clean_target_objects mode.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Google\Cloud\Alloydb\V1\Service::initOnce();
        parent::__construct($data);
    }

    /**
     * Optional. Tables to export from.
     *
     * Generated from protobuf field <code>repeated string tables = 1 [(.google.api.field_behavior) = OPTIONAL];</code>
     * @return \Google\Protobuf\Internal\RepeatedField
     */
    public function getTables()
    {
        return $this->tables;
    }

    /**
     * Optional. Tables to export from.
     *
     * Generated from protobuf field <code>repeated string tables = 1 [(.google.api.field_behavior) = OPTIONAL];</code>
     * @param array<string>|\Google\Protobuf\Internal\RepeatedField $var
     * @return $this
     */
    public function setTables($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::STRING);
        $this->tables = $arr;

        return $this;
    }

    /**
     * Optional. If true, only export the schema.
     *
     * Generated from protobuf field <code>optional bool schema_only = 2 [(.google.api.field_behavior) = OPTIONAL];</code>
     * @return bool
     */
    public function getSchemaOnly()
    {
        return isset($this->schema_only) ? $this->schema_only : false;
    }

    public function hasSchemaOnly()
    {
        return isset($this->schema_only);
    }

    public function clearSchemaOnly()
    {
        unset($this->schema_only);
    }

    /**
     * Optional. If true, only export the schema.
     *
     * Generated from protobuf field <code>optional bool schema_only = 2 [(.google.api.field_behavior) = OPTIONAL];</code>
     * @param bool $var
     * @return $this
     */
    public function setSchemaOnly($var)
    {
        GPBUtil::checkBool($var);
        $this->schema_only = $var;

        return $this;
    }

    /**
     * Optional. If true, output commands to DROP all the dumped database
     * objects prior to outputting the commands for creating them.
     *
     * Generated from protobuf field <code>optional bool clean_target_objects = 3 [(.google.api.field_behavior) = OPTIONAL];</code>
     * @return bool
     */
    public function getCleanTargetObjects()
    {
        return isset($this->clean_target_objects) ? $this->clean_target_objects : false;
    }

    public function hasCleanTargetObjects()
    {
        return isset($this->clean_target_objects);
    }

    public function clearCleanTargetObjects()
    {
        unset($this->clean_target_objects);
    }

    /**
     * Optional. If true, output commands to DROP all the dumped database
     * objects prior to outputting the commands for creating them.
     *
     * Generated from protobuf field <code>optional bool clean_target_objects = 3 [(.google.api.field_behavior) = OPTIONAL];</code>
     * @param bool $var
     * @return $this
     */
    public function setCleanTargetObjects($var)
    {
        GPBUtil::checkBool($var);
        $this->clean_target_objects = $var;

        return $this;
    }

    /**
     * Optional. If true, use DROP ... IF EXISTS commands to check for the
     * object's existence before dropping it in clean_target_objects mode.
     *
     * Generated from protobuf field <code>optional bool if_exist_target_objects = 4 [(.google.api.field_behavior) = OPTIONAL];</code>
     * @return bool
     */
    public function getIfExistTargetObjects()
    {
        return isset($this->if_exist_target_objects) ? $this->if_exist_target_objects : false;
    }

    public function hasIfExistTargetObjects()
    {
        return isset($this->if_exist_target_objects);
    }

    public function clearIfExistTargetObjects()
    {
        unset($this->if_exist_target_objects);
    }

    /**
     * Optional. If true, use DROP ... IF EXISTS commands to check for the
     * object's existence before dropping it in clean_target_objects mode.
     *
     * Generated from protobuf field <code>optional bool if_exist_target_objects = 4 [(.google.api.field_behavior) = OPTIONAL];</code>
     * @param bool $var
     * @return $this
     */
    public function setIfExistTargetObjects($var)
    {
        GPBUtil::checkBool($var);
        $this->if_exist_target_objects = $var;

        return $this;
    }

}


