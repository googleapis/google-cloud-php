<?php
/*
 * Copyright 2023 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * GENERATED CODE WARNING
 * Generated by gapic-generator-php from the file
 * https://github.com/googleapis/googleapis/blob/master/google/cloud/bigquery/dataexchange/v1beta1/dataexchange.proto
 * Updates to the above are reflected here through a refresh process.
 *
 * @experimental
 */

namespace Google\Cloud\BigQuery\DataExchange\V1beta1\Client\BaseClient;

use Google\ApiCore\ApiException;
use Google\ApiCore\CredentialsWrapper;
use Google\ApiCore\GapicClientTrait;
use Google\ApiCore\PagedListResponse;
use Google\ApiCore\ResourceHelperTrait;
use Google\ApiCore\RetrySettings;
use Google\ApiCore\Transport\TransportInterface;
use Google\ApiCore\ValidationException;
use Google\Auth\FetchAuthTokenInterface;
use Google\Cloud\BigQuery\DataExchange\V1beta1\CreateDataExchangeRequest;
use Google\Cloud\BigQuery\DataExchange\V1beta1\CreateListingRequest;
use Google\Cloud\BigQuery\DataExchange\V1beta1\DataExchange;
use Google\Cloud\BigQuery\DataExchange\V1beta1\DeleteDataExchangeRequest;
use Google\Cloud\BigQuery\DataExchange\V1beta1\DeleteListingRequest;
use Google\Cloud\BigQuery\DataExchange\V1beta1\GetDataExchangeRequest;
use Google\Cloud\BigQuery\DataExchange\V1beta1\GetListingRequest;
use Google\Cloud\BigQuery\DataExchange\V1beta1\ListDataExchangesRequest;
use Google\Cloud\BigQuery\DataExchange\V1beta1\ListListingsRequest;
use Google\Cloud\BigQuery\DataExchange\V1beta1\ListOrgDataExchangesRequest;
use Google\Cloud\BigQuery\DataExchange\V1beta1\Listing;
use Google\Cloud\BigQuery\DataExchange\V1beta1\SubscribeListingRequest;
use Google\Cloud\BigQuery\DataExchange\V1beta1\SubscribeListingResponse;
use Google\Cloud\BigQuery\DataExchange\V1beta1\UpdateDataExchangeRequest;
use Google\Cloud\BigQuery\DataExchange\V1beta1\UpdateListingRequest;
use Google\Cloud\Iam\V1\GetIamPolicyRequest;
use Google\Cloud\Iam\V1\Policy;
use Google\Cloud\Iam\V1\SetIamPolicyRequest;
use Google\Cloud\Iam\V1\TestIamPermissionsRequest;
use Google\Cloud\Iam\V1\TestIamPermissionsResponse;
use Google\Cloud\Location\GetLocationRequest;
use Google\Cloud\Location\ListLocationsRequest;
use Google\Cloud\Location\Location;
use GuzzleHttp\Promise\PromiseInterface;

/**
 * Service Description: The `AnalyticsHubService` API facilitates data sharing within and across
 * organizations. It allows data providers to publish listings that reference
 * shared datasets. With Analytics Hub, users can discover and search for
 * listings that they have access to. Subscribers can view and subscribe to
 * listings. When you subscribe to a listing, Analytics Hub creates a linked
 * dataset in your project.
 *
 * This class provides the ability to make remote calls to the backing service through method
 * calls that map to API methods.
 *
 * Many parameters require resource names to be formatted in a particular way. To
 * assist with these names, this class includes a format method for each type of
 * name, and additionally a parseName method to extract the individual identifiers
 * contained within formatted names that are returned by the API.
 *
 * This class is currently experimental and may be subject to changes.
 *
 * @experimental
 *
 * @internal
 *
 * @method PromiseInterface createDataExchangeAsync(CreateDataExchangeRequest $request, array $optionalArgs = [])
 * @method PromiseInterface createListingAsync(CreateListingRequest $request, array $optionalArgs = [])
 * @method PromiseInterface deleteDataExchangeAsync(DeleteDataExchangeRequest $request, array $optionalArgs = [])
 * @method PromiseInterface deleteListingAsync(DeleteListingRequest $request, array $optionalArgs = [])
 * @method PromiseInterface getDataExchangeAsync(GetDataExchangeRequest $request, array $optionalArgs = [])
 * @method PromiseInterface getIamPolicyAsync(GetIamPolicyRequest $request, array $optionalArgs = [])
 * @method PromiseInterface getListingAsync(GetListingRequest $request, array $optionalArgs = [])
 * @method PromiseInterface listDataExchangesAsync(ListDataExchangesRequest $request, array $optionalArgs = [])
 * @method PromiseInterface listListingsAsync(ListListingsRequest $request, array $optionalArgs = [])
 * @method PromiseInterface listOrgDataExchangesAsync(ListOrgDataExchangesRequest $request, array $optionalArgs = [])
 * @method PromiseInterface setIamPolicyAsync(SetIamPolicyRequest $request, array $optionalArgs = [])
 * @method PromiseInterface subscribeListingAsync(SubscribeListingRequest $request, array $optionalArgs = [])
 * @method PromiseInterface testIamPermissionsAsync(TestIamPermissionsRequest $request, array $optionalArgs = [])
 * @method PromiseInterface updateDataExchangeAsync(UpdateDataExchangeRequest $request, array $optionalArgs = [])
 * @method PromiseInterface updateListingAsync(UpdateListingRequest $request, array $optionalArgs = [])
 * @method PromiseInterface getLocationAsync(GetLocationRequest $request, array $optionalArgs = [])
 * @method PromiseInterface listLocationsAsync(ListLocationsRequest $request, array $optionalArgs = [])
 */
abstract class AnalyticsHubServiceBaseClient
{
    use GapicClientTrait;
    use ResourceHelperTrait;

    /** The name of the service. */
    private const SERVICE_NAME = 'google.cloud.bigquery.dataexchange.v1beta1.AnalyticsHubService';

    /** The default address of the service. */
    private const SERVICE_ADDRESS = 'analyticshub.googleapis.com';

    /** The default port of the service. */
    private const DEFAULT_SERVICE_PORT = 443;

    /** The name of the code generator, to be included in the agent header. */
    private const CODEGEN_NAME = 'gapic';

    /** The default scopes required by the service. */
    public static $serviceScopes = [
        'https://www.googleapis.com/auth/bigquery',
        'https://www.googleapis.com/auth/cloud-platform',
    ];

    private static function getClientDefaults()
    {
        return [
            'serviceName' => self::SERVICE_NAME,
            'apiEndpoint' => self::SERVICE_ADDRESS . ':' . self::DEFAULT_SERVICE_PORT,
            'clientConfig' => __DIR__ . '/../../resources/analytics_hub_service_client_config.json',
            'descriptorsConfigPath' => __DIR__ . '/../../resources/analytics_hub_service_descriptor_config.php',
            'gcpApiConfigPath' => __DIR__ . '/../../resources/analytics_hub_service_grpc_config.json',
            'credentialsConfig' => [
                'defaultScopes' => self::$serviceScopes,
            ],
            'transportConfig' => [
                'rest' => [
                    'restClientConfigPath' => __DIR__ . '/../../resources/analytics_hub_service_rest_client_config.php',
                ],
            ],
        ];
    }

    /**
     * Formats a string containing the fully-qualified path to represent a
     * data_exchange resource.
     *
     * @param string $project
     * @param string $location
     * @param string $dataExchange
     *
     * @return string The formatted data_exchange resource.
     *
     * @experimental
     */
    public static function dataExchangeName(string $project, string $location, string $dataExchange): string
    {
        return self::getPathTemplate('dataExchange')->render([
            'project' => $project,
            'location' => $location,
            'data_exchange' => $dataExchange,
        ]);
    }

    /**
     * Formats a string containing the fully-qualified path to represent a dataset
     * resource.
     *
     * @param string $project
     * @param string $dataset
     *
     * @return string The formatted dataset resource.
     *
     * @experimental
     */
    public static function datasetName(string $project, string $dataset): string
    {
        return self::getPathTemplate('dataset')->render([
            'project' => $project,
            'dataset' => $dataset,
        ]);
    }

    /**
     * Formats a string containing the fully-qualified path to represent a listing
     * resource.
     *
     * @param string $project
     * @param string $location
     * @param string $dataExchange
     * @param string $listing
     *
     * @return string The formatted listing resource.
     *
     * @experimental
     */
    public static function listingName(string $project, string $location, string $dataExchange, string $listing): string
    {
        return self::getPathTemplate('listing')->render([
            'project' => $project,
            'location' => $location,
            'data_exchange' => $dataExchange,
            'listing' => $listing,
        ]);
    }

    /**
     * Formats a string containing the fully-qualified path to represent a location
     * resource.
     *
     * @param string $project
     * @param string $location
     *
     * @return string The formatted location resource.
     *
     * @experimental
     */
    public static function locationName(string $project, string $location): string
    {
        return self::getPathTemplate('location')->render([
            'project' => $project,
            'location' => $location,
        ]);
    }

    /**
     * Parses a formatted name string and returns an associative array of the components in the name.
     * The following name formats are supported:
     * Template: Pattern
     * - dataExchange: projects/{project}/locations/{location}/dataExchanges/{data_exchange}
     * - dataset: projects/{project}/datasets/{dataset}
     * - listing: projects/{project}/locations/{location}/dataExchanges/{data_exchange}/listings/{listing}
     * - location: projects/{project}/locations/{location}
     *
     * The optional $template argument can be supplied to specify a particular pattern,
     * and must match one of the templates listed above. If no $template argument is
     * provided, or if the $template argument does not match one of the templates
     * listed, then parseName will check each of the supported templates, and return
     * the first match.
     *
     * @param string $formattedName The formatted name string
     * @param string $template      Optional name of template to match
     *
     * @return array An associative array from name component IDs to component values.
     *
     * @throws ValidationException If $formattedName could not be matched.
     *
     * @experimental
     */
    public static function parseName(string $formattedName, string $template = null): array
    {
        return self::parseFormattedName($formattedName, $template);
    }

    /**
     * Constructor.
     *
     * @param array $options {
     *     Optional. Options for configuring the service API wrapper.
     *
     *     @type string $apiEndpoint
     *           The address of the API remote host. May optionally include the port, formatted
     *           as "<uri>:<port>". Default 'analyticshub.googleapis.com:443'.
     *     @type string|array|FetchAuthTokenInterface|CredentialsWrapper $credentials
     *           The credentials to be used by the client to authorize API calls. This option
     *           accepts either a path to a credentials file, or a decoded credentials file as a
     *           PHP array.
     *           *Advanced usage*: In addition, this option can also accept a pre-constructed
     *           {@see \Google\Auth\FetchAuthTokenInterface} object or
     *           {@see \Google\ApiCore\CredentialsWrapper} object. Note that when one of these
     *           objects are provided, any settings in $credentialsConfig will be ignored.
     *     @type array $credentialsConfig
     *           Options used to configure credentials, including auth token caching, for the
     *           client. For a full list of supporting configuration options, see
     *           {@see \Google\ApiCore\CredentialsWrapper::build()} .
     *     @type bool $disableRetries
     *           Determines whether or not retries defined by the client configuration should be
     *           disabled. Defaults to `false`.
     *     @type string|array $clientConfig
     *           Client method configuration, including retry settings. This option can be either
     *           a path to a JSON file, or a PHP array containing the decoded JSON data. By
     *           default this settings points to the default client config file, which is
     *           provided in the resources folder.
     *     @type string|TransportInterface $transport
     *           The transport used for executing network requests. May be either the string
     *           `rest` or `grpc`. Defaults to `grpc` if gRPC support is detected on the system.
     *           *Advanced usage*: Additionally, it is possible to pass in an already
     *           instantiated {@see \Google\ApiCore\Transport\TransportInterface} object. Note
     *           that when this object is provided, any settings in $transportConfig, and any
     *           $apiEndpoint setting, will be ignored.
     *     @type array $transportConfig
     *           Configuration options that will be used to construct the transport. Options for
     *           each supported transport type should be passed in a key for that transport. For
     *           example:
     *           $transportConfig = [
     *               'grpc' => [...],
     *               'rest' => [...],
     *           ];
     *           See the {@see \Google\ApiCore\Transport\GrpcTransport::build()} and
     *           {@see \Google\ApiCore\Transport\RestTransport::build()} methods for the
     *           supported options.
     *     @type callable $clientCertSource
     *           A callable which returns the client cert as a string. This can be used to
     *           provide a certificate and private key to the transport layer for mTLS.
     * }
     *
     * @throws ValidationException
     *
     * @experimental
     */
    public function __construct(array $options = [])
    {
        $clientOptions = $this->buildClientOptions($options);
        $this->setClientOptions($clientOptions);
    }

    /** Handles execution of the async variants for each documented method. */
    public function __call($method, $args)
    {
        if (substr($method, -5) !== 'Async') {
            trigger_error('Call to undefined method ' . __CLASS__ . "::$method()", E_USER_ERROR);
        }

        array_unshift($args, substr($method, 0, -5));
        return call_user_func_array([$this, 'startAsyncCall'], $args);
    }

    /**
     * Creates a new data exchange.
     *
     * The async variant is {@see self::createDataExchangeAsync()} .
     *
     * @example samples/V1beta1/AnalyticsHubServiceClient/create_data_exchange.php
     *
     * @param CreateDataExchangeRequest $request     A request to house fields associated with the call.
     * @param array                     $callOptions {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return DataExchange
     *
     * @throws ApiException Thrown if the API call fails.
     *
     * @experimental
     */
    public function createDataExchange(CreateDataExchangeRequest $request, array $callOptions = []): DataExchange
    {
        return $this->startApiCall('CreateDataExchange', $request, $callOptions)->wait();
    }

    /**
     * Creates a new listing.
     *
     * The async variant is {@see self::createListingAsync()} .
     *
     * @example samples/V1beta1/AnalyticsHubServiceClient/create_listing.php
     *
     * @param CreateListingRequest $request     A request to house fields associated with the call.
     * @param array                $callOptions {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return Listing
     *
     * @throws ApiException Thrown if the API call fails.
     *
     * @experimental
     */
    public function createListing(CreateListingRequest $request, array $callOptions = []): Listing
    {
        return $this->startApiCall('CreateListing', $request, $callOptions)->wait();
    }

    /**
     * Deletes an existing data exchange.
     *
     * The async variant is {@see self::deleteDataExchangeAsync()} .
     *
     * @example samples/V1beta1/AnalyticsHubServiceClient/delete_data_exchange.php
     *
     * @param DeleteDataExchangeRequest $request     A request to house fields associated with the call.
     * @param array                     $callOptions {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @throws ApiException Thrown if the API call fails.
     *
     * @experimental
     */
    public function deleteDataExchange(DeleteDataExchangeRequest $request, array $callOptions = []): void
    {
        $this->startApiCall('DeleteDataExchange', $request, $callOptions)->wait();
    }

    /**
     * Deletes a listing.
     *
     * The async variant is {@see self::deleteListingAsync()} .
     *
     * @example samples/V1beta1/AnalyticsHubServiceClient/delete_listing.php
     *
     * @param DeleteListingRequest $request     A request to house fields associated with the call.
     * @param array                $callOptions {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @throws ApiException Thrown if the API call fails.
     *
     * @experimental
     */
    public function deleteListing(DeleteListingRequest $request, array $callOptions = []): void
    {
        $this->startApiCall('DeleteListing', $request, $callOptions)->wait();
    }

    /**
     * Gets the details of a data exchange.
     *
     * The async variant is {@see self::getDataExchangeAsync()} .
     *
     * @example samples/V1beta1/AnalyticsHubServiceClient/get_data_exchange.php
     *
     * @param GetDataExchangeRequest $request     A request to house fields associated with the call.
     * @param array                  $callOptions {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return DataExchange
     *
     * @throws ApiException Thrown if the API call fails.
     *
     * @experimental
     */
    public function getDataExchange(GetDataExchangeRequest $request, array $callOptions = []): DataExchange
    {
        return $this->startApiCall('GetDataExchange', $request, $callOptions)->wait();
    }

    /**
     * Gets the IAM policy.
     *
     * The async variant is {@see self::getIamPolicyAsync()} .
     *
     * @example samples/V1beta1/AnalyticsHubServiceClient/get_iam_policy.php
     *
     * @param GetIamPolicyRequest $request     A request to house fields associated with the call.
     * @param array               $callOptions {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return Policy
     *
     * @throws ApiException Thrown if the API call fails.
     *
     * @experimental
     */
    public function getIamPolicy(GetIamPolicyRequest $request, array $callOptions = []): Policy
    {
        return $this->startApiCall('GetIamPolicy', $request, $callOptions)->wait();
    }

    /**
     * Gets the details of a listing.
     *
     * The async variant is {@see self::getListingAsync()} .
     *
     * @example samples/V1beta1/AnalyticsHubServiceClient/get_listing.php
     *
     * @param GetListingRequest $request     A request to house fields associated with the call.
     * @param array             $callOptions {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return Listing
     *
     * @throws ApiException Thrown if the API call fails.
     *
     * @experimental
     */
    public function getListing(GetListingRequest $request, array $callOptions = []): Listing
    {
        return $this->startApiCall('GetListing', $request, $callOptions)->wait();
    }

    /**
     * Lists all data exchanges in a given project and location.
     *
     * The async variant is {@see self::listDataExchangesAsync()} .
     *
     * @example samples/V1beta1/AnalyticsHubServiceClient/list_data_exchanges.php
     *
     * @param ListDataExchangesRequest $request     A request to house fields associated with the call.
     * @param array                    $callOptions {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return PagedListResponse
     *
     * @throws ApiException Thrown if the API call fails.
     *
     * @experimental
     */
    public function listDataExchanges(ListDataExchangesRequest $request, array $callOptions = []): PagedListResponse
    {
        return $this->startApiCall('ListDataExchanges', $request, $callOptions);
    }

    /**
     * Lists all listings in a given project and location.
     *
     * The async variant is {@see self::listListingsAsync()} .
     *
     * @example samples/V1beta1/AnalyticsHubServiceClient/list_listings.php
     *
     * @param ListListingsRequest $request     A request to house fields associated with the call.
     * @param array               $callOptions {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return PagedListResponse
     *
     * @throws ApiException Thrown if the API call fails.
     *
     * @experimental
     */
    public function listListings(ListListingsRequest $request, array $callOptions = []): PagedListResponse
    {
        return $this->startApiCall('ListListings', $request, $callOptions);
    }

    /**
     * Lists all data exchanges from projects in a given organization and
     * location.
     *
     * The async variant is {@see self::listOrgDataExchangesAsync()} .
     *
     * @example samples/V1beta1/AnalyticsHubServiceClient/list_org_data_exchanges.php
     *
     * @param ListOrgDataExchangesRequest $request     A request to house fields associated with the call.
     * @param array                       $callOptions {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return PagedListResponse
     *
     * @throws ApiException Thrown if the API call fails.
     *
     * @experimental
     */
    public function listOrgDataExchanges(ListOrgDataExchangesRequest $request, array $callOptions = []): PagedListResponse
    {
        return $this->startApiCall('ListOrgDataExchanges', $request, $callOptions);
    }

    /**
     * Sets the IAM policy.
     *
     * The async variant is {@see self::setIamPolicyAsync()} .
     *
     * @example samples/V1beta1/AnalyticsHubServiceClient/set_iam_policy.php
     *
     * @param SetIamPolicyRequest $request     A request to house fields associated with the call.
     * @param array               $callOptions {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return Policy
     *
     * @throws ApiException Thrown if the API call fails.
     *
     * @experimental
     */
    public function setIamPolicy(SetIamPolicyRequest $request, array $callOptions = []): Policy
    {
        return $this->startApiCall('SetIamPolicy', $request, $callOptions)->wait();
    }

    /**
     * Subscribes to a listing.
     *
     * Currently, with Analytics Hub, you can create listings that
     * reference only BigQuery datasets.
     * Upon subscription to a listing for a BigQuery dataset, Analytics Hub
     * creates a linked dataset in the subscriber's project.
     *
     * The async variant is {@see self::subscribeListingAsync()} .
     *
     * @example samples/V1beta1/AnalyticsHubServiceClient/subscribe_listing.php
     *
     * @param SubscribeListingRequest $request     A request to house fields associated with the call.
     * @param array                   $callOptions {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return SubscribeListingResponse
     *
     * @throws ApiException Thrown if the API call fails.
     *
     * @experimental
     */
    public function subscribeListing(SubscribeListingRequest $request, array $callOptions = []): SubscribeListingResponse
    {
        return $this->startApiCall('SubscribeListing', $request, $callOptions)->wait();
    }

    /**
     * Returns the permissions that a caller has.
     *
     * The async variant is {@see self::testIamPermissionsAsync()} .
     *
     * @example samples/V1beta1/AnalyticsHubServiceClient/test_iam_permissions.php
     *
     * @param TestIamPermissionsRequest $request     A request to house fields associated with the call.
     * @param array                     $callOptions {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return TestIamPermissionsResponse
     *
     * @throws ApiException Thrown if the API call fails.
     *
     * @experimental
     */
    public function testIamPermissions(TestIamPermissionsRequest $request, array $callOptions = []): TestIamPermissionsResponse
    {
        return $this->startApiCall('TestIamPermissions', $request, $callOptions)->wait();
    }

    /**
     * Updates an existing data exchange.
     *
     * The async variant is {@see self::updateDataExchangeAsync()} .
     *
     * @example samples/V1beta1/AnalyticsHubServiceClient/update_data_exchange.php
     *
     * @param UpdateDataExchangeRequest $request     A request to house fields associated with the call.
     * @param array                     $callOptions {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return DataExchange
     *
     * @throws ApiException Thrown if the API call fails.
     *
     * @experimental
     */
    public function updateDataExchange(UpdateDataExchangeRequest $request, array $callOptions = []): DataExchange
    {
        return $this->startApiCall('UpdateDataExchange', $request, $callOptions)->wait();
    }

    /**
     * Updates an existing listing.
     *
     * The async variant is {@see self::updateListingAsync()} .
     *
     * @example samples/V1beta1/AnalyticsHubServiceClient/update_listing.php
     *
     * @param UpdateListingRequest $request     A request to house fields associated with the call.
     * @param array                $callOptions {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return Listing
     *
     * @throws ApiException Thrown if the API call fails.
     *
     * @experimental
     */
    public function updateListing(UpdateListingRequest $request, array $callOptions = []): Listing
    {
        return $this->startApiCall('UpdateListing', $request, $callOptions)->wait();
    }

    /**
     * Gets information about a location.
     *
     * The async variant is {@see self::getLocationAsync()} .
     *
     * @example samples/V1beta1/AnalyticsHubServiceClient/get_location.php
     *
     * @param GetLocationRequest $request     A request to house fields associated with the call.
     * @param array              $callOptions {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return Location
     *
     * @throws ApiException Thrown if the API call fails.
     *
     * @experimental
     */
    public function getLocation(GetLocationRequest $request, array $callOptions = []): Location
    {
        return $this->startApiCall('GetLocation', $request, $callOptions)->wait();
    }

    /**
     * Lists information about the supported locations for this service.
     *
     * The async variant is {@see self::listLocationsAsync()} .
     *
     * @example samples/V1beta1/AnalyticsHubServiceClient/list_locations.php
     *
     * @param ListLocationsRequest $request     A request to house fields associated with the call.
     * @param array                $callOptions {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return PagedListResponse
     *
     * @throws ApiException Thrown if the API call fails.
     *
     * @experimental
     */
    public function listLocations(ListLocationsRequest $request, array $callOptions = []): PagedListResponse
    {
        return $this->startApiCall('ListLocations', $request, $callOptions);
    }
}
