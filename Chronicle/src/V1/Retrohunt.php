<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/cloud/chronicle/v1/rule.proto

namespace Google\Cloud\Chronicle\V1;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Retrohunt is an execution of a Rule over a time range in the past.
 *
 * Generated from protobuf message <code>google.cloud.chronicle.v1.Retrohunt</code>
 */
class Retrohunt extends \Google\Protobuf\Internal\Message
{
    /**
     * The resource name of the retrohunt.
     * Retrohunt is the child of a rule revision. {rule} in the format below is
     * structured as {rule_id&#64;revision_id}.
     * Format:
     * `projects/{project}/locations/{location}/instances/{instance}/rules/{rule}/retrohunts/{retrohunt}`
     *
     * Generated from protobuf field <code>string name = 1;</code>
     */
    protected $name = '';
    /**
     * Required. The start and end time of the event time range this retrohunt
     * processes.
     *
     * Generated from protobuf field <code>.google.type.Interval process_interval = 2 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    protected $process_interval = null;
    /**
     * Output only. The start and end time of the retrohunt execution. If the
     * retrohunt is not yet finished, the end time of the interval will not be
     * populated.
     *
     * Generated from protobuf field <code>.google.type.Interval execution_interval = 3 [(.google.api.field_behavior) = OUTPUT_ONLY];</code>
     */
    protected $execution_interval = null;
    /**
     * Output only. The state of the retrohunt.
     *
     * Generated from protobuf field <code>.google.cloud.chronicle.v1.Retrohunt.State state = 4 [(.google.api.field_behavior) = OUTPUT_ONLY];</code>
     */
    protected $state = 0;
    /**
     * Output only. Percent progress of the retrohunt towards completion, from
     * 0.00 to 100.00.
     *
     * Generated from protobuf field <code>float progress_percentage = 5 [(.google.api.field_behavior) = OUTPUT_ONLY];</code>
     */
    protected $progress_percentage = 0.0;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $name
     *           The resource name of the retrohunt.
     *           Retrohunt is the child of a rule revision. {rule} in the format below is
     *           structured as {rule_id&#64;revision_id}.
     *           Format:
     *           `projects/{project}/locations/{location}/instances/{instance}/rules/{rule}/retrohunts/{retrohunt}`
     *     @type \Google\Type\Interval $process_interval
     *           Required. The start and end time of the event time range this retrohunt
     *           processes.
     *     @type \Google\Type\Interval $execution_interval
     *           Output only. The start and end time of the retrohunt execution. If the
     *           retrohunt is not yet finished, the end time of the interval will not be
     *           populated.
     *     @type int $state
     *           Output only. The state of the retrohunt.
     *     @type float $progress_percentage
     *           Output only. Percent progress of the retrohunt towards completion, from
     *           0.00 to 100.00.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Google\Cloud\Chronicle\V1\Rule::initOnce();
        parent::__construct($data);
    }

    /**
     * The resource name of the retrohunt.
     * Retrohunt is the child of a rule revision. {rule} in the format below is
     * structured as {rule_id&#64;revision_id}.
     * Format:
     * `projects/{project}/locations/{location}/instances/{instance}/rules/{rule}/retrohunts/{retrohunt}`
     *
     * Generated from protobuf field <code>string name = 1;</code>
     * @return string
     */
    public function getName()
    {
        return $this->name;
    }

    /**
     * The resource name of the retrohunt.
     * Retrohunt is the child of a rule revision. {rule} in the format below is
     * structured as {rule_id&#64;revision_id}.
     * Format:
     * `projects/{project}/locations/{location}/instances/{instance}/rules/{rule}/retrohunts/{retrohunt}`
     *
     * Generated from protobuf field <code>string name = 1;</code>
     * @param string $var
     * @return $this
     */
    public function setName($var)
    {
        GPBUtil::checkString($var, True);
        $this->name = $var;

        return $this;
    }

    /**
     * Required. The start and end time of the event time range this retrohunt
     * processes.
     *
     * Generated from protobuf field <code>.google.type.Interval process_interval = 2 [(.google.api.field_behavior) = REQUIRED];</code>
     * @return \Google\Type\Interval|null
     */
    public function getProcessInterval()
    {
        return $this->process_interval;
    }

    public function hasProcessInterval()
    {
        return isset($this->process_interval);
    }

    public function clearProcessInterval()
    {
        unset($this->process_interval);
    }

    /**
     * Required. The start and end time of the event time range this retrohunt
     * processes.
     *
     * Generated from protobuf field <code>.google.type.Interval process_interval = 2 [(.google.api.field_behavior) = REQUIRED];</code>
     * @param \Google\Type\Interval $var
     * @return $this
     */
    public function setProcessInterval($var)
    {
        GPBUtil::checkMessage($var, \Google\Type\Interval::class);
        $this->process_interval = $var;

        return $this;
    }

    /**
     * Output only. The start and end time of the retrohunt execution. If the
     * retrohunt is not yet finished, the end time of the interval will not be
     * populated.
     *
     * Generated from protobuf field <code>.google.type.Interval execution_interval = 3 [(.google.api.field_behavior) = OUTPUT_ONLY];</code>
     * @return \Google\Type\Interval|null
     */
    public function getExecutionInterval()
    {
        return $this->execution_interval;
    }

    public function hasExecutionInterval()
    {
        return isset($this->execution_interval);
    }

    public function clearExecutionInterval()
    {
        unset($this->execution_interval);
    }

    /**
     * Output only. The start and end time of the retrohunt execution. If the
     * retrohunt is not yet finished, the end time of the interval will not be
     * populated.
     *
     * Generated from protobuf field <code>.google.type.Interval execution_interval = 3 [(.google.api.field_behavior) = OUTPUT_ONLY];</code>
     * @param \Google\Type\Interval $var
     * @return $this
     */
    public function setExecutionInterval($var)
    {
        GPBUtil::checkMessage($var, \Google\Type\Interval::class);
        $this->execution_interval = $var;

        return $this;
    }

    /**
     * Output only. The state of the retrohunt.
     *
     * Generated from protobuf field <code>.google.cloud.chronicle.v1.Retrohunt.State state = 4 [(.google.api.field_behavior) = OUTPUT_ONLY];</code>
     * @return int
     */
    public function getState()
    {
        return $this->state;
    }

    /**
     * Output only. The state of the retrohunt.
     *
     * Generated from protobuf field <code>.google.cloud.chronicle.v1.Retrohunt.State state = 4 [(.google.api.field_behavior) = OUTPUT_ONLY];</code>
     * @param int $var
     * @return $this
     */
    public function setState($var)
    {
        GPBUtil::checkEnum($var, \Google\Cloud\Chronicle\V1\Retrohunt\State::class);
        $this->state = $var;

        return $this;
    }

    /**
     * Output only. Percent progress of the retrohunt towards completion, from
     * 0.00 to 100.00.
     *
     * Generated from protobuf field <code>float progress_percentage = 5 [(.google.api.field_behavior) = OUTPUT_ONLY];</code>
     * @return float
     */
    public function getProgressPercentage()
    {
        return $this->progress_percentage;
    }

    /**
     * Output only. Percent progress of the retrohunt towards completion, from
     * 0.00 to 100.00.
     *
     * Generated from protobuf field <code>float progress_percentage = 5 [(.google.api.field_behavior) = OUTPUT_ONLY];</code>
     * @param float $var
     * @return $this
     */
    public function setProgressPercentage($var)
    {
        GPBUtil::checkFloat($var);
        $this->progress_percentage = $var;

        return $this;
    }

}

