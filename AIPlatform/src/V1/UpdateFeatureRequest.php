<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/cloud/aiplatform/v1/featurestore_service.proto

namespace Google\Cloud\AIPlatform\V1;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Request message for
 * [FeaturestoreService.UpdateFeature][google.cloud.aiplatform.v1.FeaturestoreService.UpdateFeature].
 *
 * Generated from protobuf message <code>google.cloud.aiplatform.v1.UpdateFeatureRequest</code>
 */
class UpdateFeatureRequest extends \Google\Protobuf\Internal\Message
{
    /**
     * Required. The Feature's `name` field is used to identify the Feature to be
     * updated.
     * Format:
     * `projects/{project}/locations/{location}/featurestores/{featurestore}/entityTypes/{entity_type}/features/{feature}`
     *
     * Generated from protobuf field <code>.google.cloud.aiplatform.v1.Feature feature = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    private $feature = null;
    /**
     * Field mask is used to specify the fields to be overwritten in the
     * Features resource by the update.
     * The fields specified in the update_mask are relative to the resource, not
     * the full request. A field will be overwritten if it is in the mask. If the
     * user does not provide a mask then only the non-empty fields present in the
     * request will be overwritten. Set the update_mask to `*` to override all
     * fields.
     * Updatable fields:
     *   * `description`
     *   * `labels`
     *   * `disable_monitoring`
     *
     * Generated from protobuf field <code>.google.protobuf.FieldMask update_mask = 2;</code>
     */
    private $update_mask = null;

    /**
     * @param \Google\Cloud\AIPlatform\V1\Feature $feature    Required. The Feature's `name` field is used to identify the Feature to be
     *                                                        updated.
     *                                                        Format:
     *                                                        `projects/{project}/locations/{location}/featurestores/{featurestore}/entityTypes/{entity_type}/features/{feature}`
     * @param \Google\Protobuf\FieldMask          $updateMask Field mask is used to specify the fields to be overwritten in the
     *                                                        Features resource by the update.
     *                                                        The fields specified in the update_mask are relative to the resource, not
     *                                                        the full request. A field will be overwritten if it is in the mask. If the
     *                                                        user does not provide a mask then only the non-empty fields present in the
     *                                                        request will be overwritten. Set the update_mask to `*` to override all
     *                                                        fields.
     *
     *                                                        Updatable fields:
     *
     *                                                        * `description`
     *                                                        * `labels`
     *                                                        * `disable_monitoring`
     *
     * @return \Google\Cloud\AIPlatform\V1\UpdateFeatureRequest
     *
     * @experimental
     */
    public static function build(\Google\Cloud\AIPlatform\V1\Feature $feature, \Google\Protobuf\FieldMask $updateMask): self
    {
        return (new self())
            ->setFeature($feature)
            ->setUpdateMask($updateMask);
    }

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type \Google\Cloud\AIPlatform\V1\Feature $feature
     *           Required. The Feature's `name` field is used to identify the Feature to be
     *           updated.
     *           Format:
     *           `projects/{project}/locations/{location}/featurestores/{featurestore}/entityTypes/{entity_type}/features/{feature}`
     *     @type \Google\Protobuf\FieldMask $update_mask
     *           Field mask is used to specify the fields to be overwritten in the
     *           Features resource by the update.
     *           The fields specified in the update_mask are relative to the resource, not
     *           the full request. A field will be overwritten if it is in the mask. If the
     *           user does not provide a mask then only the non-empty fields present in the
     *           request will be overwritten. Set the update_mask to `*` to override all
     *           fields.
     *           Updatable fields:
     *             * `description`
     *             * `labels`
     *             * `disable_monitoring`
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Google\Cloud\Aiplatform\V1\FeaturestoreService::initOnce();
        parent::__construct($data);
    }

    /**
     * Required. The Feature's `name` field is used to identify the Feature to be
     * updated.
     * Format:
     * `projects/{project}/locations/{location}/featurestores/{featurestore}/entityTypes/{entity_type}/features/{feature}`
     *
     * Generated from protobuf field <code>.google.cloud.aiplatform.v1.Feature feature = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     * @return \Google\Cloud\AIPlatform\V1\Feature|null
     */
    public function getFeature()
    {
        return $this->feature;
    }

    public function hasFeature()
    {
        return isset($this->feature);
    }

    public function clearFeature()
    {
        unset($this->feature);
    }

    /**
     * Required. The Feature's `name` field is used to identify the Feature to be
     * updated.
     * Format:
     * `projects/{project}/locations/{location}/featurestores/{featurestore}/entityTypes/{entity_type}/features/{feature}`
     *
     * Generated from protobuf field <code>.google.cloud.aiplatform.v1.Feature feature = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     * @param \Google\Cloud\AIPlatform\V1\Feature $var
     * @return $this
     */
    public function setFeature($var)
    {
        GPBUtil::checkMessage($var, \Google\Cloud\AIPlatform\V1\Feature::class);
        $this->feature = $var;

        return $this;
    }

    /**
     * Field mask is used to specify the fields to be overwritten in the
     * Features resource by the update.
     * The fields specified in the update_mask are relative to the resource, not
     * the full request. A field will be overwritten if it is in the mask. If the
     * user does not provide a mask then only the non-empty fields present in the
     * request will be overwritten. Set the update_mask to `*` to override all
     * fields.
     * Updatable fields:
     *   * `description`
     *   * `labels`
     *   * `disable_monitoring`
     *
     * Generated from protobuf field <code>.google.protobuf.FieldMask update_mask = 2;</code>
     * @return \Google\Protobuf\FieldMask|null
     */
    public function getUpdateMask()
    {
        return $this->update_mask;
    }

    public function hasUpdateMask()
    {
        return isset($this->update_mask);
    }

    public function clearUpdateMask()
    {
        unset($this->update_mask);
    }

    /**
     * Field mask is used to specify the fields to be overwritten in the
     * Features resource by the update.
     * The fields specified in the update_mask are relative to the resource, not
     * the full request. A field will be overwritten if it is in the mask. If the
     * user does not provide a mask then only the non-empty fields present in the
     * request will be overwritten. Set the update_mask to `*` to override all
     * fields.
     * Updatable fields:
     *   * `description`
     *   * `labels`
     *   * `disable_monitoring`
     *
     * Generated from protobuf field <code>.google.protobuf.FieldMask update_mask = 2;</code>
     * @param \Google\Protobuf\FieldMask $var
     * @return $this
     */
    public function setUpdateMask($var)
    {
        GPBUtil::checkMessage($var, \Google\Protobuf\FieldMask::class);
        $this->update_mask = $var;

        return $this;
    }

}

