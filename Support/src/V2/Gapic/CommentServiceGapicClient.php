<?php
/*
 * Copyright 2023 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * GENERATED CODE WARNING
 * Generated by gapic-generator-php from the file
 * https://github.com/googleapis/googleapis/blob/master/google/cloud/support/v2/comment_service.proto
 * Updates to the above are reflected here through a refresh process.
 */

namespace Google\Cloud\Support\V2\Gapic;

use Google\ApiCore\ApiException;
use Google\ApiCore\CredentialsWrapper;
use Google\ApiCore\GapicClientTrait;
use Google\ApiCore\PathTemplate;
use Google\ApiCore\RequestParamsHeaderDescriptor;
use Google\ApiCore\RetrySettings;
use Google\ApiCore\Transport\TransportInterface;
use Google\ApiCore\ValidationException;
use Google\Auth\FetchAuthTokenInterface;
use Google\Cloud\Support\V2\Comment;
use Google\Cloud\Support\V2\CreateCommentRequest;
use Google\Cloud\Support\V2\ListCommentsRequest;
use Google\Cloud\Support\V2\ListCommentsResponse;

/**
 * Service Description: A service to manage comments on cases.
 *
 * This class provides the ability to make remote calls to the backing service through method
 * calls that map to API methods. Sample code to get started:
 *
 * ```
 * $commentServiceClient = new CommentServiceClient();
 * try {
 *     $formattedParent = $commentServiceClient->caseName('[ORGANIZATION]', '[CASE]');
 *     $comment = new Comment();
 *     $response = $commentServiceClient->createComment($formattedParent, $comment);
 * } finally {
 *     $commentServiceClient->close();
 * }
 * ```
 *
 * Many parameters require resource names to be formatted in a particular way. To
 * assist with these names, this class includes a format method for each type of
 * name, and additionally a parseName method to extract the individual identifiers
 * contained within formatted names that are returned by the API.
 */
class CommentServiceGapicClient
{
    use GapicClientTrait;

    /** The name of the service. */
    const SERVICE_NAME = 'google.cloud.support.v2.CommentService';

    /** The default address of the service. */
    const SERVICE_ADDRESS = 'cloudsupport.googleapis.com';

    /** The default port of the service. */
    const DEFAULT_SERVICE_PORT = 443;

    /** The name of the code generator, to be included in the agent header. */
    const CODEGEN_NAME = 'gapic';

    /** The default scopes required by the service. */
    public static $serviceScopes = [
        'https://www.googleapis.com/auth/cloud-platform',
    ];

    private static $caseNameTemplate;

    private static $commentNameTemplate;

    private static $organizationCaseNameTemplate;

    private static $organizationCaseCommentNameTemplate;

    private static $projectCaseNameTemplate;

    private static $projectCaseCommentNameTemplate;

    private static $pathTemplateMap;

    private static function getClientDefaults()
    {
        return [
            'serviceName' => self::SERVICE_NAME,
            'apiEndpoint' =>
                self::SERVICE_ADDRESS . ':' . self::DEFAULT_SERVICE_PORT,
            'clientConfig' =>
                __DIR__ . '/../resources/comment_service_client_config.json',
            'descriptorsConfigPath' =>
                __DIR__ . '/../resources/comment_service_descriptor_config.php',
            'gcpApiConfigPath' =>
                __DIR__ . '/../resources/comment_service_grpc_config.json',
            'credentialsConfig' => [
                'defaultScopes' => self::$serviceScopes,
            ],
            'transportConfig' => [
                'rest' => [
                    'restClientConfigPath' =>
                        __DIR__ .
                        '/../resources/comment_service_rest_client_config.php',
                ],
            ],
        ];
    }

    private static function getCaseNameTemplate()
    {
        if (self::$caseNameTemplate == null) {
            self::$caseNameTemplate = new PathTemplate(
                'organizations/{organization}/cases/{case}'
            );
        }

        return self::$caseNameTemplate;
    }

    private static function getCommentNameTemplate()
    {
        if (self::$commentNameTemplate == null) {
            self::$commentNameTemplate = new PathTemplate(
                'organizations/{organization}/cases/{case}/comments/{comment}'
            );
        }

        return self::$commentNameTemplate;
    }

    private static function getOrganizationCaseNameTemplate()
    {
        if (self::$organizationCaseNameTemplate == null) {
            self::$organizationCaseNameTemplate = new PathTemplate(
                'organizations/{organization}/cases/{case}'
            );
        }

        return self::$organizationCaseNameTemplate;
    }

    private static function getOrganizationCaseCommentNameTemplate()
    {
        if (self::$organizationCaseCommentNameTemplate == null) {
            self::$organizationCaseCommentNameTemplate = new PathTemplate(
                'organizations/{organization}/cases/{case}/comments/{comment}'
            );
        }

        return self::$organizationCaseCommentNameTemplate;
    }

    private static function getProjectCaseNameTemplate()
    {
        if (self::$projectCaseNameTemplate == null) {
            self::$projectCaseNameTemplate = new PathTemplate(
                'projects/{project}/cases/{case}'
            );
        }

        return self::$projectCaseNameTemplate;
    }

    private static function getProjectCaseCommentNameTemplate()
    {
        if (self::$projectCaseCommentNameTemplate == null) {
            self::$projectCaseCommentNameTemplate = new PathTemplate(
                'projects/{project}/cases/{case}/comments/{comment}'
            );
        }

        return self::$projectCaseCommentNameTemplate;
    }

    private static function getPathTemplateMap()
    {
        if (self::$pathTemplateMap == null) {
            self::$pathTemplateMap = [
                'case' => self::getCaseNameTemplate(),
                'comment' => self::getCommentNameTemplate(),
                'organizationCase' => self::getOrganizationCaseNameTemplate(),
                'organizationCaseComment' => self::getOrganizationCaseCommentNameTemplate(),
                'projectCase' => self::getProjectCaseNameTemplate(),
                'projectCaseComment' => self::getProjectCaseCommentNameTemplate(),
            ];
        }

        return self::$pathTemplateMap;
    }

    /**
     * Formats a string containing the fully-qualified path to represent a case
     * resource.
     *
     * @param string $organization
     * @param string $case
     *
     * @return string The formatted case resource.
     */
    public static function caseName($organization, $case)
    {
        return self::getCaseNameTemplate()->render([
            'organization' => $organization,
            'case' => $case,
        ]);
    }

    /**
     * Formats a string containing the fully-qualified path to represent a comment
     * resource.
     *
     * @param string $organization
     * @param string $case
     * @param string $comment
     *
     * @return string The formatted comment resource.
     */
    public static function commentName($organization, $case, $comment)
    {
        return self::getCommentNameTemplate()->render([
            'organization' => $organization,
            'case' => $case,
            'comment' => $comment,
        ]);
    }

    /**
     * Formats a string containing the fully-qualified path to represent a
     * organization_case resource.
     *
     * @param string $organization
     * @param string $case
     *
     * @return string The formatted organization_case resource.
     */
    public static function organizationCaseName($organization, $case)
    {
        return self::getOrganizationCaseNameTemplate()->render([
            'organization' => $organization,
            'case' => $case,
        ]);
    }

    /**
     * Formats a string containing the fully-qualified path to represent a
     * organization_case_comment resource.
     *
     * @param string $organization
     * @param string $case
     * @param string $comment
     *
     * @return string The formatted organization_case_comment resource.
     */
    public static function organizationCaseCommentName(
        $organization,
        $case,
        $comment
    ) {
        return self::getOrganizationCaseCommentNameTemplate()->render([
            'organization' => $organization,
            'case' => $case,
            'comment' => $comment,
        ]);
    }

    /**
     * Formats a string containing the fully-qualified path to represent a project_case
     * resource.
     *
     * @param string $project
     * @param string $case
     *
     * @return string The formatted project_case resource.
     */
    public static function projectCaseName($project, $case)
    {
        return self::getProjectCaseNameTemplate()->render([
            'project' => $project,
            'case' => $case,
        ]);
    }

    /**
     * Formats a string containing the fully-qualified path to represent a
     * project_case_comment resource.
     *
     * @param string $project
     * @param string $case
     * @param string $comment
     *
     * @return string The formatted project_case_comment resource.
     */
    public static function projectCaseCommentName($project, $case, $comment)
    {
        return self::getProjectCaseCommentNameTemplate()->render([
            'project' => $project,
            'case' => $case,
            'comment' => $comment,
        ]);
    }

    /**
     * Parses a formatted name string and returns an associative array of the components in the name.
     * The following name formats are supported:
     * Template: Pattern
     * - case: organizations/{organization}/cases/{case}
     * - comment: organizations/{organization}/cases/{case}/comments/{comment}
     * - organizationCase: organizations/{organization}/cases/{case}
     * - organizationCaseComment: organizations/{organization}/cases/{case}/comments/{comment}
     * - projectCase: projects/{project}/cases/{case}
     * - projectCaseComment: projects/{project}/cases/{case}/comments/{comment}
     *
     * The optional $template argument can be supplied to specify a particular pattern,
     * and must match one of the templates listed above. If no $template argument is
     * provided, or if the $template argument does not match one of the templates
     * listed, then parseName will check each of the supported templates, and return
     * the first match.
     *
     * @param string $formattedName The formatted name string
     * @param string $template      Optional name of template to match
     *
     * @return array An associative array from name component IDs to component values.
     *
     * @throws ValidationException If $formattedName could not be matched.
     */
    public static function parseName($formattedName, $template = null)
    {
        $templateMap = self::getPathTemplateMap();
        if ($template) {
            if (!isset($templateMap[$template])) {
                throw new ValidationException(
                    "Template name $template does not exist"
                );
            }

            return $templateMap[$template]->match($formattedName);
        }

        foreach ($templateMap as $templateName => $pathTemplate) {
            try {
                return $pathTemplate->match($formattedName);
            } catch (ValidationException $ex) {
                // Swallow the exception to continue trying other path templates
            }
        }

        throw new ValidationException(
            "Input did not match any known format. Input: $formattedName"
        );
    }

    /**
     * Constructor.
     *
     * @param array $options {
     *     Optional. Options for configuring the service API wrapper.
     *
     *     @type string $apiEndpoint
     *           The address of the API remote host. May optionally include the port, formatted
     *           as "<uri>:<port>". Default 'cloudsupport.googleapis.com:443'.
     *     @type string|array|FetchAuthTokenInterface|CredentialsWrapper $credentials
     *           The credentials to be used by the client to authorize API calls. This option
     *           accepts either a path to a credentials file, or a decoded credentials file as a
     *           PHP array.
     *           *Advanced usage*: In addition, this option can also accept a pre-constructed
     *           {@see \Google\Auth\FetchAuthTokenInterface} object or
     *           {@see \Google\ApiCore\CredentialsWrapper} object. Note that when one of these
     *           objects are provided, any settings in $credentialsConfig will be ignored.
     *     @type array $credentialsConfig
     *           Options used to configure credentials, including auth token caching, for the
     *           client. For a full list of supporting configuration options, see
     *           {@see \Google\ApiCore\CredentialsWrapper::build()} .
     *     @type bool $disableRetries
     *           Determines whether or not retries defined by the client configuration should be
     *           disabled. Defaults to `false`.
     *     @type string|array $clientConfig
     *           Client method configuration, including retry settings. This option can be either
     *           a path to a JSON file, or a PHP array containing the decoded JSON data. By
     *           default this settings points to the default client config file, which is
     *           provided in the resources folder.
     *     @type string|TransportInterface $transport
     *           The transport used for executing network requests. May be either the string
     *           `rest` or `grpc`. Defaults to `grpc` if gRPC support is detected on the system.
     *           *Advanced usage*: Additionally, it is possible to pass in an already
     *           instantiated {@see \Google\ApiCore\Transport\TransportInterface} object. Note
     *           that when this object is provided, any settings in $transportConfig, and any
     *           $apiEndpoint setting, will be ignored.
     *     @type array $transportConfig
     *           Configuration options that will be used to construct the transport. Options for
     *           each supported transport type should be passed in a key for that transport. For
     *           example:
     *           $transportConfig = [
     *               'grpc' => [...],
     *               'rest' => [...],
     *           ];
     *           See the {@see \Google\ApiCore\Transport\GrpcTransport::build()} and
     *           {@see \Google\ApiCore\Transport\RestTransport::build()} methods for the
     *           supported options.
     *     @type callable $clientCertSource
     *           A callable which returns the client cert as a string. This can be used to
     *           provide a certificate and private key to the transport layer for mTLS.
     * }
     *
     * @throws ValidationException
     */
    public function __construct(array $options = [])
    {
        $clientOptions = $this->buildClientOptions($options);
        $this->setClientOptions($clientOptions);
    }

    /**
     * Add a new comment to the specified Case.
     * The comment object must have the following fields set: body.
     *
     * Sample code:
     * ```
     * $commentServiceClient = new CommentServiceClient();
     * try {
     *     $formattedParent = $commentServiceClient->caseName('[ORGANIZATION]', '[CASE]');
     *     $comment = new Comment();
     *     $response = $commentServiceClient->createComment($formattedParent, $comment);
     * } finally {
     *     $commentServiceClient->close();
     * }
     * ```
     *
     * @param string  $parent       Required. The resource name of Case to which this comment should be added.
     * @param Comment $comment      Required. The Comment object to be added to this Case.
     * @param array   $optionalArgs {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return \Google\Cloud\Support\V2\Comment
     *
     * @throws ApiException if the remote call fails
     */
    public function createComment($parent, $comment, array $optionalArgs = [])
    {
        $request = new CreateCommentRequest();
        $requestParamHeaders = [];
        $request->setParent($parent);
        $request->setComment($comment);
        $requestParamHeaders['parent'] = $parent;
        $requestParams = new RequestParamsHeaderDescriptor(
            $requestParamHeaders
        );
        $optionalArgs['headers'] = isset($optionalArgs['headers'])
            ? array_merge($requestParams->getHeader(), $optionalArgs['headers'])
            : $requestParams->getHeader();
        return $this->startCall(
            'CreateComment',
            Comment::class,
            $optionalArgs,
            $request
        )->wait();
    }

    /**
     * Retrieve all Comments associated with the Case object.
     *
     * Sample code:
     * ```
     * $commentServiceClient = new CommentServiceClient();
     * try {
     *     $formattedParent = $commentServiceClient->caseName('[ORGANIZATION]', '[CASE]');
     *     // Iterate over pages of elements
     *     $pagedResponse = $commentServiceClient->listComments($formattedParent);
     *     foreach ($pagedResponse->iteratePages() as $page) {
     *         foreach ($page as $element) {
     *             // doSomethingWith($element);
     *         }
     *     }
     *     // Alternatively:
     *     // Iterate through all elements
     *     $pagedResponse = $commentServiceClient->listComments($formattedParent);
     *     foreach ($pagedResponse->iterateAllElements() as $element) {
     *         // doSomethingWith($element);
     *     }
     * } finally {
     *     $commentServiceClient->close();
     * }
     * ```
     *
     * @param string $parent       Required. The resource name of Case object for which comments should be
     *                             listed.
     * @param array  $optionalArgs {
     *     Optional.
     *
     *     @type int $pageSize
     *           The maximum number of resources contained in the underlying API
     *           response. The API may return fewer values in a page, even if
     *           there are additional values to be retrieved.
     *     @type string $pageToken
     *           A page token is used to specify a page of values to be returned.
     *           If no page token is specified (the default), the first page
     *           of values will be returned. Any page token used here must have
     *           been generated by a previous call to the API.
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return \Google\ApiCore\PagedListResponse
     *
     * @throws ApiException if the remote call fails
     */
    public function listComments($parent, array $optionalArgs = [])
    {
        $request = new ListCommentsRequest();
        $requestParamHeaders = [];
        $request->setParent($parent);
        $requestParamHeaders['parent'] = $parent;
        if (isset($optionalArgs['pageSize'])) {
            $request->setPageSize($optionalArgs['pageSize']);
        }

        if (isset($optionalArgs['pageToken'])) {
            $request->setPageToken($optionalArgs['pageToken']);
        }

        $requestParams = new RequestParamsHeaderDescriptor(
            $requestParamHeaders
        );
        $optionalArgs['headers'] = isset($optionalArgs['headers'])
            ? array_merge($requestParams->getHeader(), $optionalArgs['headers'])
            : $requestParams->getHeader();
        return $this->getPagedListResponse(
            'ListComments',
            $optionalArgs,
            ListCommentsResponse::class,
            $request
        );
    }
}
