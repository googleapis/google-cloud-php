<?php
/*
 * Copyright 2023 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * GENERATED CODE WARNING
 * Generated by gapic-generator-php from the file
 * https://github.com/googleapis/googleapis/blob/master/google/cloud/support/v2/case_service.proto
 * Updates to the above are reflected here through a refresh process.
 */

namespace Google\Cloud\Support\V2\Gapic;

use Google\ApiCore\ApiException;
use Google\ApiCore\CredentialsWrapper;
use Google\ApiCore\GapicClientTrait;
use Google\ApiCore\PathTemplate;
use Google\ApiCore\RequestParamsHeaderDescriptor;
use Google\ApiCore\RetrySettings;
use Google\ApiCore\Transport\TransportInterface;
use Google\ApiCore\ValidationException;
use Google\Auth\FetchAuthTokenInterface;
use Google\Cloud\Support\V2\CloseCaseRequest;
use Google\Cloud\Support\V2\CreateCaseRequest;
use Google\Cloud\Support\V2\EscalateCaseRequest;
use Google\Cloud\Support\V2\Escalation;
use Google\Cloud\Support\V2\GetCaseRequest;
use Google\Cloud\Support\V2\ListCasesRequest;
use Google\Cloud\Support\V2\ListCasesResponse;
use Google\Cloud\Support\V2\PBCase;
use Google\Cloud\Support\V2\SearchCaseClassificationsRequest;
use Google\Cloud\Support\V2\SearchCaseClassificationsResponse;
use Google\Cloud\Support\V2\SearchCasesRequest;
use Google\Cloud\Support\V2\SearchCasesResponse;
use Google\Cloud\Support\V2\UpdateCaseRequest;
use Google\Protobuf\FieldMask;

/**
 * Service Description: A service to manage Google Cloud support cases.
 *
 * This class provides the ability to make remote calls to the backing service through method
 * calls that map to API methods. Sample code to get started:
 *
 * ```
 * $caseServiceClient = new CaseServiceClient();
 * try {
 *     $formattedName = $caseServiceClient->caseName('[ORGANIZATION]', '[CASE]');
 *     $response = $caseServiceClient->closeCase($formattedName);
 * } finally {
 *     $caseServiceClient->close();
 * }
 * ```
 *
 * Many parameters require resource names to be formatted in a particular way. To
 * assist with these names, this class includes a format method for each type of
 * name, and additionally a parseName method to extract the individual identifiers
 * contained within formatted names that are returned by the API.
 */
class CaseServiceGapicClient
{
    use GapicClientTrait;

    /** The name of the service. */
    const SERVICE_NAME = 'google.cloud.support.v2.CaseService';

    /** The default address of the service. */
    const SERVICE_ADDRESS = 'cloudsupport.googleapis.com';

    /** The default port of the service. */
    const DEFAULT_SERVICE_PORT = 443;

    /** The name of the code generator, to be included in the agent header. */
    const CODEGEN_NAME = 'gapic';

    /** The default scopes required by the service. */
    public static $serviceScopes = [
        'https://www.googleapis.com/auth/cloud-platform',
    ];

    private static $caseNameTemplate;

    private static $organizationNameTemplate;

    private static $organizationCaseNameTemplate;

    private static $projectNameTemplate;

    private static $projectCaseNameTemplate;

    private static $pathTemplateMap;

    private static function getClientDefaults()
    {
        return [
            'serviceName' => self::SERVICE_NAME,
            'apiEndpoint' =>
                self::SERVICE_ADDRESS . ':' . self::DEFAULT_SERVICE_PORT,
            'clientConfig' =>
                __DIR__ . '/../resources/case_service_client_config.json',
            'descriptorsConfigPath' =>
                __DIR__ . '/../resources/case_service_descriptor_config.php',
            'gcpApiConfigPath' =>
                __DIR__ . '/../resources/case_service_grpc_config.json',
            'credentialsConfig' => [
                'defaultScopes' => self::$serviceScopes,
            ],
            'transportConfig' => [
                'rest' => [
                    'restClientConfigPath' =>
                        __DIR__ .
                        '/../resources/case_service_rest_client_config.php',
                ],
            ],
        ];
    }

    private static function getCaseNameTemplate()
    {
        if (self::$caseNameTemplate == null) {
            self::$caseNameTemplate = new PathTemplate(
                'organizations/{organization}/cases/{case}'
            );
        }

        return self::$caseNameTemplate;
    }

    private static function getOrganizationNameTemplate()
    {
        if (self::$organizationNameTemplate == null) {
            self::$organizationNameTemplate = new PathTemplate(
                'organizations/{organization}'
            );
        }

        return self::$organizationNameTemplate;
    }

    private static function getOrganizationCaseNameTemplate()
    {
        if (self::$organizationCaseNameTemplate == null) {
            self::$organizationCaseNameTemplate = new PathTemplate(
                'organizations/{organization}/cases/{case}'
            );
        }

        return self::$organizationCaseNameTemplate;
    }

    private static function getProjectNameTemplate()
    {
        if (self::$projectNameTemplate == null) {
            self::$projectNameTemplate = new PathTemplate('projects/{project}');
        }

        return self::$projectNameTemplate;
    }

    private static function getProjectCaseNameTemplate()
    {
        if (self::$projectCaseNameTemplate == null) {
            self::$projectCaseNameTemplate = new PathTemplate(
                'projects/{project}/cases/{case}'
            );
        }

        return self::$projectCaseNameTemplate;
    }

    private static function getPathTemplateMap()
    {
        if (self::$pathTemplateMap == null) {
            self::$pathTemplateMap = [
                'case' => self::getCaseNameTemplate(),
                'organization' => self::getOrganizationNameTemplate(),
                'organizationCase' => self::getOrganizationCaseNameTemplate(),
                'project' => self::getProjectNameTemplate(),
                'projectCase' => self::getProjectCaseNameTemplate(),
            ];
        }

        return self::$pathTemplateMap;
    }

    /**
     * Formats a string containing the fully-qualified path to represent a case
     * resource.
     *
     * @param string $organization
     * @param string $case
     *
     * @return string The formatted case resource.
     */
    public static function caseName($organization, $case)
    {
        return self::getCaseNameTemplate()->render([
            'organization' => $organization,
            'case' => $case,
        ]);
    }

    /**
     * Formats a string containing the fully-qualified path to represent a organization
     * resource.
     *
     * @param string $organization
     *
     * @return string The formatted organization resource.
     */
    public static function organizationName($organization)
    {
        return self::getOrganizationNameTemplate()->render([
            'organization' => $organization,
        ]);
    }

    /**
     * Formats a string containing the fully-qualified path to represent a
     * organization_case resource.
     *
     * @param string $organization
     * @param string $case
     *
     * @return string The formatted organization_case resource.
     */
    public static function organizationCaseName($organization, $case)
    {
        return self::getOrganizationCaseNameTemplate()->render([
            'organization' => $organization,
            'case' => $case,
        ]);
    }

    /**
     * Formats a string containing the fully-qualified path to represent a project
     * resource.
     *
     * @param string $project
     *
     * @return string The formatted project resource.
     */
    public static function projectName($project)
    {
        return self::getProjectNameTemplate()->render([
            'project' => $project,
        ]);
    }

    /**
     * Formats a string containing the fully-qualified path to represent a project_case
     * resource.
     *
     * @param string $project
     * @param string $case
     *
     * @return string The formatted project_case resource.
     */
    public static function projectCaseName($project, $case)
    {
        return self::getProjectCaseNameTemplate()->render([
            'project' => $project,
            'case' => $case,
        ]);
    }

    /**
     * Parses a formatted name string and returns an associative array of the components in the name.
     * The following name formats are supported:
     * Template: Pattern
     * - case: organizations/{organization}/cases/{case}
     * - organization: organizations/{organization}
     * - organizationCase: organizations/{organization}/cases/{case}
     * - project: projects/{project}
     * - projectCase: projects/{project}/cases/{case}
     *
     * The optional $template argument can be supplied to specify a particular pattern,
     * and must match one of the templates listed above. If no $template argument is
     * provided, or if the $template argument does not match one of the templates
     * listed, then parseName will check each of the supported templates, and return
     * the first match.
     *
     * @param string $formattedName The formatted name string
     * @param string $template      Optional name of template to match
     *
     * @return array An associative array from name component IDs to component values.
     *
     * @throws ValidationException If $formattedName could not be matched.
     */
    public static function parseName($formattedName, $template = null)
    {
        $templateMap = self::getPathTemplateMap();
        if ($template) {
            if (!isset($templateMap[$template])) {
                throw new ValidationException(
                    "Template name $template does not exist"
                );
            }

            return $templateMap[$template]->match($formattedName);
        }

        foreach ($templateMap as $templateName => $pathTemplate) {
            try {
                return $pathTemplate->match($formattedName);
            } catch (ValidationException $ex) {
                // Swallow the exception to continue trying other path templates
            }
        }

        throw new ValidationException(
            "Input did not match any known format. Input: $formattedName"
        );
    }

    /**
     * Constructor.
     *
     * @param array $options {
     *     Optional. Options for configuring the service API wrapper.
     *
     *     @type string $apiEndpoint
     *           The address of the API remote host. May optionally include the port, formatted
     *           as "<uri>:<port>". Default 'cloudsupport.googleapis.com:443'.
     *     @type string|array|FetchAuthTokenInterface|CredentialsWrapper $credentials
     *           The credentials to be used by the client to authorize API calls. This option
     *           accepts either a path to a credentials file, or a decoded credentials file as a
     *           PHP array.
     *           *Advanced usage*: In addition, this option can also accept a pre-constructed
     *           {@see \Google\Auth\FetchAuthTokenInterface} object or
     *           {@see \Google\ApiCore\CredentialsWrapper} object. Note that when one of these
     *           objects are provided, any settings in $credentialsConfig will be ignored.
     *     @type array $credentialsConfig
     *           Options used to configure credentials, including auth token caching, for the
     *           client. For a full list of supporting configuration options, see
     *           {@see \Google\ApiCore\CredentialsWrapper::build()} .
     *     @type bool $disableRetries
     *           Determines whether or not retries defined by the client configuration should be
     *           disabled. Defaults to `false`.
     *     @type string|array $clientConfig
     *           Client method configuration, including retry settings. This option can be either
     *           a path to a JSON file, or a PHP array containing the decoded JSON data. By
     *           default this settings points to the default client config file, which is
     *           provided in the resources folder.
     *     @type string|TransportInterface $transport
     *           The transport used for executing network requests. May be either the string
     *           `rest` or `grpc`. Defaults to `grpc` if gRPC support is detected on the system.
     *           *Advanced usage*: Additionally, it is possible to pass in an already
     *           instantiated {@see \Google\ApiCore\Transport\TransportInterface} object. Note
     *           that when this object is provided, any settings in $transportConfig, and any
     *           $apiEndpoint setting, will be ignored.
     *     @type array $transportConfig
     *           Configuration options that will be used to construct the transport. Options for
     *           each supported transport type should be passed in a key for that transport. For
     *           example:
     *           $transportConfig = [
     *               'grpc' => [...],
     *               'rest' => [...],
     *           ];
     *           See the {@see \Google\ApiCore\Transport\GrpcTransport::build()} and
     *           {@see \Google\ApiCore\Transport\RestTransport::build()} methods for the
     *           supported options.
     *     @type callable $clientCertSource
     *           A callable which returns the client cert as a string. This can be used to
     *           provide a certificate and private key to the transport layer for mTLS.
     * }
     *
     * @throws ValidationException
     */
    public function __construct(array $options = [])
    {
        $clientOptions = $this->buildClientOptions($options);
        $this->setClientOptions($clientOptions);
    }

    /**
     * Close the specified case.
     *
     * Sample code:
     * ```
     * $caseServiceClient = new CaseServiceClient();
     * try {
     *     $formattedName = $caseServiceClient->caseName('[ORGANIZATION]', '[CASE]');
     *     $response = $caseServiceClient->closeCase($formattedName);
     * } finally {
     *     $caseServiceClient->close();
     * }
     * ```
     *
     * @param string $name         Required. The fully qualified name of the case resource to be closed.
     * @param array  $optionalArgs {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return \Google\Cloud\Support\V2\PBCase
     *
     * @throws ApiException if the remote call fails
     */
    public function closeCase($name, array $optionalArgs = [])
    {
        $request = new CloseCaseRequest();
        $requestParamHeaders = [];
        $request->setName($name);
        $requestParamHeaders['name'] = $name;
        $requestParams = new RequestParamsHeaderDescriptor(
            $requestParamHeaders
        );
        $optionalArgs['headers'] = isset($optionalArgs['headers'])
            ? array_merge($requestParams->getHeader(), $optionalArgs['headers'])
            : $requestParams->getHeader();
        return $this->startCall(
            'CloseCase',
            PBCase::class,
            $optionalArgs,
            $request
        )->wait();
    }

    /**
     * Create a new case and associate it with the given Google Cloud Resource.
     * The case object must have the following fields set: `display_name`,
     * `description`, `classification`, and `priority`.
     *
     * Sample code:
     * ```
     * $caseServiceClient = new CaseServiceClient();
     * try {
     *     $formattedParent = $caseServiceClient->projectName('[PROJECT]');
     *     $case = new PBCase();
     *     $response = $caseServiceClient->createCase($formattedParent, $case);
     * } finally {
     *     $caseServiceClient->close();
     * }
     * ```
     *
     * @param string $parent       Required. The name of the Google Cloud Resource under which the case should
     *                             be created.
     * @param PBCase $case         Required. The case to be created.
     * @param array  $optionalArgs {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return \Google\Cloud\Support\V2\PBCase
     *
     * @throws ApiException if the remote call fails
     */
    public function createCase($parent, $case, array $optionalArgs = [])
    {
        $request = new CreateCaseRequest();
        $requestParamHeaders = [];
        $request->setParent($parent);
        $request->setCase($case);
        $requestParamHeaders['parent'] = $parent;
        $requestParams = new RequestParamsHeaderDescriptor(
            $requestParamHeaders
        );
        $optionalArgs['headers'] = isset($optionalArgs['headers'])
            ? array_merge($requestParams->getHeader(), $optionalArgs['headers'])
            : $requestParams->getHeader();
        return $this->startCall(
            'CreateCase',
            PBCase::class,
            $optionalArgs,
            $request
        )->wait();
    }

    /**
     * Escalate a case. Escalating a case will initiate the Google Cloud Support
     * escalation management process.
     *
     * This operation is only available to certain Customer Care tiers. Go to
     * https://cloud.google.com/support and look for 'Technical support
     * escalations' in the feature list to find out which tiers are able to
     * perform escalations.
     *
     * Sample code:
     * ```
     * $caseServiceClient = new CaseServiceClient();
     * try {
     *     $formattedName = $caseServiceClient->caseName('[ORGANIZATION]', '[CASE]');
     *     $response = $caseServiceClient->escalateCase($formattedName);
     * } finally {
     *     $caseServiceClient->close();
     * }
     * ```
     *
     * @param string $name         Required. The fully qualified name of the Case resource to be escalated.
     * @param array  $optionalArgs {
     *     Optional.
     *
     *     @type Escalation $escalation
     *           The escalation object to be sent with the escalation request.
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return \Google\Cloud\Support\V2\PBCase
     *
     * @throws ApiException if the remote call fails
     */
    public function escalateCase($name, array $optionalArgs = [])
    {
        $request = new EscalateCaseRequest();
        $requestParamHeaders = [];
        $request->setName($name);
        $requestParamHeaders['name'] = $name;
        if (isset($optionalArgs['escalation'])) {
            $request->setEscalation($optionalArgs['escalation']);
        }

        $requestParams = new RequestParamsHeaderDescriptor(
            $requestParamHeaders
        );
        $optionalArgs['headers'] = isset($optionalArgs['headers'])
            ? array_merge($requestParams->getHeader(), $optionalArgs['headers'])
            : $requestParams->getHeader();
        return $this->startCall(
            'EscalateCase',
            PBCase::class,
            $optionalArgs,
            $request
        )->wait();
    }

    /**
     * Retrieve the specified case.
     *
     * Sample code:
     * ```
     * $caseServiceClient = new CaseServiceClient();
     * try {
     *     $formattedName = $caseServiceClient->caseName('[ORGANIZATION]', '[CASE]');
     *     $response = $caseServiceClient->getCase($formattedName);
     * } finally {
     *     $caseServiceClient->close();
     * }
     * ```
     *
     * @param string $name         Required. The fully qualified name of a case to be retrieved.
     * @param array  $optionalArgs {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return \Google\Cloud\Support\V2\PBCase
     *
     * @throws ApiException if the remote call fails
     */
    public function getCase($name, array $optionalArgs = [])
    {
        $request = new GetCaseRequest();
        $requestParamHeaders = [];
        $request->setName($name);
        $requestParamHeaders['name'] = $name;
        $requestParams = new RequestParamsHeaderDescriptor(
            $requestParamHeaders
        );
        $optionalArgs['headers'] = isset($optionalArgs['headers'])
            ? array_merge($requestParams->getHeader(), $optionalArgs['headers'])
            : $requestParams->getHeader();
        return $this->startCall(
            'GetCase',
            PBCase::class,
            $optionalArgs,
            $request
        )->wait();
    }

    /**
     * Retrieve all cases under the specified parent.
     *
     * Note: Listing cases under an Organization returns only the cases directly
     * parented by that organization. To retrieve all cases under an organization,
     * including cases parented by projects under that organization, use
     * `cases.search`.
     *
     * Sample code:
     * ```
     * $caseServiceClient = new CaseServiceClient();
     * try {
     *     $formattedParent = $caseServiceClient->projectName('[PROJECT]');
     *     // Iterate over pages of elements
     *     $pagedResponse = $caseServiceClient->listCases($formattedParent);
     *     foreach ($pagedResponse->iteratePages() as $page) {
     *         foreach ($page as $element) {
     *             // doSomethingWith($element);
     *         }
     *     }
     *     // Alternatively:
     *     // Iterate through all elements
     *     $pagedResponse = $caseServiceClient->listCases($formattedParent);
     *     foreach ($pagedResponse->iterateAllElements() as $element) {
     *         // doSomethingWith($element);
     *     }
     * } finally {
     *     $caseServiceClient->close();
     * }
     * ```
     *
     * @param string $parent       Required. The fully qualified name of parent resource to list cases under.
     * @param array  $optionalArgs {
     *     Optional.
     *
     *     @type string $filter
     *           An expression written in filter language. If non-empty, the query returns
     *           the cases that match the filter. Else, the query doesn't filter the cases.
     *
     *           Filter expressions use the following fields with the operators equals (`=`)
     *           and `AND`:
     *
     *           - `state`: The accepted values are `OPEN` or `CLOSED`.
     *           - `priority`: The accepted values are `P0`, `P1`, `P2`, `P3`, or `P4`. You
     *           can specify multiple values for priority using the `OR` operator. For
     *           example, `priority=P1 OR priority=P2`.
     *           - `creator.email`: The email address of the case creator.
     *
     *           Examples:
     *
     *           - `state=CLOSED`
     *           - `state=OPEN AND creator.email="tester&#64;example.com"`
     *           - `state=OPEN AND (priority=P0 OR priority=P1)`
     *     @type int $pageSize
     *           The maximum number of resources contained in the underlying API
     *           response. The API may return fewer values in a page, even if
     *           there are additional values to be retrieved.
     *     @type string $pageToken
     *           A page token is used to specify a page of values to be returned.
     *           If no page token is specified (the default), the first page
     *           of values will be returned. Any page token used here must have
     *           been generated by a previous call to the API.
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return \Google\ApiCore\PagedListResponse
     *
     * @throws ApiException if the remote call fails
     */
    public function listCases($parent, array $optionalArgs = [])
    {
        $request = new ListCasesRequest();
        $requestParamHeaders = [];
        $request->setParent($parent);
        $requestParamHeaders['parent'] = $parent;
        if (isset($optionalArgs['filter'])) {
            $request->setFilter($optionalArgs['filter']);
        }

        if (isset($optionalArgs['pageSize'])) {
            $request->setPageSize($optionalArgs['pageSize']);
        }

        if (isset($optionalArgs['pageToken'])) {
            $request->setPageToken($optionalArgs['pageToken']);
        }

        $requestParams = new RequestParamsHeaderDescriptor(
            $requestParamHeaders
        );
        $optionalArgs['headers'] = isset($optionalArgs['headers'])
            ? array_merge($requestParams->getHeader(), $optionalArgs['headers'])
            : $requestParams->getHeader();
        return $this->getPagedListResponse(
            'ListCases',
            $optionalArgs,
            ListCasesResponse::class,
            $request
        );
    }

    /**
     * Retrieve valid classifications to be used when creating a support case.
     * The classications are hierarchical, with each classification containing
     * all levels of the hierarchy, separated by " > ". For example "Technical
     * Issue > Compute > Compute Engine".
     *
     * Sample code:
     * ```
     * $caseServiceClient = new CaseServiceClient();
     * try {
     *     // Iterate over pages of elements
     *     $pagedResponse = $caseServiceClient->searchCaseClassifications();
     *     foreach ($pagedResponse->iteratePages() as $page) {
     *         foreach ($page as $element) {
     *             // doSomethingWith($element);
     *         }
     *     }
     *     // Alternatively:
     *     // Iterate through all elements
     *     $pagedResponse = $caseServiceClient->searchCaseClassifications();
     *     foreach ($pagedResponse->iterateAllElements() as $element) {
     *         // doSomethingWith($element);
     *     }
     * } finally {
     *     $caseServiceClient->close();
     * }
     * ```
     *
     * @param array $optionalArgs {
     *     Optional.
     *
     *     @type string $query
     *           An expression written in the Google Cloud filter language. If non-empty,
     *           then only cases whose fields match the filter are returned. If empty, then
     *           no messages are filtered out.
     *     @type int $pageSize
     *           The maximum number of resources contained in the underlying API
     *           response. The API may return fewer values in a page, even if
     *           there are additional values to be retrieved.
     *     @type string $pageToken
     *           A page token is used to specify a page of values to be returned.
     *           If no page token is specified (the default), the first page
     *           of values will be returned. Any page token used here must have
     *           been generated by a previous call to the API.
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return \Google\ApiCore\PagedListResponse
     *
     * @throws ApiException if the remote call fails
     */
    public function searchCaseClassifications(array $optionalArgs = [])
    {
        $request = new SearchCaseClassificationsRequest();
        if (isset($optionalArgs['query'])) {
            $request->setQuery($optionalArgs['query']);
        }

        if (isset($optionalArgs['pageSize'])) {
            $request->setPageSize($optionalArgs['pageSize']);
        }

        if (isset($optionalArgs['pageToken'])) {
            $request->setPageToken($optionalArgs['pageToken']);
        }

        return $this->getPagedListResponse(
            'SearchCaseClassifications',
            $optionalArgs,
            SearchCaseClassificationsResponse::class,
            $request
        );
    }

    /**
     * Search cases using the specified query.
     *
     * Sample code:
     * ```
     * $caseServiceClient = new CaseServiceClient();
     * try {
     *     // Iterate over pages of elements
     *     $pagedResponse = $caseServiceClient->searchCases();
     *     foreach ($pagedResponse->iteratePages() as $page) {
     *         foreach ($page as $element) {
     *             // doSomethingWith($element);
     *         }
     *     }
     *     // Alternatively:
     *     // Iterate through all elements
     *     $pagedResponse = $caseServiceClient->searchCases();
     *     foreach ($pagedResponse->iterateAllElements() as $element) {
     *         // doSomethingWith($element);
     *     }
     * } finally {
     *     $caseServiceClient->close();
     * }
     * ```
     *
     * @param array $optionalArgs {
     *     Optional.
     *
     *     @type string $parent
     *           The fully qualified name of parent resource to search cases under.
     *     @type string $query
     *           An expression written in filter language.
     *
     *           A query uses the following fields with the operators equals (`=`) and
     *           `AND`:
     *
     *           - `organization`: An organization name in the form
     *           `organizations/<organization_id>`.
     *           - `project`: A project name in the form `projects/<project_id>`.
     *           - `state`: The accepted values are `OPEN` or `CLOSED`.
     *           - `priority`: The accepted values are `P0`, `P1`, `P2`, `P3`, or `P4`. You
     *           can specify multiple values for priority using the `OR` operator. For
     *           example, `priority=P1 OR priority=P2`.
     *           - `creator.email`: The email address of the case creator.
     *           - `billingAccount`: A billing account in the form
     *           `billingAccounts/<billing_account_id>`
     *
     *           You must specify either `organization` or `project`.
     *
     *           To search across `displayName`, `description`, and comments, use a global
     *           restriction with no keyword or operator. For example, `"my search"`.
     *
     *           To search only cases updated after a certain date, use `update_time`
     *           restricted with that particular date, time, and timezone in ISO datetime
     *           format. For example, `update_time>"2020-01-01T00:00:00-05:00"`.
     *           `update_time` only supports the greater than operator (`>`).
     *
     *           Examples:
     *
     *           - `organization="organizations/123456789"`
     *           - `project="projects/my-project-id"`
     *           - `project="projects/123456789"`
     *           - `billing_account="billingAccounts/123456-A0B0C0-CUZ789"`
     *           - `organization="organizations/123456789" AND state=CLOSED`
     *           - `project="projects/my-project-id" AND creator.email="tester&#64;example.com"`
     *           - `project="projects/my-project-id" AND (priority=P0 OR priority=P1)`
     *     @type int $pageSize
     *           The maximum number of resources contained in the underlying API
     *           response. The API may return fewer values in a page, even if
     *           there are additional values to be retrieved.
     *     @type string $pageToken
     *           A page token is used to specify a page of values to be returned.
     *           If no page token is specified (the default), the first page
     *           of values will be returned. Any page token used here must have
     *           been generated by a previous call to the API.
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return \Google\ApiCore\PagedListResponse
     *
     * @throws ApiException if the remote call fails
     */
    public function searchCases(array $optionalArgs = [])
    {
        $request = new SearchCasesRequest();
        $requestParamHeaders = [];
        if (isset($optionalArgs['parent'])) {
            $request->setParent($optionalArgs['parent']);
            $requestParamHeaders['parent'] = $optionalArgs['parent'];
        }

        if (isset($optionalArgs['query'])) {
            $request->setQuery($optionalArgs['query']);
        }

        if (isset($optionalArgs['pageSize'])) {
            $request->setPageSize($optionalArgs['pageSize']);
        }

        if (isset($optionalArgs['pageToken'])) {
            $request->setPageToken($optionalArgs['pageToken']);
        }

        $requestParams = new RequestParamsHeaderDescriptor(
            $requestParamHeaders
        );
        $optionalArgs['headers'] = isset($optionalArgs['headers'])
            ? array_merge($requestParams->getHeader(), $optionalArgs['headers'])
            : $requestParams->getHeader();
        return $this->getPagedListResponse(
            'SearchCases',
            $optionalArgs,
            SearchCasesResponse::class,
            $request
        );
    }

    /**
     * Update the specified case. Only a subset of fields can be updated.
     *
     * Sample code:
     * ```
     * $caseServiceClient = new CaseServiceClient();
     * try {
     *     $case = new PBCase();
     *     $response = $caseServiceClient->updateCase($case);
     * } finally {
     *     $caseServiceClient->close();
     * }
     * ```
     *
     * @param PBCase $case         Required. The case object to update.
     * @param array  $optionalArgs {
     *     Optional.
     *
     *     @type FieldMask $updateMask
     *           A list of attributes of the case object that should be updated
     *           as part of this request. Supported values are `priority`, `display_name`,
     *           and `subscriber_email_addresses`. If no fields are specified, all supported
     *           fields are updated.
     *
     *           WARNING: If you do not provide a field mask, then you might accidentally
     *           clear some fields. For example, if you leave the field mask empty and do
     *           not provide a value for `subscriber_email_addresses`, then
     *           `subscriber_email_addresses` is updated to empty.
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return \Google\Cloud\Support\V2\PBCase
     *
     * @throws ApiException if the remote call fails
     */
    public function updateCase($case, array $optionalArgs = [])
    {
        $request = new UpdateCaseRequest();
        $requestParamHeaders = [];
        $request->setCase($case);
        $requestParamHeaders['case.name'] = $case->getName();
        if (isset($optionalArgs['updateMask'])) {
            $request->setUpdateMask($optionalArgs['updateMask']);
        }

        $requestParams = new RequestParamsHeaderDescriptor(
            $requestParamHeaders
        );
        $optionalArgs['headers'] = isset($optionalArgs['headers'])
            ? array_merge($requestParams->getHeader(), $optionalArgs['headers'])
            : $requestParams->getHeader();
        return $this->startCall(
            'UpdateCase',
            PBCase::class,
            $optionalArgs,
            $request
        )->wait();
    }
}
