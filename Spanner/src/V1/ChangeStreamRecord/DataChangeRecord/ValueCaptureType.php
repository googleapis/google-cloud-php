<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/spanner/v1/change_stream.proto

namespace Google\Cloud\Spanner\V1\ChangeStreamRecord\DataChangeRecord;

use UnexpectedValueException;

/**
 * Value capture type describes which values are recorded in the data
 * change record.
 *
 * Protobuf type <code>google.spanner.v1.ChangeStreamRecord.DataChangeRecord.ValueCaptureType</code>
 */
class ValueCaptureType
{
    /**
     * Not specified.
     *
     * Generated from protobuf enum <code>VALUE_CAPTURE_TYPE_UNSPECIFIED = 0;</code>
     */
    const VALUE_CAPTURE_TYPE_UNSPECIFIED = 0;
    /**
     * Records both old and new values of the modified watched columns.
     *
     * Generated from protobuf enum <code>OLD_AND_NEW_VALUES = 10;</code>
     */
    const OLD_AND_NEW_VALUES = 10;
    /**
     * Records only new values of the modified watched columns.
     *
     * Generated from protobuf enum <code>NEW_VALUES = 20;</code>
     */
    const NEW_VALUES = 20;
    /**
     * Records new values of all watched columns, including modified and
     * unmodified columns.
     *
     * Generated from protobuf enum <code>NEW_ROW = 30;</code>
     */
    const NEW_ROW = 30;
    /**
     * Records the new values of all watched columns, including modified and
     * unmodified columns. Also records the old values of the modified
     * columns.
     *
     * Generated from protobuf enum <code>NEW_ROW_AND_OLD_VALUES = 40;</code>
     */
    const NEW_ROW_AND_OLD_VALUES = 40;

    private static $valueToName = [
        self::VALUE_CAPTURE_TYPE_UNSPECIFIED => 'VALUE_CAPTURE_TYPE_UNSPECIFIED',
        self::OLD_AND_NEW_VALUES => 'OLD_AND_NEW_VALUES',
        self::NEW_VALUES => 'NEW_VALUES',
        self::NEW_ROW => 'NEW_ROW',
        self::NEW_ROW_AND_OLD_VALUES => 'NEW_ROW_AND_OLD_VALUES',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(ValueCaptureType::class, \Google\Cloud\Spanner\V1\ChangeStreamRecord_DataChangeRecord_ValueCaptureType::class);

