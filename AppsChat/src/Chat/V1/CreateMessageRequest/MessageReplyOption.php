<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/chat/v1/message.proto

namespace Google\Apps\Chat\V1\CreateMessageRequest;

use UnexpectedValueException;

/**
 * Specifies how to reply to a message.
 * More states might be added in the future.
 *
 * Protobuf type <code>google.chat.v1.CreateMessageRequest.MessageReplyOption</code>
 */
class MessageReplyOption
{
    /**
     * Default. Starts a new thread. Using this option ignores any [thread
     * ID][google.chat.v1.Thread.name] or
     * [`thread_key`][google.chat.v1.Thread.thread_key] that's included.
     *
     * Generated from protobuf enum <code>MESSAGE_REPLY_OPTION_UNSPECIFIED = 0;</code>
     */
    const MESSAGE_REPLY_OPTION_UNSPECIFIED = 0;
    /**
     * Creates the message as a reply to the thread specified by [thread
     * ID][google.chat.v1.Thread.name] or
     * [`thread_key`][google.chat.v1.Thread.thread_key]. If it fails, the
     * message starts a new thread instead.
     *
     * Generated from protobuf enum <code>REPLY_MESSAGE_FALLBACK_TO_NEW_THREAD = 1;</code>
     */
    const REPLY_MESSAGE_FALLBACK_TO_NEW_THREAD = 1;
    /**
     * Creates the message as a reply to the thread specified by [thread
     * ID][google.chat.v1.Thread.name] or
     * [`thread_key`][google.chat.v1.Thread.thread_key]. If a new `thread_key`
     * is used, a new thread is created. If the message creation fails, a
     * `NOT_FOUND` error is returned instead.
     *
     * Generated from protobuf enum <code>REPLY_MESSAGE_OR_FAIL = 2;</code>
     */
    const REPLY_MESSAGE_OR_FAIL = 2;

    private static $valueToName = [
        self::MESSAGE_REPLY_OPTION_UNSPECIFIED => 'MESSAGE_REPLY_OPTION_UNSPECIFIED',
        self::REPLY_MESSAGE_FALLBACK_TO_NEW_THREAD => 'REPLY_MESSAGE_FALLBACK_TO_NEW_THREAD',
        self::REPLY_MESSAGE_OR_FAIL => 'REPLY_MESSAGE_OR_FAIL',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}


