<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/chat/v1/reaction.proto

namespace Google\Apps\Chat\V1;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Lists reactions to a message.
 *
 * Generated from protobuf message <code>google.chat.v1.ListReactionsRequest</code>
 */
class ListReactionsRequest extends \Google\Protobuf\Internal\Message
{
    /**
     * Required. The message users reacted to.
     * Format: `spaces/{space}/messages/{message}`
     *
     * Generated from protobuf field <code>string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {</code>
     */
    protected $parent = '';
    /**
     * Optional. The maximum number of reactions returned. The service can return
     * fewer reactions than this value. If unspecified, the default value is 25.
     * The maximum value is 200; values above 200 are changed to 200.
     *
     * Generated from protobuf field <code>int32 page_size = 2 [(.google.api.field_behavior) = OPTIONAL];</code>
     */
    protected $page_size = 0;
    /**
     * Optional. (If resuming from a previous query.)
     * A page token received from a previous list reactions call. Provide this
     * to retrieve the subsequent page.
     * When paginating, the filter value should match the call that provided the
     * page token. Passing a different value might lead to unexpected results.
     *
     * Generated from protobuf field <code>string page_token = 3 [(.google.api.field_behavior) = OPTIONAL];</code>
     */
    protected $page_token = '';
    /**
     * Optional. A query filter.
     * You can filter reactions by
     * [emoji](https://developers.google.com/workspace/chat/api/reference/rest/v1/Emoji)
     * (either `emoji.unicode` or `emoji.custom_emoji.uid`) and
     * [user](https://developers.google.com/workspace/chat/api/reference/rest/v1/User)
     * (`user.name`).
     * To filter reactions for multiple emojis or users, join similar fields
     * with the `OR` operator, such as `emoji.unicode = "🙂" OR emoji.unicode =
     * "👍"` and `user.name = "users/AAAAAA" OR user.name = "users/BBBBBB"`.
     * To filter reactions by emoji and user, use the `AND` operator, such as
     * `emoji.unicode = "🙂" AND user.name = "users/AAAAAA"`.
     * If your query uses both `AND` and `OR`, group them with parentheses.
     * For example, the following queries are valid:
     * ```
     * user.name = "users/{user}"
     * emoji.unicode = "🙂"
     * emoji.custom_emoji.uid = "{uid}"
     * emoji.unicode = "🙂" OR emoji.unicode = "👍"
     * emoji.unicode = "🙂" OR emoji.custom_emoji.uid = "{uid}"
     * emoji.unicode = "🙂" AND user.name = "users/{user}"
     * (emoji.unicode = "🙂" OR emoji.custom_emoji.uid = "{uid}")
     * AND user.name = "users/{user}"
     * ```
     * The following queries are invalid:
     * ```
     * emoji.unicode = "🙂" AND emoji.unicode = "👍"
     * emoji.unicode = "🙂" AND emoji.custom_emoji.uid = "{uid}"
     * emoji.unicode = "🙂" OR user.name = "users/{user}"
     * emoji.unicode = "🙂" OR emoji.custom_emoji.uid = "{uid}" OR
     * user.name = "users/{user}"
     * emoji.unicode = "🙂" OR emoji.custom_emoji.uid = "{uid}"
     * AND user.name = "users/{user}"
     * ```
     * Invalid queries are rejected by the server with an `INVALID_ARGUMENT`
     * error.
     *
     * Generated from protobuf field <code>string filter = 4 [(.google.api.field_behavior) = OPTIONAL];</code>
     */
    protected $filter = '';

    /**
     * @param string $parent Required. The message users reacted to.
     *
     *                       Format: `spaces/{space}/messages/{message}`
     *                       Please see {@see ChatServiceClient::messageName()} for help formatting this field.
     *
     * @return \Google\Apps\Chat\V1\ListReactionsRequest
     *
     * @experimental
     */
    public static function build(string $parent): self
    {
        return (new self())
            ->setParent($parent);
    }

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $parent
     *           Required. The message users reacted to.
     *           Format: `spaces/{space}/messages/{message}`
     *     @type int $page_size
     *           Optional. The maximum number of reactions returned. The service can return
     *           fewer reactions than this value. If unspecified, the default value is 25.
     *           The maximum value is 200; values above 200 are changed to 200.
     *     @type string $page_token
     *           Optional. (If resuming from a previous query.)
     *           A page token received from a previous list reactions call. Provide this
     *           to retrieve the subsequent page.
     *           When paginating, the filter value should match the call that provided the
     *           page token. Passing a different value might lead to unexpected results.
     *     @type string $filter
     *           Optional. A query filter.
     *           You can filter reactions by
     *           [emoji](https://developers.google.com/workspace/chat/api/reference/rest/v1/Emoji)
     *           (either `emoji.unicode` or `emoji.custom_emoji.uid`) and
     *           [user](https://developers.google.com/workspace/chat/api/reference/rest/v1/User)
     *           (`user.name`).
     *           To filter reactions for multiple emojis or users, join similar fields
     *           with the `OR` operator, such as `emoji.unicode = "🙂" OR emoji.unicode =
     *           "👍"` and `user.name = "users/AAAAAA" OR user.name = "users/BBBBBB"`.
     *           To filter reactions by emoji and user, use the `AND` operator, such as
     *           `emoji.unicode = "🙂" AND user.name = "users/AAAAAA"`.
     *           If your query uses both `AND` and `OR`, group them with parentheses.
     *           For example, the following queries are valid:
     *           ```
     *           user.name = "users/{user}"
     *           emoji.unicode = "🙂"
     *           emoji.custom_emoji.uid = "{uid}"
     *           emoji.unicode = "🙂" OR emoji.unicode = "👍"
     *           emoji.unicode = "🙂" OR emoji.custom_emoji.uid = "{uid}"
     *           emoji.unicode = "🙂" AND user.name = "users/{user}"
     *           (emoji.unicode = "🙂" OR emoji.custom_emoji.uid = "{uid}")
     *           AND user.name = "users/{user}"
     *           ```
     *           The following queries are invalid:
     *           ```
     *           emoji.unicode = "🙂" AND emoji.unicode = "👍"
     *           emoji.unicode = "🙂" AND emoji.custom_emoji.uid = "{uid}"
     *           emoji.unicode = "🙂" OR user.name = "users/{user}"
     *           emoji.unicode = "🙂" OR emoji.custom_emoji.uid = "{uid}" OR
     *           user.name = "users/{user}"
     *           emoji.unicode = "🙂" OR emoji.custom_emoji.uid = "{uid}"
     *           AND user.name = "users/{user}"
     *           ```
     *           Invalid queries are rejected by the server with an `INVALID_ARGUMENT`
     *           error.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Google\Chat\V1\Reaction::initOnce();
        parent::__construct($data);
    }

    /**
     * Required. The message users reacted to.
     * Format: `spaces/{space}/messages/{message}`
     *
     * Generated from protobuf field <code>string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {</code>
     * @return string
     */
    public function getParent()
    {
        return $this->parent;
    }

    /**
     * Required. The message users reacted to.
     * Format: `spaces/{space}/messages/{message}`
     *
     * Generated from protobuf field <code>string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {</code>
     * @param string $var
     * @return $this
     */
    public function setParent($var)
    {
        GPBUtil::checkString($var, True);
        $this->parent = $var;

        return $this;
    }

    /**
     * Optional. The maximum number of reactions returned. The service can return
     * fewer reactions than this value. If unspecified, the default value is 25.
     * The maximum value is 200; values above 200 are changed to 200.
     *
     * Generated from protobuf field <code>int32 page_size = 2 [(.google.api.field_behavior) = OPTIONAL];</code>
     * @return int
     */
    public function getPageSize()
    {
        return $this->page_size;
    }

    /**
     * Optional. The maximum number of reactions returned. The service can return
     * fewer reactions than this value. If unspecified, the default value is 25.
     * The maximum value is 200; values above 200 are changed to 200.
     *
     * Generated from protobuf field <code>int32 page_size = 2 [(.google.api.field_behavior) = OPTIONAL];</code>
     * @param int $var
     * @return $this
     */
    public function setPageSize($var)
    {
        GPBUtil::checkInt32($var);
        $this->page_size = $var;

        return $this;
    }

    /**
     * Optional. (If resuming from a previous query.)
     * A page token received from a previous list reactions call. Provide this
     * to retrieve the subsequent page.
     * When paginating, the filter value should match the call that provided the
     * page token. Passing a different value might lead to unexpected results.
     *
     * Generated from protobuf field <code>string page_token = 3 [(.google.api.field_behavior) = OPTIONAL];</code>
     * @return string
     */
    public function getPageToken()
    {
        return $this->page_token;
    }

    /**
     * Optional. (If resuming from a previous query.)
     * A page token received from a previous list reactions call. Provide this
     * to retrieve the subsequent page.
     * When paginating, the filter value should match the call that provided the
     * page token. Passing a different value might lead to unexpected results.
     *
     * Generated from protobuf field <code>string page_token = 3 [(.google.api.field_behavior) = OPTIONAL];</code>
     * @param string $var
     * @return $this
     */
    public function setPageToken($var)
    {
        GPBUtil::checkString($var, True);
        $this->page_token = $var;

        return $this;
    }

    /**
     * Optional. A query filter.
     * You can filter reactions by
     * [emoji](https://developers.google.com/workspace/chat/api/reference/rest/v1/Emoji)
     * (either `emoji.unicode` or `emoji.custom_emoji.uid`) and
     * [user](https://developers.google.com/workspace/chat/api/reference/rest/v1/User)
     * (`user.name`).
     * To filter reactions for multiple emojis or users, join similar fields
     * with the `OR` operator, such as `emoji.unicode = "🙂" OR emoji.unicode =
     * "👍"` and `user.name = "users/AAAAAA" OR user.name = "users/BBBBBB"`.
     * To filter reactions by emoji and user, use the `AND` operator, such as
     * `emoji.unicode = "🙂" AND user.name = "users/AAAAAA"`.
     * If your query uses both `AND` and `OR`, group them with parentheses.
     * For example, the following queries are valid:
     * ```
     * user.name = "users/{user}"
     * emoji.unicode = "🙂"
     * emoji.custom_emoji.uid = "{uid}"
     * emoji.unicode = "🙂" OR emoji.unicode = "👍"
     * emoji.unicode = "🙂" OR emoji.custom_emoji.uid = "{uid}"
     * emoji.unicode = "🙂" AND user.name = "users/{user}"
     * (emoji.unicode = "🙂" OR emoji.custom_emoji.uid = "{uid}")
     * AND user.name = "users/{user}"
     * ```
     * The following queries are invalid:
     * ```
     * emoji.unicode = "🙂" AND emoji.unicode = "👍"
     * emoji.unicode = "🙂" AND emoji.custom_emoji.uid = "{uid}"
     * emoji.unicode = "🙂" OR user.name = "users/{user}"
     * emoji.unicode = "🙂" OR emoji.custom_emoji.uid = "{uid}" OR
     * user.name = "users/{user}"
     * emoji.unicode = "🙂" OR emoji.custom_emoji.uid = "{uid}"
     * AND user.name = "users/{user}"
     * ```
     * Invalid queries are rejected by the server with an `INVALID_ARGUMENT`
     * error.
     *
     * Generated from protobuf field <code>string filter = 4 [(.google.api.field_behavior) = OPTIONAL];</code>
     * @return string
     */
    public function getFilter()
    {
        return $this->filter;
    }

    /**
     * Optional. A query filter.
     * You can filter reactions by
     * [emoji](https://developers.google.com/workspace/chat/api/reference/rest/v1/Emoji)
     * (either `emoji.unicode` or `emoji.custom_emoji.uid`) and
     * [user](https://developers.google.com/workspace/chat/api/reference/rest/v1/User)
     * (`user.name`).
     * To filter reactions for multiple emojis or users, join similar fields
     * with the `OR` operator, such as `emoji.unicode = "🙂" OR emoji.unicode =
     * "👍"` and `user.name = "users/AAAAAA" OR user.name = "users/BBBBBB"`.
     * To filter reactions by emoji and user, use the `AND` operator, such as
     * `emoji.unicode = "🙂" AND user.name = "users/AAAAAA"`.
     * If your query uses both `AND` and `OR`, group them with parentheses.
     * For example, the following queries are valid:
     * ```
     * user.name = "users/{user}"
     * emoji.unicode = "🙂"
     * emoji.custom_emoji.uid = "{uid}"
     * emoji.unicode = "🙂" OR emoji.unicode = "👍"
     * emoji.unicode = "🙂" OR emoji.custom_emoji.uid = "{uid}"
     * emoji.unicode = "🙂" AND user.name = "users/{user}"
     * (emoji.unicode = "🙂" OR emoji.custom_emoji.uid = "{uid}")
     * AND user.name = "users/{user}"
     * ```
     * The following queries are invalid:
     * ```
     * emoji.unicode = "🙂" AND emoji.unicode = "👍"
     * emoji.unicode = "🙂" AND emoji.custom_emoji.uid = "{uid}"
     * emoji.unicode = "🙂" OR user.name = "users/{user}"
     * emoji.unicode = "🙂" OR emoji.custom_emoji.uid = "{uid}" OR
     * user.name = "users/{user}"
     * emoji.unicode = "🙂" OR emoji.custom_emoji.uid = "{uid}"
     * AND user.name = "users/{user}"
     * ```
     * Invalid queries are rejected by the server with an `INVALID_ARGUMENT`
     * error.
     *
     * Generated from protobuf field <code>string filter = 4 [(.google.api.field_behavior) = OPTIONAL];</code>
     * @param string $var
     * @return $this
     */
    public function setFilter($var)
    {
        GPBUtil::checkString($var, True);
        $this->filter = $var;

        return $this;
    }

}

