<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/cloud/lifesciences/v2beta/workflows.proto

namespace Google\Cloud\LifeSciences\V2beta;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Configuration for an existing disk to be attached to the VM.
 *
 * Generated from protobuf message <code>google.cloud.lifesciences.v2beta.ExistingDisk</code>
 */
class ExistingDisk extends \Google\Protobuf\Internal\Message
{
    /**
     * If `disk` contains slashes, the Cloud Life Sciences API assumes that it is
     * a complete URL for the disk.  If `disk` does not contain slashes, the Cloud
     * Life Sciences API assumes that the disk is a zonal disk and a URL will be
     * generated of the form `zones/<zone>/disks/<disk>`, where `<zone>` is the
     * zone in which the instance is allocated. The disk must be ext4 formatted.
     * If all `Mount` references to this disk have the `read_only` flag set to
     * true, the disk will be attached in `read-only` mode and can be shared with
     * other instances. Otherwise, the disk will be available for writing but
     * cannot be shared.
     *
     * Generated from protobuf field <code>string disk = 1;</code>
     */
    private $disk = '';

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $disk
     *           If `disk` contains slashes, the Cloud Life Sciences API assumes that it is
     *           a complete URL for the disk.  If `disk` does not contain slashes, the Cloud
     *           Life Sciences API assumes that the disk is a zonal disk and a URL will be
     *           generated of the form `zones/<zone>/disks/<disk>`, where `<zone>` is the
     *           zone in which the instance is allocated. The disk must be ext4 formatted.
     *           If all `Mount` references to this disk have the `read_only` flag set to
     *           true, the disk will be attached in `read-only` mode and can be shared with
     *           other instances. Otherwise, the disk will be available for writing but
     *           cannot be shared.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Google\Cloud\Lifesciences\V2Beta\Workflows::initOnce();
        parent::__construct($data);
    }

    /**
     * If `disk` contains slashes, the Cloud Life Sciences API assumes that it is
     * a complete URL for the disk.  If `disk` does not contain slashes, the Cloud
     * Life Sciences API assumes that the disk is a zonal disk and a URL will be
     * generated of the form `zones/<zone>/disks/<disk>`, where `<zone>` is the
     * zone in which the instance is allocated. The disk must be ext4 formatted.
     * If all `Mount` references to this disk have the `read_only` flag set to
     * true, the disk will be attached in `read-only` mode and can be shared with
     * other instances. Otherwise, the disk will be available for writing but
     * cannot be shared.
     *
     * Generated from protobuf field <code>string disk = 1;</code>
     * @return string
     */
    public function getDisk()
    {
        return $this->disk;
    }

    /**
     * If `disk` contains slashes, the Cloud Life Sciences API assumes that it is
     * a complete URL for the disk.  If `disk` does not contain slashes, the Cloud
     * Life Sciences API assumes that the disk is a zonal disk and a URL will be
     * generated of the form `zones/<zone>/disks/<disk>`, where `<zone>` is the
     * zone in which the instance is allocated. The disk must be ext4 formatted.
     * If all `Mount` references to this disk have the `read_only` flag set to
     * true, the disk will be attached in `read-only` mode and can be shared with
     * other instances. Otherwise, the disk will be available for writing but
     * cannot be shared.
     *
     * Generated from protobuf field <code>string disk = 1;</code>
     * @param string $var
     * @return $this
     */
    public function setDisk($var)
    {
        GPBUtil::checkString($var, True);
        $this->disk = $var;

        return $this;
    }

}

