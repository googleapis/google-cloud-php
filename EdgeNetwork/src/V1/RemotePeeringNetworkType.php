<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/cloud/edgenetwork/v1/resources.proto

namespace Google\Cloud\EdgeNetwork\V1;

use UnexpectedValueException;

/**
 * Defines the remote peering destination for the interface. It is required
 * when peering separation is enabled.
 *
 * Protobuf type <code>google.cloud.edgenetwork.v1.RemotePeeringNetworkType</code>
 */
class RemotePeeringNetworkType
{
    /**
     * Unspecified.
     *
     * Generated from protobuf enum <code>REMOTE_PEERING_NETWORK_TYPE_UNSPECIFIED = 0;</code>
     */
    const REMOTE_PEERING_NETWORK_TYPE_UNSPECIFIED = 0;
    /**
     * Customer's trusted internal network.
     *
     * Generated from protobuf enum <code>REMOTE_PEERING_NETWORK_TYPE_CUSTOMER_INTERNAL = 1;</code>
     */
    const REMOTE_PEERING_NETWORK_TYPE_CUSTOMER_INTERNAL = 1;
    /**
     * Customer's untrust network that has internet access.
     *
     * Generated from protobuf enum <code>REMOTE_PEERING_NETWORK_TYPE_CUSTOMER_INTERNET = 2;</code>
     */
    const REMOTE_PEERING_NETWORK_TYPE_CUSTOMER_INTERNET = 2;

    private static $valueToName = [
        self::REMOTE_PEERING_NETWORK_TYPE_UNSPECIFIED => 'REMOTE_PEERING_NETWORK_TYPE_UNSPECIFIED',
        self::REMOTE_PEERING_NETWORK_TYPE_CUSTOMER_INTERNAL => 'REMOTE_PEERING_NETWORK_TYPE_CUSTOMER_INTERNAL',
        self::REMOTE_PEERING_NETWORK_TYPE_CUSTOMER_INTERNET => 'REMOTE_PEERING_NETWORK_TYPE_CUSTOMER_INTERNET',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

