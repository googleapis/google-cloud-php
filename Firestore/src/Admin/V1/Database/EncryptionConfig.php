<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/firestore/admin/v1/database.proto

namespace Google\Cloud\Firestore\Admin\V1\Database;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Encryption configuration for a new database being created from another
 * source.
 * The source could be a [Backup][google.firestore.admin.v1.Backup] .
 *
 * Generated from protobuf message <code>google.firestore.admin.v1.Database.EncryptionConfig</code>
 */
class EncryptionConfig extends \Google\Protobuf\Internal\Message
{
    protected $encryption_type;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type \Google\Cloud\Firestore\Admin\V1\Database\EncryptionConfig\GoogleDefaultEncryptionOptions $google_default_encryption
     *           Use Google default encryption.
     *     @type \Google\Cloud\Firestore\Admin\V1\Database\EncryptionConfig\SourceEncryptionOptions $use_source_encryption
     *           The database will use the same encryption configuration as the source.
     *     @type \Google\Cloud\Firestore\Admin\V1\Database\EncryptionConfig\CustomerManagedEncryptionOptions $customer_managed_encryption
     *           Use Customer Managed Encryption Keys (CMEK) for encryption.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Google\Firestore\Admin\V1\Database::initOnce();
        parent::__construct($data);
    }

    /**
     * Use Google default encryption.
     *
     * Generated from protobuf field <code>.google.firestore.admin.v1.Database.EncryptionConfig.GoogleDefaultEncryptionOptions google_default_encryption = 1;</code>
     * @return \Google\Cloud\Firestore\Admin\V1\Database\EncryptionConfig\GoogleDefaultEncryptionOptions|null
     */
    public function getGoogleDefaultEncryption()
    {
        return $this->readOneof(1);
    }

    public function hasGoogleDefaultEncryption()
    {
        return $this->hasOneof(1);
    }

    /**
     * Use Google default encryption.
     *
     * Generated from protobuf field <code>.google.firestore.admin.v1.Database.EncryptionConfig.GoogleDefaultEncryptionOptions google_default_encryption = 1;</code>
     * @param \Google\Cloud\Firestore\Admin\V1\Database\EncryptionConfig\GoogleDefaultEncryptionOptions $var
     * @return $this
     */
    public function setGoogleDefaultEncryption($var)
    {
        GPBUtil::checkMessage($var, \Google\Cloud\Firestore\Admin\V1\Database\EncryptionConfig\GoogleDefaultEncryptionOptions::class);
        $this->writeOneof(1, $var);

        return $this;
    }

    /**
     * The database will use the same encryption configuration as the source.
     *
     * Generated from protobuf field <code>.google.firestore.admin.v1.Database.EncryptionConfig.SourceEncryptionOptions use_source_encryption = 2;</code>
     * @return \Google\Cloud\Firestore\Admin\V1\Database\EncryptionConfig\SourceEncryptionOptions|null
     */
    public function getUseSourceEncryption()
    {
        return $this->readOneof(2);
    }

    public function hasUseSourceEncryption()
    {
        return $this->hasOneof(2);
    }

    /**
     * The database will use the same encryption configuration as the source.
     *
     * Generated from protobuf field <code>.google.firestore.admin.v1.Database.EncryptionConfig.SourceEncryptionOptions use_source_encryption = 2;</code>
     * @param \Google\Cloud\Firestore\Admin\V1\Database\EncryptionConfig\SourceEncryptionOptions $var
     * @return $this
     */
    public function setUseSourceEncryption($var)
    {
        GPBUtil::checkMessage($var, \Google\Cloud\Firestore\Admin\V1\Database\EncryptionConfig\SourceEncryptionOptions::class);
        $this->writeOneof(2, $var);

        return $this;
    }

    /**
     * Use Customer Managed Encryption Keys (CMEK) for encryption.
     *
     * Generated from protobuf field <code>.google.firestore.admin.v1.Database.EncryptionConfig.CustomerManagedEncryptionOptions customer_managed_encryption = 3;</code>
     * @return \Google\Cloud\Firestore\Admin\V1\Database\EncryptionConfig\CustomerManagedEncryptionOptions|null
     */
    public function getCustomerManagedEncryption()
    {
        return $this->readOneof(3);
    }

    public function hasCustomerManagedEncryption()
    {
        return $this->hasOneof(3);
    }

    /**
     * Use Customer Managed Encryption Keys (CMEK) for encryption.
     *
     * Generated from protobuf field <code>.google.firestore.admin.v1.Database.EncryptionConfig.CustomerManagedEncryptionOptions customer_managed_encryption = 3;</code>
     * @param \Google\Cloud\Firestore\Admin\V1\Database\EncryptionConfig\CustomerManagedEncryptionOptions $var
     * @return $this
     */
    public function setCustomerManagedEncryption($var)
    {
        GPBUtil::checkMessage($var, \Google\Cloud\Firestore\Admin\V1\Database\EncryptionConfig\CustomerManagedEncryptionOptions::class);
        $this->writeOneof(3, $var);

        return $this;
    }

    /**
     * @return string
     */
    public function getEncryptionType()
    {
        return $this->whichOneof("encryption_type");
    }

}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(EncryptionConfig::class, \Google\Cloud\Firestore\Admin\V1\Database_EncryptionConfig::class);

