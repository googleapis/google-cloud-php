<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/cloud/migrationcenter/v1/migrationcenter.proto

namespace Google\Cloud\MigrationCenter\V1;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * The user preferences relating to Google Cloud VMware Engine target platform.
 *
 * Generated from protobuf message <code>google.cloud.migrationcenter.v1.VmwareEnginePreferences</code>
 */
class VmwareEnginePreferences extends \Google\Protobuf\Internal\Message
{
    /**
     * CPU overcommit ratio.
     * Acceptable values are between 1.0 and 8.0, with 0.1 increment.
     *
     * Generated from protobuf field <code>double cpu_overcommit_ratio = 1;</code>
     */
    protected $cpu_overcommit_ratio = 0.0;
    /**
     * Memory overcommit ratio.
     * Acceptable values are 1.0, 1.25, 1.5, 1.75 and 2.0.
     *
     * Generated from protobuf field <code>double memory_overcommit_ratio = 2;</code>
     */
    protected $memory_overcommit_ratio = 0.0;
    /**
     * The Deduplication and Compression ratio is based on the logical (Used
     * Before) space required to store data before applying deduplication and
     * compression, in relation to the physical (Used After) space required after
     * applying deduplication and compression. Specifically, the ratio is the Used
     * Before space divided by the Used After space. For example, if the Used
     * Before space is 3 GB, but the physical Used After space is 1 GB, the
     * deduplication and compression ratio is 3x. Acceptable values are
     * between 1.0 and 4.0.
     *
     * Generated from protobuf field <code>double storage_deduplication_compression_ratio = 3;</code>
     */
    protected $storage_deduplication_compression_ratio = 0.0;
    /**
     * Commitment plan to consider when calculating costs for virtual machine
     * insights and recommendations.
     * If you are unsure which value to set, a 3 year commitment plan is often a
     * good value to start with.
     *
     * Generated from protobuf field <code>.google.cloud.migrationcenter.v1.VmwareEnginePreferences.CommitmentPlan commitment_plan = 4;</code>
     */
    protected $commitment_plan = 0;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type float $cpu_overcommit_ratio
     *           CPU overcommit ratio.
     *           Acceptable values are between 1.0 and 8.0, with 0.1 increment.
     *     @type float $memory_overcommit_ratio
     *           Memory overcommit ratio.
     *           Acceptable values are 1.0, 1.25, 1.5, 1.75 and 2.0.
     *     @type float $storage_deduplication_compression_ratio
     *           The Deduplication and Compression ratio is based on the logical (Used
     *           Before) space required to store data before applying deduplication and
     *           compression, in relation to the physical (Used After) space required after
     *           applying deduplication and compression. Specifically, the ratio is the Used
     *           Before space divided by the Used After space. For example, if the Used
     *           Before space is 3 GB, but the physical Used After space is 1 GB, the
     *           deduplication and compression ratio is 3x. Acceptable values are
     *           between 1.0 and 4.0.
     *     @type int $commitment_plan
     *           Commitment plan to consider when calculating costs for virtual machine
     *           insights and recommendations.
     *           If you are unsure which value to set, a 3 year commitment plan is often a
     *           good value to start with.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Google\Cloud\Migrationcenter\V1\Migrationcenter::initOnce();
        parent::__construct($data);
    }

    /**
     * CPU overcommit ratio.
     * Acceptable values are between 1.0 and 8.0, with 0.1 increment.
     *
     * Generated from protobuf field <code>double cpu_overcommit_ratio = 1;</code>
     * @return float
     */
    public function getCpuOvercommitRatio()
    {
        return $this->cpu_overcommit_ratio;
    }

    /**
     * CPU overcommit ratio.
     * Acceptable values are between 1.0 and 8.0, with 0.1 increment.
     *
     * Generated from protobuf field <code>double cpu_overcommit_ratio = 1;</code>
     * @param float $var
     * @return $this
     */
    public function setCpuOvercommitRatio($var)
    {
        GPBUtil::checkDouble($var);
        $this->cpu_overcommit_ratio = $var;

        return $this;
    }

    /**
     * Memory overcommit ratio.
     * Acceptable values are 1.0, 1.25, 1.5, 1.75 and 2.0.
     *
     * Generated from protobuf field <code>double memory_overcommit_ratio = 2;</code>
     * @return float
     */
    public function getMemoryOvercommitRatio()
    {
        return $this->memory_overcommit_ratio;
    }

    /**
     * Memory overcommit ratio.
     * Acceptable values are 1.0, 1.25, 1.5, 1.75 and 2.0.
     *
     * Generated from protobuf field <code>double memory_overcommit_ratio = 2;</code>
     * @param float $var
     * @return $this
     */
    public function setMemoryOvercommitRatio($var)
    {
        GPBUtil::checkDouble($var);
        $this->memory_overcommit_ratio = $var;

        return $this;
    }

    /**
     * The Deduplication and Compression ratio is based on the logical (Used
     * Before) space required to store data before applying deduplication and
     * compression, in relation to the physical (Used After) space required after
     * applying deduplication and compression. Specifically, the ratio is the Used
     * Before space divided by the Used After space. For example, if the Used
     * Before space is 3 GB, but the physical Used After space is 1 GB, the
     * deduplication and compression ratio is 3x. Acceptable values are
     * between 1.0 and 4.0.
     *
     * Generated from protobuf field <code>double storage_deduplication_compression_ratio = 3;</code>
     * @return float
     */
    public function getStorageDeduplicationCompressionRatio()
    {
        return $this->storage_deduplication_compression_ratio;
    }

    /**
     * The Deduplication and Compression ratio is based on the logical (Used
     * Before) space required to store data before applying deduplication and
     * compression, in relation to the physical (Used After) space required after
     * applying deduplication and compression. Specifically, the ratio is the Used
     * Before space divided by the Used After space. For example, if the Used
     * Before space is 3 GB, but the physical Used After space is 1 GB, the
     * deduplication and compression ratio is 3x. Acceptable values are
     * between 1.0 and 4.0.
     *
     * Generated from protobuf field <code>double storage_deduplication_compression_ratio = 3;</code>
     * @param float $var
     * @return $this
     */
    public function setStorageDeduplicationCompressionRatio($var)
    {
        GPBUtil::checkDouble($var);
        $this->storage_deduplication_compression_ratio = $var;

        return $this;
    }

    /**
     * Commitment plan to consider when calculating costs for virtual machine
     * insights and recommendations.
     * If you are unsure which value to set, a 3 year commitment plan is often a
     * good value to start with.
     *
     * Generated from protobuf field <code>.google.cloud.migrationcenter.v1.VmwareEnginePreferences.CommitmentPlan commitment_plan = 4;</code>
     * @return int
     */
    public function getCommitmentPlan()
    {
        return $this->commitment_plan;
    }

    /**
     * Commitment plan to consider when calculating costs for virtual machine
     * insights and recommendations.
     * If you are unsure which value to set, a 3 year commitment plan is often a
     * good value to start with.
     *
     * Generated from protobuf field <code>.google.cloud.migrationcenter.v1.VmwareEnginePreferences.CommitmentPlan commitment_plan = 4;</code>
     * @param int $var
     * @return $this
     */
    public function setCommitmentPlan($var)
    {
        GPBUtil::checkEnum($var, \Google\Cloud\MigrationCenter\V1\VmwareEnginePreferences\CommitmentPlan::class);
        $this->commitment_plan = $var;

        return $this;
    }

}

