<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/cloud/batch/v1/job.proto

namespace Google\Cloud\Batch\V1\AllocationPolicy;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * InstancePolicyOrTemplate lets you define the type of resources to use for
 * this job either with an InstancePolicy or an instance template.
 * If undefined, Batch picks the type of VM to use and doesn't include
 * optional VM resources such as GPUs and extra disks.
 *
 * Generated from protobuf message <code>google.cloud.batch.v1.AllocationPolicy.InstancePolicyOrTemplate</code>
 */
class InstancePolicyOrTemplate extends \Google\Protobuf\Internal\Message
{
    /**
     * Set this field true if you want Batch to help fetch drivers from a third
     * party location and install them for GPUs specified in
     * `policy.accelerators` or `instance_template` on your behalf. Default is
     * false.
     * For Container-Optimized Image cases, Batch will install the
     * accelerator driver following milestones of
     * https://cloud.google.com/container-optimized-os/docs/release-notes. For
     * non Container-Optimized Image cases, following
     * https://github.com/GoogleCloudPlatform/compute-gpu-installation/blob/main/linux/install_gpu_driver.py.
     *
     * Generated from protobuf field <code>bool install_gpu_drivers = 3;</code>
     */
    protected $install_gpu_drivers = false;
    /**
     * Optional. Set this field true if you want Batch to install Ops Agent on
     * your behalf. Default is false.
     *
     * Generated from protobuf field <code>bool install_ops_agent = 4 [(.google.api.field_behavior) = OPTIONAL];</code>
     */
    protected $install_ops_agent = false;
    /**
     * Optional. Set this field to `true` if you want Batch to block
     * project-level SSH keys from accessing this job's VMs.  Alternatively, you
     * can configure the job to specify a VM instance template that blocks
     * project-level SSH keys. In either case, Batch blocks project-level SSH
     * keys while creating the VMs for this job.
     * Batch allows project-level SSH keys for a job's VMs only if all
     * the following are true:
     * + This field is undefined or set to `false`.
     * + The job's VM instance template (if any) doesn't block project-level
     *   SSH keys.
     * Notably, you can override this behavior by manually updating a VM to
     * block or allow project-level SSH keys. For more information about
     * blocking project-level SSH keys, see the Compute Engine documentation:
     * https://cloud.google.com/compute/docs/connect/restrict-ssh-keys#block-keys
     *
     * Generated from protobuf field <code>bool block_project_ssh_keys = 5 [(.google.api.field_behavior) = OPTIONAL];</code>
     */
    protected $block_project_ssh_keys = false;
    protected $policy_template;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type \Google\Cloud\Batch\V1\AllocationPolicy\InstancePolicy $policy
     *           InstancePolicy.
     *     @type string $instance_template
     *           Name of an instance template used to create VMs.
     *           Named the field as 'instance_template' instead of 'template' to avoid
     *           C++ keyword conflict.
     *           Batch only supports global instance templates from the same project as
     *           the job.
     *           You can specify the global instance template as a full or partial URL.
     *     @type bool $install_gpu_drivers
     *           Set this field true if you want Batch to help fetch drivers from a third
     *           party location and install them for GPUs specified in
     *           `policy.accelerators` or `instance_template` on your behalf. Default is
     *           false.
     *           For Container-Optimized Image cases, Batch will install the
     *           accelerator driver following milestones of
     *           https://cloud.google.com/container-optimized-os/docs/release-notes. For
     *           non Container-Optimized Image cases, following
     *           https://github.com/GoogleCloudPlatform/compute-gpu-installation/blob/main/linux/install_gpu_driver.py.
     *     @type bool $install_ops_agent
     *           Optional. Set this field true if you want Batch to install Ops Agent on
     *           your behalf. Default is false.
     *     @type bool $block_project_ssh_keys
     *           Optional. Set this field to `true` if you want Batch to block
     *           project-level SSH keys from accessing this job's VMs.  Alternatively, you
     *           can configure the job to specify a VM instance template that blocks
     *           project-level SSH keys. In either case, Batch blocks project-level SSH
     *           keys while creating the VMs for this job.
     *           Batch allows project-level SSH keys for a job's VMs only if all
     *           the following are true:
     *           + This field is undefined or set to `false`.
     *           + The job's VM instance template (if any) doesn't block project-level
     *             SSH keys.
     *           Notably, you can override this behavior by manually updating a VM to
     *           block or allow project-level SSH keys. For more information about
     *           blocking project-level SSH keys, see the Compute Engine documentation:
     *           https://cloud.google.com/compute/docs/connect/restrict-ssh-keys#block-keys
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Google\Cloud\Batch\V1\Job::initOnce();
        parent::__construct($data);
    }

    /**
     * InstancePolicy.
     *
     * Generated from protobuf field <code>.google.cloud.batch.v1.AllocationPolicy.InstancePolicy policy = 1;</code>
     * @return \Google\Cloud\Batch\V1\AllocationPolicy\InstancePolicy|null
     */
    public function getPolicy()
    {
        return $this->readOneof(1);
    }

    public function hasPolicy()
    {
        return $this->hasOneof(1);
    }

    /**
     * InstancePolicy.
     *
     * Generated from protobuf field <code>.google.cloud.batch.v1.AllocationPolicy.InstancePolicy policy = 1;</code>
     * @param \Google\Cloud\Batch\V1\AllocationPolicy\InstancePolicy $var
     * @return $this
     */
    public function setPolicy($var)
    {
        GPBUtil::checkMessage($var, \Google\Cloud\Batch\V1\AllocationPolicy\InstancePolicy::class);
        $this->writeOneof(1, $var);

        return $this;
    }

    /**
     * Name of an instance template used to create VMs.
     * Named the field as 'instance_template' instead of 'template' to avoid
     * C++ keyword conflict.
     * Batch only supports global instance templates from the same project as
     * the job.
     * You can specify the global instance template as a full or partial URL.
     *
     * Generated from protobuf field <code>string instance_template = 2;</code>
     * @return string
     */
    public function getInstanceTemplate()
    {
        return $this->readOneof(2);
    }

    public function hasInstanceTemplate()
    {
        return $this->hasOneof(2);
    }

    /**
     * Name of an instance template used to create VMs.
     * Named the field as 'instance_template' instead of 'template' to avoid
     * C++ keyword conflict.
     * Batch only supports global instance templates from the same project as
     * the job.
     * You can specify the global instance template as a full or partial URL.
     *
     * Generated from protobuf field <code>string instance_template = 2;</code>
     * @param string $var
     * @return $this
     */
    public function setInstanceTemplate($var)
    {
        GPBUtil::checkString($var, True);
        $this->writeOneof(2, $var);

        return $this;
    }

    /**
     * Set this field true if you want Batch to help fetch drivers from a third
     * party location and install them for GPUs specified in
     * `policy.accelerators` or `instance_template` on your behalf. Default is
     * false.
     * For Container-Optimized Image cases, Batch will install the
     * accelerator driver following milestones of
     * https://cloud.google.com/container-optimized-os/docs/release-notes. For
     * non Container-Optimized Image cases, following
     * https://github.com/GoogleCloudPlatform/compute-gpu-installation/blob/main/linux/install_gpu_driver.py.
     *
     * Generated from protobuf field <code>bool install_gpu_drivers = 3;</code>
     * @return bool
     */
    public function getInstallGpuDrivers()
    {
        return $this->install_gpu_drivers;
    }

    /**
     * Set this field true if you want Batch to help fetch drivers from a third
     * party location and install them for GPUs specified in
     * `policy.accelerators` or `instance_template` on your behalf. Default is
     * false.
     * For Container-Optimized Image cases, Batch will install the
     * accelerator driver following milestones of
     * https://cloud.google.com/container-optimized-os/docs/release-notes. For
     * non Container-Optimized Image cases, following
     * https://github.com/GoogleCloudPlatform/compute-gpu-installation/blob/main/linux/install_gpu_driver.py.
     *
     * Generated from protobuf field <code>bool install_gpu_drivers = 3;</code>
     * @param bool $var
     * @return $this
     */
    public function setInstallGpuDrivers($var)
    {
        GPBUtil::checkBool($var);
        $this->install_gpu_drivers = $var;

        return $this;
    }

    /**
     * Optional. Set this field true if you want Batch to install Ops Agent on
     * your behalf. Default is false.
     *
     * Generated from protobuf field <code>bool install_ops_agent = 4 [(.google.api.field_behavior) = OPTIONAL];</code>
     * @return bool
     */
    public function getInstallOpsAgent()
    {
        return $this->install_ops_agent;
    }

    /**
     * Optional. Set this field true if you want Batch to install Ops Agent on
     * your behalf. Default is false.
     *
     * Generated from protobuf field <code>bool install_ops_agent = 4 [(.google.api.field_behavior) = OPTIONAL];</code>
     * @param bool $var
     * @return $this
     */
    public function setInstallOpsAgent($var)
    {
        GPBUtil::checkBool($var);
        $this->install_ops_agent = $var;

        return $this;
    }

    /**
     * Optional. Set this field to `true` if you want Batch to block
     * project-level SSH keys from accessing this job's VMs.  Alternatively, you
     * can configure the job to specify a VM instance template that blocks
     * project-level SSH keys. In either case, Batch blocks project-level SSH
     * keys while creating the VMs for this job.
     * Batch allows project-level SSH keys for a job's VMs only if all
     * the following are true:
     * + This field is undefined or set to `false`.
     * + The job's VM instance template (if any) doesn't block project-level
     *   SSH keys.
     * Notably, you can override this behavior by manually updating a VM to
     * block or allow project-level SSH keys. For more information about
     * blocking project-level SSH keys, see the Compute Engine documentation:
     * https://cloud.google.com/compute/docs/connect/restrict-ssh-keys#block-keys
     *
     * Generated from protobuf field <code>bool block_project_ssh_keys = 5 [(.google.api.field_behavior) = OPTIONAL];</code>
     * @return bool
     */
    public function getBlockProjectSshKeys()
    {
        return $this->block_project_ssh_keys;
    }

    /**
     * Optional. Set this field to `true` if you want Batch to block
     * project-level SSH keys from accessing this job's VMs.  Alternatively, you
     * can configure the job to specify a VM instance template that blocks
     * project-level SSH keys. In either case, Batch blocks project-level SSH
     * keys while creating the VMs for this job.
     * Batch allows project-level SSH keys for a job's VMs only if all
     * the following are true:
     * + This field is undefined or set to `false`.
     * + The job's VM instance template (if any) doesn't block project-level
     *   SSH keys.
     * Notably, you can override this behavior by manually updating a VM to
     * block or allow project-level SSH keys. For more information about
     * blocking project-level SSH keys, see the Compute Engine documentation:
     * https://cloud.google.com/compute/docs/connect/restrict-ssh-keys#block-keys
     *
     * Generated from protobuf field <code>bool block_project_ssh_keys = 5 [(.google.api.field_behavior) = OPTIONAL];</code>
     * @param bool $var
     * @return $this
     */
    public function setBlockProjectSshKeys($var)
    {
        GPBUtil::checkBool($var);
        $this->block_project_ssh_keys = $var;

        return $this;
    }

    /**
     * @return string
     */
    public function getPolicyTemplate()
    {
        return $this->whichOneof("policy_template");
    }

}


