<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/cloud/kms/v1/resources.proto

namespace Google\Cloud\Kms\V1\PublicKey;

use UnexpectedValueException;

/**
 * The supported [PublicKey][google.cloud.kms.v1.PublicKey] formats.
 *
 * Protobuf type <code>google.cloud.kms.v1.PublicKey.PublicKeyFormat</code>
 */
class PublicKeyFormat
{
    /**
     * If the
     * [public_key_format][google.cloud.kms.v1.GetPublicKeyRequest.public_key_format]
     * field is not specified:
     * - For PQC algorithms, an error will be returned.
     * - For non-PQC algorithms, the default format is PEM, and the field
     *   [pem][google.cloud.kms.v1.PublicKey.pem] will be populated.
     * Otherwise, the public key will be exported through the
     * [public_key][google.cloud.kms.v1.PublicKey.public_key] field in the
     * requested format.
     *
     * Generated from protobuf enum <code>PUBLIC_KEY_FORMAT_UNSPECIFIED = 0;</code>
     */
    const PUBLIC_KEY_FORMAT_UNSPECIFIED = 0;
    /**
     * The returned public key will be encoded in PEM format.
     * See the [RFC7468](https://tools.ietf.org/html/rfc7468) sections for
     * [General Considerations](https://tools.ietf.org/html/rfc7468#section-2)
     * and [Textual Encoding of Subject Public Key Info]
     * (https://tools.ietf.org/html/rfc7468#section-13) for more information.
     *
     * Generated from protobuf enum <code>PEM = 1;</code>
     */
    const PEM = 1;
    /**
     * This is supported only for PQC algorithms.
     * The key material is returned in the format defined by NIST PQC
     * standards (FIPS 203, FIPS 204, and FIPS 205).
     *
     * Generated from protobuf enum <code>NIST_PQC = 3;</code>
     */
    const NIST_PQC = 3;

    private static $valueToName = [
        self::PUBLIC_KEY_FORMAT_UNSPECIFIED => 'PUBLIC_KEY_FORMAT_UNSPECIFIED',
        self::PEM => 'PEM',
        self::NIST_PQC => 'NIST_PQC',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}


