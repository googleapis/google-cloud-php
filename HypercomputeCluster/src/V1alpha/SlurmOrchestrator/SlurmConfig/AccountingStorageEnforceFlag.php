<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/cloud/hypercomputecluster/v1alpha/hypercompute_cluster.proto

namespace Google\Cloud\HypercomputeCluster\V1alpha\SlurmOrchestrator\SlurmConfig;

use UnexpectedValueException;

/**
 * Flags to control the level of association to impose on job submissions.
 *
 * Protobuf type <code>google.cloud.hypercomputecluster.v1alpha.SlurmOrchestrator.SlurmConfig.AccountingStorageEnforceFlag</code>
 */
class AccountingStorageEnforceFlag
{
    /**
     * Unspecified accounting storage enforce flag.
     *
     * Generated from protobuf enum <code>ACCOUNTING_STORAGE_ENFORCE_FLAG_UNSPECIFIED = 0;</code>
     */
    const ACCOUNTING_STORAGE_ENFORCE_FLAG_UNSPECIFIED = 0;
    /**
     * Implies all other available options except nojobs and nosteps.
     *
     * Generated from protobuf enum <code>ALL = 1;</code>
     */
    const ALL = 1;
    /**
     * No new job will be allowed to run unless a corresponding association
     * exists in the system.
     *
     * Generated from protobuf enum <code>ASSOCIATIONS = 2;</code>
     */
    const ASSOCIATIONS = 2;
    /**
     * Users will be limited by association to whatever job size or run time
     * limits are defined. Implies associations.
     *
     * Generated from protobuf enum <code>LIMITS = 3;</code>
     */
    const LIMITS = 3;
    /**
     * Slurm will not account for any jobs or steps on the system. Implies
     * nosteps.
     *
     * Generated from protobuf enum <code>NOJOBS = 4;</code>
     */
    const NOJOBS = 4;
    /**
     * Slurm will not account for any steps that have run.
     *
     * Generated from protobuf enum <code>NOSTEPS = 5;</code>
     */
    const NOSTEPS = 5;
    /**
     * Jobs will not be scheduled unless a valid qos is specified. Implies
     * associations.
     *
     * Generated from protobuf enum <code>QOS = 6;</code>
     */
    const QOS = 6;
    /**
     * A job will only be launched against an association or qos that has a
     * TRES-minutes limit set if the job will be able to run to completion.
     * Without this option set, jobs will be launched as long as their usage
     * hasn't reached the TRES-minutes limit. This can lead to jobs being
     * launched but then killed when the limit is reached. With this option, a
     * job won't be killed due to limits, even if the limits are changed after
     * the job was started and the association or qos violates the updated
     * limits. Implies limits and associations.
     *
     * Generated from protobuf enum <code>SAFE = 7;</code>
     */
    const SAFE = 7;
    /**
     * Jobs will not be scheduled unless a valid workload characterization key
     * is specified. Implies associations and TrackWCKey (a separate
     * configuration option).
     *
     * Generated from protobuf enum <code>WCKEYS = 8;</code>
     */
    const WCKEYS = 8;

    private static $valueToName = [
        self::ACCOUNTING_STORAGE_ENFORCE_FLAG_UNSPECIFIED => 'ACCOUNTING_STORAGE_ENFORCE_FLAG_UNSPECIFIED',
        self::ALL => 'ALL',
        self::ASSOCIATIONS => 'ASSOCIATIONS',
        self::LIMITS => 'LIMITS',
        self::NOJOBS => 'NOJOBS',
        self::NOSTEPS => 'NOSTEPS',
        self::QOS => 'QOS',
        self::SAFE => 'SAFE',
        self::WCKEYS => 'WCKEYS',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}


