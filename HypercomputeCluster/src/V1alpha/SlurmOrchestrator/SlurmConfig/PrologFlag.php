<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/cloud/hypercomputecluster/v1alpha/hypercompute_cluster.proto

namespace Google\Cloud\HypercomputeCluster\V1alpha\SlurmOrchestrator\SlurmConfig;

use UnexpectedValueException;

/**
 * Flags to control the Prolog behavior.
 *
 * Protobuf type <code>google.cloud.hypercomputecluster.v1alpha.SlurmOrchestrator.SlurmConfig.PrologFlag</code>
 */
class PrologFlag
{
    /**
     * Unspecified prolog flag.
     *
     * Generated from protobuf enum <code>PROLOG_FLAG_UNSPECIFIED = 0;</code>
     */
    const PROLOG_FLAG_UNSPECIFIED = 0;
    /**
     * Prolog script will be executed at job allocation. NOTE: increases the
     * time required to start jobs. Corresponds to Alloc.
     *
     * Generated from protobuf enum <code>ALLOC = 1;</code>
     */
    const ALLOC = 1;
    /**
     * Use the ProcTrack plugin to create a job container on all allocated
     * compute nodes. Corresponds to Contain.
     *
     * Generated from protobuf enum <code>CONTAIN = 2;</code>
     */
    const CONTAIN = 2;
    /**
     * Slurmctld will wait until the prolog completes on all allocated nodes
     * before sending the batch job launch request. Corresponds to DeferBatch.
     *
     * Generated from protobuf enum <code>DEFER_BATCH = 3;</code>
     */
    const DEFER_BATCH = 3;
    /**
     * If set, the ALLOC flag should also be set. This will allow for salloc
     * to not block until the prolog is finished on each node. Corresponds to
     * NoHold.
     *
     * Generated from protobuf enum <code>NO_HOLD = 4;</code>
     */
    const NO_HOLD = 4;
    /**
     * Always requeue it automatically even if the job requested no requeues.
     * NOTE: Setting this flag implicitly sets the ALLOC flag. Corresponds to
     * ForceRequeueOnFail.
     *
     * Generated from protobuf enum <code>FORCE_REQUEUE_ON_FAIL = 5;</code>
     */
    const FORCE_REQUEUE_ON_FAIL = 5;
    /**
     * Make the Prolog/Epilog run in the extern slurmstepd. Corresponds to
     * RunInJob.
     *
     * Generated from protobuf enum <code>RUN_IN_JOB = 6;</code>
     */
    const RUN_IN_JOB = 6;
    /**
     * Force prolog and epilog scripts to run serially within each node. NOTE:
     * This is incompatible with Serial.
     *
     * Generated from protobuf enum <code>SERIAL = 7;</code>
     */
    const SERIAL = 7;
    /**
     * Enable Slurm's built-in X11 forwarding capabilities. Corresponds to
     * X11.
     *
     * Generated from protobuf enum <code>X11 = 8;</code>
     */
    const X11 = 8;

    private static $valueToName = [
        self::PROLOG_FLAG_UNSPECIFIED => 'PROLOG_FLAG_UNSPECIFIED',
        self::ALLOC => 'ALLOC',
        self::CONTAIN => 'CONTAIN',
        self::DEFER_BATCH => 'DEFER_BATCH',
        self::NO_HOLD => 'NO_HOLD',
        self::FORCE_REQUEUE_ON_FAIL => 'FORCE_REQUEUE_ON_FAIL',
        self::RUN_IN_JOB => 'RUN_IN_JOB',
        self::SERIAL => 'SERIAL',
        self::X11 => 'X11',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}


