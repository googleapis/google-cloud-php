<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/cloud/hypercomputecluster/v1alpha/machine_learning_runs.proto

namespace Google\Cloud\HypercomputeCluster\V1alpha;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Workload details associated for the Machine Learning Run.
 * Workload have different metadata based on the orchestrator like
 * GKE cluster, Slurm cluster, Google Compute Engine instance etc.
 *
 * Generated from protobuf message <code>google.cloud.hypercomputecluster.v1alpha.WorkloadDetails</code>
 */
class WorkloadDetails extends \Google\Protobuf\Internal\Message
{
    protected $metadata;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type \Google\Cloud\HypercomputeCluster\V1alpha\GKEWorkloadDetails $gke
     *           GKE Workload metadata.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Google\Cloud\Hypercomputecluster\V1Alpha\MachineLearningRuns::initOnce();
        parent::__construct($data);
    }

    /**
     * GKE Workload metadata.
     *
     * Generated from protobuf field <code>.google.cloud.hypercomputecluster.v1alpha.GKEWorkloadDetails gke = 1;</code>
     * @return \Google\Cloud\HypercomputeCluster\V1alpha\GKEWorkloadDetails|null
     */
    public function getGke()
    {
        return $this->readOneof(1);
    }

    public function hasGke()
    {
        return $this->hasOneof(1);
    }

    /**
     * GKE Workload metadata.
     *
     * Generated from protobuf field <code>.google.cloud.hypercomputecluster.v1alpha.GKEWorkloadDetails gke = 1;</code>
     * @param \Google\Cloud\HypercomputeCluster\V1alpha\GKEWorkloadDetails $var
     * @return $this
     */
    public function setGke($var)
    {
        GPBUtil::checkMessage($var, \Google\Cloud\HypercomputeCluster\V1alpha\GKEWorkloadDetails::class);
        $this->writeOneof(1, $var);

        return $this;
    }

    /**
     * @return string
     */
    public function getMetadata()
    {
        return $this->whichOneof("metadata");
    }

}

