<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/cloud/hypercomputecluster/v1alpha/hypercompute_cluster.proto

namespace Google\Cloud\HypercomputeCluster\V1alpha\NewReservedInstancesConfig;

use UnexpectedValueException;

/**
 * @deprecated
 * Deprecated: Do not use.
 *
 * Protobuf type <code>google.cloud.hypercomputecluster.v1alpha.NewReservedInstancesConfig.ReservationType</code>
 */
class ReservationType
{
    /**
     * Deprecated: Do not use.
     *
     * Generated from protobuf enum <code>RESERVATION_TYPE_UNSPECIFIED = 0 [deprecated = true];</code>
     */
    const RESERVATION_TYPE_UNSPECIFIED = 0;
    /**
     * Deprecated: Do not use.
     *
     * Generated from protobuf enum <code>NO_RESERVATION = 1 [deprecated = true];</code>
     */
    const NO_RESERVATION = 1;
    /**
     * Deprecated: Do not use.
     *
     * Generated from protobuf enum <code>ANY_RESERVATION = 2 [deprecated = true];</code>
     */
    const ANY_RESERVATION = 2;
    /**
     * Deprecated: Do not use.
     *
     * Generated from protobuf enum <code>SPECIFIC_RESERVATION = 3 [deprecated = true];</code>
     */
    const SPECIFIC_RESERVATION = 3;

    private static $valueToName = [
        self::RESERVATION_TYPE_UNSPECIFIED => 'RESERVATION_TYPE_UNSPECIFIED',
        self::NO_RESERVATION => 'NO_RESERVATION',
        self::ANY_RESERVATION => 'ANY_RESERVATION',
        self::SPECIFIC_RESERVATION => 'SPECIFIC_RESERVATION',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}


