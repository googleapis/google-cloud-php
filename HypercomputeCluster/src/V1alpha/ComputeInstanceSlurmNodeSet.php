<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/cloud/hypercomputecluster/v1alpha/hypercompute_cluster.proto

namespace Google\Cloud\HypercomputeCluster\V1alpha;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * When set in a
 * [SlurmNodeSet][google.cloud.hypercomputecluster.v1alpha.SlurmNodeSet],
 * indicates that the nodeset should be backed by Compute Engine VM instances.
 *
 * Generated from protobuf message <code>google.cloud.hypercomputecluster.v1alpha.ComputeInstanceSlurmNodeSet</code>
 */
class ComputeInstanceSlurmNodeSet extends \Google\Protobuf\Internal\Message
{
    /**
     * Optional. [Startup
     * script](https://cloud.google.com/compute/docs/instances/startup-scripts/linux)
     * to be run on each VM instance in the nodeset. Max 256KB.
     *
     * Generated from protobuf field <code>string startup_script = 1 [(.google.api.field_behavior) = OPTIONAL];</code>
     */
    protected $startup_script = '';
    /**
     * Optional.
     * [Labels](https://cloud.google.com/compute/docs/labeling-resources) that
     * should be applied to each VM instance in the nodeset.
     *
     * Generated from protobuf field <code>map<string, string> labels = 2 [(.google.api.field_behavior) = OPTIONAL];</code>
     */
    private $labels;
    /**
     * Optional. Boot disk for the compute instance
     *
     * Generated from protobuf field <code>.google.cloud.hypercomputecluster.v1alpha.BootDisk boot_disk = 3 [(.google.api.field_behavior) = OPTIONAL];</code>
     */
    protected $boot_disk = null;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $startup_script
     *           Optional. [Startup
     *           script](https://cloud.google.com/compute/docs/instances/startup-scripts/linux)
     *           to be run on each VM instance in the nodeset. Max 256KB.
     *     @type array|\Google\Protobuf\Internal\MapField $labels
     *           Optional.
     *           [Labels](https://cloud.google.com/compute/docs/labeling-resources) that
     *           should be applied to each VM instance in the nodeset.
     *     @type \Google\Cloud\HypercomputeCluster\V1alpha\BootDisk $boot_disk
     *           Optional. Boot disk for the compute instance
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Google\Cloud\Hypercomputecluster\V1Alpha\HypercomputeCluster::initOnce();
        parent::__construct($data);
    }

    /**
     * Optional. [Startup
     * script](https://cloud.google.com/compute/docs/instances/startup-scripts/linux)
     * to be run on each VM instance in the nodeset. Max 256KB.
     *
     * Generated from protobuf field <code>string startup_script = 1 [(.google.api.field_behavior) = OPTIONAL];</code>
     * @return string
     */
    public function getStartupScript()
    {
        return $this->startup_script;
    }

    /**
     * Optional. [Startup
     * script](https://cloud.google.com/compute/docs/instances/startup-scripts/linux)
     * to be run on each VM instance in the nodeset. Max 256KB.
     *
     * Generated from protobuf field <code>string startup_script = 1 [(.google.api.field_behavior) = OPTIONAL];</code>
     * @param string $var
     * @return $this
     */
    public function setStartupScript($var)
    {
        GPBUtil::checkString($var, True);
        $this->startup_script = $var;

        return $this;
    }

    /**
     * Optional.
     * [Labels](https://cloud.google.com/compute/docs/labeling-resources) that
     * should be applied to each VM instance in the nodeset.
     *
     * Generated from protobuf field <code>map<string, string> labels = 2 [(.google.api.field_behavior) = OPTIONAL];</code>
     * @return \Google\Protobuf\Internal\MapField
     */
    public function getLabels()
    {
        return $this->labels;
    }

    /**
     * Optional.
     * [Labels](https://cloud.google.com/compute/docs/labeling-resources) that
     * should be applied to each VM instance in the nodeset.
     *
     * Generated from protobuf field <code>map<string, string> labels = 2 [(.google.api.field_behavior) = OPTIONAL];</code>
     * @param array|\Google\Protobuf\Internal\MapField $var
     * @return $this
     */
    public function setLabels($var)
    {
        $arr = GPBUtil::checkMapField($var, \Google\Protobuf\Internal\GPBType::STRING, \Google\Protobuf\Internal\GPBType::STRING);
        $this->labels = $arr;

        return $this;
    }

    /**
     * Optional. Boot disk for the compute instance
     *
     * Generated from protobuf field <code>.google.cloud.hypercomputecluster.v1alpha.BootDisk boot_disk = 3 [(.google.api.field_behavior) = OPTIONAL];</code>
     * @return \Google\Cloud\HypercomputeCluster\V1alpha\BootDisk|null
     */
    public function getBootDisk()
    {
        return $this->boot_disk;
    }

    public function hasBootDisk()
    {
        return isset($this->boot_disk);
    }

    public function clearBootDisk()
    {
        unset($this->boot_disk);
    }

    /**
     * Optional. Boot disk for the compute instance
     *
     * Generated from protobuf field <code>.google.cloud.hypercomputecluster.v1alpha.BootDisk boot_disk = 3 [(.google.api.field_behavior) = OPTIONAL];</code>
     * @param \Google\Cloud\HypercomputeCluster\V1alpha\BootDisk $var
     * @return $this
     */
    public function setBootDisk($var)
    {
        GPBUtil::checkMessage($var, \Google\Cloud\HypercomputeCluster\V1alpha\BootDisk::class);
        $this->boot_disk = $var;

        return $this;
    }

}

