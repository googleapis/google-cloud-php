<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/cloud/retail/v2/search_service.proto

namespace Google\Cloud\Retail\V2\SearchRequest\BoostSpec;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Boost applies to products which match a condition.
 *
 * Generated from protobuf message <code>google.cloud.retail.v2.SearchRequest.BoostSpec.ConditionBoostSpec</code>
 */
class ConditionBoostSpec extends \Google\Protobuf\Internal\Message
{
    /**
     * An expression which specifies a boost condition. The syntax and
     * supported fields are the same as a filter expression. See
     * [SearchRequest.filter][google.cloud.retail.v2.SearchRequest.filter] for
     * detail syntax and limitations.
     * Examples:
     * * To boost products with product ID "product_1" or "product_2", and
     * color
     *   "Red" or "Blue":
     *     * (id: ANY("product_1", "product_2")) AND (colorFamilies:
     *     ANY("Red","Blue"))
     *
     * Generated from protobuf field <code>string condition = 1;</code>
     */
    private $condition = '';
    /**
     * Strength of the condition boost, which should be in [-1, 1]. Negative
     * boost means demotion. Default is 0.0.
     * Setting to 1.0 gives the item a big promotion. However, it does not
     * necessarily mean that the boosted item will be the top result at all
     * times, nor that other items will be excluded. Results could still be
     * shown even when none of them matches the condition. And results that
     * are significantly more relevant to the search query can still trump
     * your heavily favored but irrelevant items.
     * Setting to -1.0 gives the item a big demotion. However, results that
     * are deeply relevant might still be shown. The item will have an
     * upstream battle to get a fairly high ranking, but it is not blocked out
     * completely.
     * Setting to 0.0 means no boost applied. The boosting condition is
     * ignored.
     *
     * Generated from protobuf field <code>float boost = 2;</code>
     */
    private $boost = 0.0;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $condition
     *           An expression which specifies a boost condition. The syntax and
     *           supported fields are the same as a filter expression. See
     *           [SearchRequest.filter][google.cloud.retail.v2.SearchRequest.filter] for
     *           detail syntax and limitations.
     *           Examples:
     *           * To boost products with product ID "product_1" or "product_2", and
     *           color
     *             "Red" or "Blue":
     *               * (id: ANY("product_1", "product_2")) AND (colorFamilies:
     *               ANY("Red","Blue"))
     *     @type float $boost
     *           Strength of the condition boost, which should be in [-1, 1]. Negative
     *           boost means demotion. Default is 0.0.
     *           Setting to 1.0 gives the item a big promotion. However, it does not
     *           necessarily mean that the boosted item will be the top result at all
     *           times, nor that other items will be excluded. Results could still be
     *           shown even when none of them matches the condition. And results that
     *           are significantly more relevant to the search query can still trump
     *           your heavily favored but irrelevant items.
     *           Setting to -1.0 gives the item a big demotion. However, results that
     *           are deeply relevant might still be shown. The item will have an
     *           upstream battle to get a fairly high ranking, but it is not blocked out
     *           completely.
     *           Setting to 0.0 means no boost applied. The boosting condition is
     *           ignored.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Google\Cloud\Retail\V2\SearchService::initOnce();
        parent::__construct($data);
    }

    /**
     * An expression which specifies a boost condition. The syntax and
     * supported fields are the same as a filter expression. See
     * [SearchRequest.filter][google.cloud.retail.v2.SearchRequest.filter] for
     * detail syntax and limitations.
     * Examples:
     * * To boost products with product ID "product_1" or "product_2", and
     * color
     *   "Red" or "Blue":
     *     * (id: ANY("product_1", "product_2")) AND (colorFamilies:
     *     ANY("Red","Blue"))
     *
     * Generated from protobuf field <code>string condition = 1;</code>
     * @return string
     */
    public function getCondition()
    {
        return $this->condition;
    }

    /**
     * An expression which specifies a boost condition. The syntax and
     * supported fields are the same as a filter expression. See
     * [SearchRequest.filter][google.cloud.retail.v2.SearchRequest.filter] for
     * detail syntax and limitations.
     * Examples:
     * * To boost products with product ID "product_1" or "product_2", and
     * color
     *   "Red" or "Blue":
     *     * (id: ANY("product_1", "product_2")) AND (colorFamilies:
     *     ANY("Red","Blue"))
     *
     * Generated from protobuf field <code>string condition = 1;</code>
     * @param string $var
     * @return $this
     */
    public function setCondition($var)
    {
        GPBUtil::checkString($var, True);
        $this->condition = $var;

        return $this;
    }

    /**
     * Strength of the condition boost, which should be in [-1, 1]. Negative
     * boost means demotion. Default is 0.0.
     * Setting to 1.0 gives the item a big promotion. However, it does not
     * necessarily mean that the boosted item will be the top result at all
     * times, nor that other items will be excluded. Results could still be
     * shown even when none of them matches the condition. And results that
     * are significantly more relevant to the search query can still trump
     * your heavily favored but irrelevant items.
     * Setting to -1.0 gives the item a big demotion. However, results that
     * are deeply relevant might still be shown. The item will have an
     * upstream battle to get a fairly high ranking, but it is not blocked out
     * completely.
     * Setting to 0.0 means no boost applied. The boosting condition is
     * ignored.
     *
     * Generated from protobuf field <code>float boost = 2;</code>
     * @return float
     */
    public function getBoost()
    {
        return $this->boost;
    }

    /**
     * Strength of the condition boost, which should be in [-1, 1]. Negative
     * boost means demotion. Default is 0.0.
     * Setting to 1.0 gives the item a big promotion. However, it does not
     * necessarily mean that the boosted item will be the top result at all
     * times, nor that other items will be excluded. Results could still be
     * shown even when none of them matches the condition. And results that
     * are significantly more relevant to the search query can still trump
     * your heavily favored but irrelevant items.
     * Setting to -1.0 gives the item a big demotion. However, results that
     * are deeply relevant might still be shown. The item will have an
     * upstream battle to get a fairly high ranking, but it is not blocked out
     * completely.
     * Setting to 0.0 means no boost applied. The boosting condition is
     * ignored.
     *
     * Generated from protobuf field <code>float boost = 2;</code>
     * @param float $var
     * @return $this
     */
    public function setBoost($var)
    {
        GPBUtil::checkFloat($var);
        $this->boost = $var;

        return $this;
    }

}


