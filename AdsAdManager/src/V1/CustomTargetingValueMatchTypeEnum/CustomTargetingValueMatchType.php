<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/ads/admanager/v1/custom_targeting_value_enums.proto

namespace Google\Ads\AdManager\V1\CustomTargetingValueMatchTypeEnum;

use UnexpectedValueException;

/**
 * Match type of the custom targeting value.
 *
 * Protobuf type <code>google.ads.admanager.v1.CustomTargetingValueMatchTypeEnum.CustomTargetingValueMatchType</code>
 */
class CustomTargetingValueMatchType
{
    /**
     * Not specified value.
     *
     * Generated from protobuf enum <code>CUSTOM_TARGETING_VALUE_MATCH_TYPE_UNSPECIFIED = 0;</code>
     */
    const CUSTOM_TARGETING_VALUE_MATCH_TYPE_UNSPECIFIED = 0;
    /**
     * Used for exact matching. For example, the targeting value car=honda will
     * only match to the ad request car=honda.
     *
     * Generated from protobuf enum <code>EXACT = 1;</code>
     */
    const EXACT = 1;
    /**
     * Used for lenient matching when at least one of the words in the ad
     * request matches the targeted value. The targeting value car=honda will
     * match to ad requests containing the word honda. So ad requests car=honda
     * or car=honda civic or car=buy honda or car=how much does a honda cost
     * will all have the line item delivered.
     * This match type can not be used within an audience segment rule.
     *
     * Generated from protobuf enum <code>BROAD = 2;</code>
     */
    const BROAD = 2;
    /**
     * Used for 'starts with' matching when the first few characters in the ad
     * request match all of the characters in the targeted value. The targeting
     * value car=honda will match to ad requests car=honda or car=hondas for
     * sale but not to car=I want a honda.
     *
     * Generated from protobuf enum <code>PREFIX = 3;</code>
     */
    const PREFIX = 3;
    /**
     * This is a combination of MatchType#BROAD and MatchType#PREFIX matching.
     * The targeting value car=honda will match to ad requests that contain
     * words that start with the characters in the targeted value, for example
     * with car=civic hondas.
     * This match type can not be used within an audience segment rule.
     *
     * Generated from protobuf enum <code>BROAD_PREFIX = 4;</code>
     */
    const BROAD_PREFIX = 4;
    /**
     * Used for 'ends with' matching when the last characters in the ad request
     * match all of the characters in the targeted value. The targeting value
     * car=honda will match with ad requests car=honda or car=I want a honda but
     * not to car=hondas for sale.
     * This match type can not be used within line item targeting.
     *
     * Generated from protobuf enum <code>SUFFIX = 5;</code>
     */
    const SUFFIX = 5;
    /**
     * Used for 'within' matching when the string in the ad request contains the
     * string in the targeted value. The targeting value car=honda will match
     * with ad requests car=honda, car=I want a honda, and also with car=hondas
     * for sale, but not with car=misspelled hond a. This match type can not be
     * used within line item targeting.
     *
     * Generated from protobuf enum <code>CONTAINS = 6;</code>
     */
    const CONTAINS = 6;

    private static $valueToName = [
        self::CUSTOM_TARGETING_VALUE_MATCH_TYPE_UNSPECIFIED => 'CUSTOM_TARGETING_VALUE_MATCH_TYPE_UNSPECIFIED',
        self::EXACT => 'EXACT',
        self::BROAD => 'BROAD',
        self::PREFIX => 'PREFIX',
        self::BROAD_PREFIX => 'BROAD_PREFIX',
        self::SUFFIX => 'SUFFIX',
        self::CONTAINS => 'CONTAINS',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}


