<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/ads/admanager/v1/creative_template_enums.proto

namespace Google\Ads\AdManager\V1\CreativeTemplateStatusEnum;

use UnexpectedValueException;

/**
 * Describes status of the creative template
 *
 * Protobuf type <code>google.ads.admanager.v1.CreativeTemplateStatusEnum.CreativeTemplateStatus</code>
 */
class CreativeTemplateStatus
{
    /**
     * Default value. This value is unused.
     *
     * Generated from protobuf enum <code>CREATIVE_TEMPLATE_STATUS_UNSPECIFIED = 0;</code>
     */
    const CREATIVE_TEMPLATE_STATUS_UNSPECIFIED = 0;
    /**
     * The CreativeTemplate is active
     *
     * Generated from protobuf enum <code>ACTIVE = 1;</code>
     */
    const ACTIVE = 1;
    /**
     * The CreativeTemplate is deleted. Creatives created from this
     * CreativeTemplate can no longer serve.
     *
     * Generated from protobuf enum <code>DELETED = 2;</code>
     */
    const DELETED = 2;
    /**
     * The CreativeTemplate is inactive. Users cannot create new creatives
     * from this template, but existing ones can be edited and continue to serve
     *
     * Generated from protobuf enum <code>INACTIVE = 3;</code>
     */
    const INACTIVE = 3;

    private static $valueToName = [
        self::CREATIVE_TEMPLATE_STATUS_UNSPECIFIED => 'CREATIVE_TEMPLATE_STATUS_UNSPECIFIED',
        self::ACTIVE => 'ACTIVE',
        self::DELETED => 'DELETED',
        self::INACTIVE => 'INACTIVE',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}


