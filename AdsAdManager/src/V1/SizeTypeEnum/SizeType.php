<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/ads/admanager/v1/size_type_enum.proto

namespace Google\Ads\AdManager\V1\SizeTypeEnum;

use UnexpectedValueException;

/**
 * The different Size types for an ad.
 *
 * Protobuf type <code>google.ads.admanager.v1.SizeTypeEnum.SizeType</code>
 */
class SizeType
{
    /**
     * Default value. This value is unused.
     *
     * Generated from protobuf enum <code>SIZE_TYPE_UNSPECIFIED = 0;</code>
     */
    const SIZE_TYPE_UNSPECIFIED = 0;
    /**
     * Dimension based size, an actual height and width in pixels.
     *
     * Generated from protobuf enum <code>PIXEL = 1;</code>
     */
    const PIXEL = 1;
    /**
     * Size is expressed as a ratio. For example, 4:1 could be
     * met by a 100 x 25 sized image.
     *
     * Generated from protobuf enum <code>ASPECT_RATIO = 2;</code>
     */
    const ASPECT_RATIO = 2;
    /**
     * Out-of-page (Interstitial) size that is not related to the slot it is
     * served. This must be used with 1x1 size.
     *
     * Generated from protobuf enum <code>INTERSTITIAL = 3;</code>
     */
    const INTERSTITIAL = 3;
    /**
     * Size is ignored. This must be used with 1x1
     * size.
     *
     * Generated from protobuf enum <code>IGNORED = 4;</code>
     */
    const IGNORED = 4;
    /**
     * Native size, which is a function of the how the client renders the
     * creative. This must be used with 1x1 size.
     *
     * Generated from protobuf enum <code>NATIVE = 5;</code>
     */
    const NATIVE = 5;
    /**
     * Fluid size. Automatically sizes the ad by filling the width of the
     * enclosing column and adjusting the height as appropriate. This must be
     * used with 1x1 size.
     *
     * Generated from protobuf enum <code>FLUID = 6;</code>
     */
    const FLUID = 6;
    /**
     * Audio size. Used with audio ads. This must be used with 1x1 size.
     *
     * Generated from protobuf enum <code>AUDIO = 7;</code>
     */
    const AUDIO = 7;

    private static $valueToName = [
        self::SIZE_TYPE_UNSPECIFIED => 'SIZE_TYPE_UNSPECIFIED',
        self::PIXEL => 'PIXEL',
        self::ASPECT_RATIO => 'ASPECT_RATIO',
        self::INTERSTITIAL => 'INTERSTITIAL',
        self::IGNORED => 'IGNORED',
        self::NATIVE => 'NATIVE',
        self::FLUID => 'FLUID',
        self::AUDIO => 'AUDIO',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}


