<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/ads/admanager/v1/video_position_enum.proto

namespace Google\Ads\AdManager\V1\VideoPositionEnum;

use UnexpectedValueException;

/**
 * Represents a targetable position within a video.
 *
 * Protobuf type <code>google.ads.admanager.v1.VideoPositionEnum.VideoPosition</code>
 */
class VideoPosition
{
    /**
     * Default value. This value is unused.
     *
     * Generated from protobuf enum <code>VIDEO_POSITION_UNSPECIFIED = 0;</code>
     */
    const VIDEO_POSITION_UNSPECIFIED = 0;
    /**
     * Allow ad placement at any position within the video.
     *
     * Generated from protobuf enum <code>ALL = 1;</code>
     */
    const ALL = 1;
    /**
     * Target ad placement during the video.
     *
     * Generated from protobuf enum <code>MIDROLL = 2;</code>
     */
    const MIDROLL = 2;
    /**
     * Target ad placement after the video ends.
     *
     * Generated from protobuf enum <code>POSTROLL = 3;</code>
     */
    const POSTROLL = 3;
    /**
     * Target ad placement before the video starts.
     *
     * Generated from protobuf enum <code>PREROLL = 4;</code>
     */
    const PREROLL = 4;

    private static $valueToName = [
        self::VIDEO_POSITION_UNSPECIFIED => 'VIDEO_POSITION_UNSPECIFIED',
        self::ALL => 'ALL',
        self::MIDROLL => 'MIDROLL',
        self::POSTROLL => 'POSTROLL',
        self::PREROLL => 'PREROLL',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}


