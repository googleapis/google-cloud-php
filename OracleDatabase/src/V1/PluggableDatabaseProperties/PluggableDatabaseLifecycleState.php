<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/cloud/oracledatabase/v1/pluggable_database.proto

namespace Google\Cloud\OracleDatabase\V1\PluggableDatabaseProperties;

use UnexpectedValueException;

/**
 * The various lifecycle states of the PluggableDatabase.
 *
 * Protobuf type <code>google.cloud.oracledatabase.v1.PluggableDatabaseProperties.PluggableDatabaseLifecycleState</code>
 */
class PluggableDatabaseLifecycleState
{
    /**
     * The lifecycle state is unspecified.
     *
     * Generated from protobuf enum <code>PLUGGABLE_DATABASE_LIFECYCLE_STATE_UNSPECIFIED = 0;</code>
     */
    const PLUGGABLE_DATABASE_LIFECYCLE_STATE_UNSPECIFIED = 0;
    /**
     * The pluggable database is provisioning.
     *
     * Generated from protobuf enum <code>PROVISIONING = 1;</code>
     */
    const PROVISIONING = 1;
    /**
     * The pluggable database is available.
     *
     * Generated from protobuf enum <code>AVAILABLE = 2;</code>
     */
    const AVAILABLE = 2;
    /**
     * The pluggable database is terminating.
     *
     * Generated from protobuf enum <code>TERMINATING = 3;</code>
     */
    const TERMINATING = 3;
    /**
     * The pluggable database is terminated.
     *
     * Generated from protobuf enum <code>TERMINATED = 4;</code>
     */
    const TERMINATED = 4;
    /**
     * The pluggable database is updating.
     *
     * Generated from protobuf enum <code>UPDATING = 5;</code>
     */
    const UPDATING = 5;
    /**
     * The pluggable database is in a failed state.
     *
     * Generated from protobuf enum <code>FAILED = 6;</code>
     */
    const FAILED = 6;
    /**
     * The pluggable database is relocating.
     *
     * Generated from protobuf enum <code>RELOCATING = 7;</code>
     */
    const RELOCATING = 7;
    /**
     * The pluggable database is relocated.
     *
     * Generated from protobuf enum <code>RELOCATED = 8;</code>
     */
    const RELOCATED = 8;
    /**
     * The pluggable database is refreshing.
     *
     * Generated from protobuf enum <code>REFRESHING = 9;</code>
     */
    const REFRESHING = 9;
    /**
     * The pluggable database is restoring.
     *
     * Generated from protobuf enum <code>RESTORE_IN_PROGRESS = 10;</code>
     */
    const RESTORE_IN_PROGRESS = 10;
    /**
     * The pluggable database restore failed.
     *
     * Generated from protobuf enum <code>RESTORE_FAILED = 11;</code>
     */
    const RESTORE_FAILED = 11;
    /**
     * The pluggable database is backing up.
     *
     * Generated from protobuf enum <code>BACKUP_IN_PROGRESS = 12;</code>
     */
    const BACKUP_IN_PROGRESS = 12;
    /**
     * The pluggable database is disabled.
     *
     * Generated from protobuf enum <code>DISABLED = 13;</code>
     */
    const DISABLED = 13;

    private static $valueToName = [
        self::PLUGGABLE_DATABASE_LIFECYCLE_STATE_UNSPECIFIED => 'PLUGGABLE_DATABASE_LIFECYCLE_STATE_UNSPECIFIED',
        self::PROVISIONING => 'PROVISIONING',
        self::AVAILABLE => 'AVAILABLE',
        self::TERMINATING => 'TERMINATING',
        self::TERMINATED => 'TERMINATED',
        self::UPDATING => 'UPDATING',
        self::FAILED => 'FAILED',
        self::RELOCATING => 'RELOCATING',
        self::RELOCATED => 'RELOCATED',
        self::REFRESHING => 'REFRESHING',
        self::RESTORE_IN_PROGRESS => 'RESTORE_IN_PROGRESS',
        self::RESTORE_FAILED => 'RESTORE_FAILED',
        self::BACKUP_IN_PROGRESS => 'BACKUP_IN_PROGRESS',
        self::DISABLED => 'DISABLED',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}


