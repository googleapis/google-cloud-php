<?php
/*
 * Copyright 2024 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * GENERATED CODE WARNING
 * Generated by gapic-generator-php from the file
 * https://github.com/googleapis/googleapis/blob/master/google/cloud/oracledatabase/v1/oracledatabase.proto
 * Updates to the above are reflected here through a refresh process.
 */

namespace Google\Cloud\OracleDatabase\V1\Client;

use Google\ApiCore\ApiException;
use Google\ApiCore\CredentialsWrapper;
use Google\ApiCore\GapicClientTrait;
use Google\ApiCore\OperationResponse;
use Google\ApiCore\PagedListResponse;
use Google\ApiCore\ResourceHelperTrait;
use Google\ApiCore\RetrySettings;
use Google\ApiCore\Transport\TransportInterface;
use Google\ApiCore\ValidationException;
use Google\Auth\FetchAuthTokenInterface;
use Google\Cloud\Location\GetLocationRequest;
use Google\Cloud\Location\ListLocationsRequest;
use Google\Cloud\Location\Location;
use Google\Cloud\OracleDatabase\V1\AutonomousDatabase;
use Google\Cloud\OracleDatabase\V1\CloudExadataInfrastructure;
use Google\Cloud\OracleDatabase\V1\CloudVmCluster;
use Google\Cloud\OracleDatabase\V1\CreateAutonomousDatabaseRequest;
use Google\Cloud\OracleDatabase\V1\CreateCloudExadataInfrastructureRequest;
use Google\Cloud\OracleDatabase\V1\CreateCloudVmClusterRequest;
use Google\Cloud\OracleDatabase\V1\DeleteAutonomousDatabaseRequest;
use Google\Cloud\OracleDatabase\V1\DeleteCloudExadataInfrastructureRequest;
use Google\Cloud\OracleDatabase\V1\DeleteCloudVmClusterRequest;
use Google\Cloud\OracleDatabase\V1\GenerateAutonomousDatabaseWalletRequest;
use Google\Cloud\OracleDatabase\V1\GenerateAutonomousDatabaseWalletResponse;
use Google\Cloud\OracleDatabase\V1\GetAutonomousDatabaseRequest;
use Google\Cloud\OracleDatabase\V1\GetCloudExadataInfrastructureRequest;
use Google\Cloud\OracleDatabase\V1\GetCloudVmClusterRequest;
use Google\Cloud\OracleDatabase\V1\ListAutonomousDatabaseBackupsRequest;
use Google\Cloud\OracleDatabase\V1\ListAutonomousDatabaseCharacterSetsRequest;
use Google\Cloud\OracleDatabase\V1\ListAutonomousDatabasesRequest;
use Google\Cloud\OracleDatabase\V1\ListAutonomousDbVersionsRequest;
use Google\Cloud\OracleDatabase\V1\ListCloudExadataInfrastructuresRequest;
use Google\Cloud\OracleDatabase\V1\ListCloudVmClustersRequest;
use Google\Cloud\OracleDatabase\V1\ListDbNodesRequest;
use Google\Cloud\OracleDatabase\V1\ListDbServersRequest;
use Google\Cloud\OracleDatabase\V1\ListDbSystemShapesRequest;
use Google\Cloud\OracleDatabase\V1\ListEntitlementsRequest;
use Google\Cloud\OracleDatabase\V1\ListGiVersionsRequest;
use Google\Cloud\OracleDatabase\V1\RestoreAutonomousDatabaseRequest;
use Google\LongRunning\Client\OperationsClient;
use Google\LongRunning\Operation;
use GuzzleHttp\Promise\PromiseInterface;

/**
 * Service Description: Service describing handlers for resources
 *
 * This class provides the ability to make remote calls to the backing service through method
 * calls that map to API methods.
 *
 * Many parameters require resource names to be formatted in a particular way. To
 * assist with these names, this class includes a format method for each type of
 * name, and additionally a parseName method to extract the individual identifiers
 * contained within formatted names that are returned by the API.
 *
 * @method PromiseInterface<OperationResponse> createAutonomousDatabaseAsync(CreateAutonomousDatabaseRequest $request, array $optionalArgs = [])
 * @method PromiseInterface<OperationResponse> createCloudExadataInfrastructureAsync(CreateCloudExadataInfrastructureRequest $request, array $optionalArgs = [])
 * @method PromiseInterface<OperationResponse> createCloudVmClusterAsync(CreateCloudVmClusterRequest $request, array $optionalArgs = [])
 * @method PromiseInterface<OperationResponse> deleteAutonomousDatabaseAsync(DeleteAutonomousDatabaseRequest $request, array $optionalArgs = [])
 * @method PromiseInterface<OperationResponse> deleteCloudExadataInfrastructureAsync(DeleteCloudExadataInfrastructureRequest $request, array $optionalArgs = [])
 * @method PromiseInterface<OperationResponse> deleteCloudVmClusterAsync(DeleteCloudVmClusterRequest $request, array $optionalArgs = [])
 * @method PromiseInterface<GenerateAutonomousDatabaseWalletResponse> generateAutonomousDatabaseWalletAsync(GenerateAutonomousDatabaseWalletRequest $request, array $optionalArgs = [])
 * @method PromiseInterface<AutonomousDatabase> getAutonomousDatabaseAsync(GetAutonomousDatabaseRequest $request, array $optionalArgs = [])
 * @method PromiseInterface<CloudExadataInfrastructure> getCloudExadataInfrastructureAsync(GetCloudExadataInfrastructureRequest $request, array $optionalArgs = [])
 * @method PromiseInterface<CloudVmCluster> getCloudVmClusterAsync(GetCloudVmClusterRequest $request, array $optionalArgs = [])
 * @method PromiseInterface<PagedListResponse> listAutonomousDatabaseBackupsAsync(ListAutonomousDatabaseBackupsRequest $request, array $optionalArgs = [])
 * @method PromiseInterface<PagedListResponse> listAutonomousDatabaseCharacterSetsAsync(ListAutonomousDatabaseCharacterSetsRequest $request, array $optionalArgs = [])
 * @method PromiseInterface<PagedListResponse> listAutonomousDatabasesAsync(ListAutonomousDatabasesRequest $request, array $optionalArgs = [])
 * @method PromiseInterface<PagedListResponse> listAutonomousDbVersionsAsync(ListAutonomousDbVersionsRequest $request, array $optionalArgs = [])
 * @method PromiseInterface<PagedListResponse> listCloudExadataInfrastructuresAsync(ListCloudExadataInfrastructuresRequest $request, array $optionalArgs = [])
 * @method PromiseInterface<PagedListResponse> listCloudVmClustersAsync(ListCloudVmClustersRequest $request, array $optionalArgs = [])
 * @method PromiseInterface<PagedListResponse> listDbNodesAsync(ListDbNodesRequest $request, array $optionalArgs = [])
 * @method PromiseInterface<PagedListResponse> listDbServersAsync(ListDbServersRequest $request, array $optionalArgs = [])
 * @method PromiseInterface<PagedListResponse> listDbSystemShapesAsync(ListDbSystemShapesRequest $request, array $optionalArgs = [])
 * @method PromiseInterface<PagedListResponse> listEntitlementsAsync(ListEntitlementsRequest $request, array $optionalArgs = [])
 * @method PromiseInterface<PagedListResponse> listGiVersionsAsync(ListGiVersionsRequest $request, array $optionalArgs = [])
 * @method PromiseInterface<OperationResponse> restoreAutonomousDatabaseAsync(RestoreAutonomousDatabaseRequest $request, array $optionalArgs = [])
 * @method PromiseInterface<Location> getLocationAsync(GetLocationRequest $request, array $optionalArgs = [])
 * @method PromiseInterface<PagedListResponse> listLocationsAsync(ListLocationsRequest $request, array $optionalArgs = [])
 */
final class OracleDatabaseClient
{
    use GapicClientTrait;
    use ResourceHelperTrait;

    /** The name of the service. */
    private const SERVICE_NAME = 'google.cloud.oracledatabase.v1.OracleDatabase';

    /**
     * The default address of the service.
     *
     * @deprecated SERVICE_ADDRESS_TEMPLATE should be used instead.
     */
    private const SERVICE_ADDRESS = 'oracledatabase.googleapis.com';

    /** The address template of the service. */
    private const SERVICE_ADDRESS_TEMPLATE = 'oracledatabase.UNIVERSE_DOMAIN';

    /** The default port of the service. */
    private const DEFAULT_SERVICE_PORT = 443;

    /** The name of the code generator, to be included in the agent header. */
    private const CODEGEN_NAME = 'gapic';

    /** The default scopes required by the service. */
    public static $serviceScopes = ['https://www.googleapis.com/auth/cloud-platform'];

    private $operationsClient;

    private static function getClientDefaults()
    {
        return [
            'serviceName' => self::SERVICE_NAME,
            'apiEndpoint' => self::SERVICE_ADDRESS . ':' . self::DEFAULT_SERVICE_PORT,
            'clientConfig' => __DIR__ . '/../resources/oracle_database_client_config.json',
            'descriptorsConfigPath' => __DIR__ . '/../resources/oracle_database_descriptor_config.php',
            'credentialsConfig' => [
                'defaultScopes' => self::$serviceScopes,
                'useJwtAccessWithScope' => false,
            ],
            'transportConfig' => [
                'rest' => [
                    'restClientConfigPath' => __DIR__ . '/../resources/oracle_database_rest_client_config.php',
                ],
            ],
        ];
    }

    /** Implements GapicClientTrait::defaultTransport. */
    private static function defaultTransport()
    {
        return 'rest';
    }

    /** Implements ClientOptionsTrait::supportedTransports. */
    private static function supportedTransports()
    {
        return ['rest'];
    }

    /**
     * Return an OperationsClient object with the same endpoint as $this.
     *
     * @return OperationsClient
     */
    public function getOperationsClient()
    {
        return $this->operationsClient;
    }

    /**
     * Resume an existing long running operation that was previously started by a long
     * running API method. If $methodName is not provided, or does not match a long
     * running API method, then the operation can still be resumed, but the
     * OperationResponse object will not deserialize the final response.
     *
     * @param string $operationName The name of the long running operation
     * @param string $methodName    The name of the method used to start the operation
     *
     * @return OperationResponse
     */
    public function resumeOperation($operationName, $methodName = null)
    {
        $options = isset($this->descriptors[$methodName]['longRunning'])
            ? $this->descriptors[$methodName]['longRunning']
            : [];
        $operation = new OperationResponse($operationName, $this->getOperationsClient(), $options);
        $operation->reload();
        return $operation;
    }

    /**
     * Create the default operation client for the service.
     *
     * @param array $options ClientOptions for the client.
     *
     * @return OperationsClient
     */
    private function createOperationsClient(array $options)
    {
        // Unset client-specific configuration options
        unset($options['serviceName'], $options['clientConfig'], $options['descriptorsConfigPath']);

        if (isset($options['operationsClient'])) {
            return $options['operationsClient'];
        }

        return new OperationsClient($options);
    }

    /**
     * Formats a string containing the fully-qualified path to represent a
     * autonomous_database resource.
     *
     * @param string $project
     * @param string $location
     * @param string $autonomousDatabase
     *
     * @return string The formatted autonomous_database resource.
     */
    public static function autonomousDatabaseName(string $project, string $location, string $autonomousDatabase): string
    {
        return self::getPathTemplate('autonomousDatabase')->render([
            'project' => $project,
            'location' => $location,
            'autonomous_database' => $autonomousDatabase,
        ]);
    }

    /**
     * Formats a string containing the fully-qualified path to represent a
     * cloud_exadata_infrastructure resource.
     *
     * @param string $project
     * @param string $location
     * @param string $cloudExadataInfrastructure
     *
     * @return string The formatted cloud_exadata_infrastructure resource.
     */
    public static function cloudExadataInfrastructureName(
        string $project,
        string $location,
        string $cloudExadataInfrastructure
    ): string {
        return self::getPathTemplate('cloudExadataInfrastructure')->render([
            'project' => $project,
            'location' => $location,
            'cloud_exadata_infrastructure' => $cloudExadataInfrastructure,
        ]);
    }

    /**
     * Formats a string containing the fully-qualified path to represent a
     * cloud_vm_cluster resource.
     *
     * @param string $project
     * @param string $location
     * @param string $cloudVmCluster
     *
     * @return string The formatted cloud_vm_cluster resource.
     */
    public static function cloudVmClusterName(string $project, string $location, string $cloudVmCluster): string
    {
        return self::getPathTemplate('cloudVmCluster')->render([
            'project' => $project,
            'location' => $location,
            'cloud_vm_cluster' => $cloudVmCluster,
        ]);
    }

    /**
     * Formats a string containing the fully-qualified path to represent a location
     * resource.
     *
     * @param string $project
     * @param string $location
     *
     * @return string The formatted location resource.
     */
    public static function locationName(string $project, string $location): string
    {
        return self::getPathTemplate('location')->render([
            'project' => $project,
            'location' => $location,
        ]);
    }

    /**
     * Formats a string containing the fully-qualified path to represent a network
     * resource.
     *
     * @param string $project
     * @param string $network
     *
     * @return string The formatted network resource.
     */
    public static function networkName(string $project, string $network): string
    {
        return self::getPathTemplate('network')->render([
            'project' => $project,
            'network' => $network,
        ]);
    }

    /**
     * Parses a formatted name string and returns an associative array of the components in the name.
     * The following name formats are supported:
     * Template: Pattern
     * - autonomousDatabase: projects/{project}/locations/{location}/autonomousDatabases/{autonomous_database}
     * - cloudExadataInfrastructure: projects/{project}/locations/{location}/cloudExadataInfrastructures/{cloud_exadata_infrastructure}
     * - cloudVmCluster: projects/{project}/locations/{location}/cloudVmClusters/{cloud_vm_cluster}
     * - location: projects/{project}/locations/{location}
     * - network: projects/{project}/global/networks/{network}
     *
     * The optional $template argument can be supplied to specify a particular pattern,
     * and must match one of the templates listed above. If no $template argument is
     * provided, or if the $template argument does not match one of the templates
     * listed, then parseName will check each of the supported templates, and return
     * the first match.
     *
     * @param string $formattedName The formatted name string
     * @param string $template      Optional name of template to match
     *
     * @return array An associative array from name component IDs to component values.
     *
     * @throws ValidationException If $formattedName could not be matched.
     */
    public static function parseName(string $formattedName, string $template = null): array
    {
        return self::parseFormattedName($formattedName, $template);
    }

    /**
     * Constructor.
     *
     * @param array $options {
     *     Optional. Options for configuring the service API wrapper.
     *
     *     @type string $apiEndpoint
     *           The address of the API remote host. May optionally include the port, formatted
     *           as "<uri>:<port>". Default 'oracledatabase.googleapis.com:443'.
     *     @type string|array|FetchAuthTokenInterface|CredentialsWrapper $credentials
     *           The credentials to be used by the client to authorize API calls. This option
     *           accepts either a path to a credentials file, or a decoded credentials file as a
     *           PHP array.
     *           *Advanced usage*: In addition, this option can also accept a pre-constructed
     *           {@see \Google\Auth\FetchAuthTokenInterface} object or
     *           {@see \Google\ApiCore\CredentialsWrapper} object. Note that when one of these
     *           objects are provided, any settings in $credentialsConfig will be ignored.
     *     @type array $credentialsConfig
     *           Options used to configure credentials, including auth token caching, for the
     *           client. For a full list of supporting configuration options, see
     *           {@see \Google\ApiCore\CredentialsWrapper::build()} .
     *     @type bool $disableRetries
     *           Determines whether or not retries defined by the client configuration should be
     *           disabled. Defaults to `false`.
     *     @type string|array $clientConfig
     *           Client method configuration, including retry settings. This option can be either
     *           a path to a JSON file, or a PHP array containing the decoded JSON data. By
     *           default this settings points to the default client config file, which is
     *           provided in the resources folder.
     *     @type string|TransportInterface $transport
     *           The transport used for executing network requests. At the moment, supports only
     *           `rest`. *Advanced usage*: Additionally, it is possible to pass in an already
     *           instantiated {@see \Google\ApiCore\Transport\TransportInterface} object. Note
     *           that when this object is provided, any settings in $transportConfig, and any
     *           $apiEndpoint setting, will be ignored.
     *     @type array $transportConfig
     *           Configuration options that will be used to construct the transport. Options for
     *           each supported transport type should be passed in a key for that transport. For
     *           example:
     *           $transportConfig = [
     *               'rest' => [...],
     *           ];
     *           See the {@see \Google\ApiCore\Transport\RestTransport::build()} method for the
     *           supported options.
     *     @type callable $clientCertSource
     *           A callable which returns the client cert as a string. This can be used to
     *           provide a certificate and private key to the transport layer for mTLS.
     * }
     *
     * @throws ValidationException
     */
    public function __construct(array $options = [])
    {
        $clientOptions = $this->buildClientOptions($options);
        $this->setClientOptions($clientOptions);
        $this->operationsClient = $this->createOperationsClient($clientOptions);
    }

    /** Handles execution of the async variants for each documented method. */
    public function __call($method, $args)
    {
        if (substr($method, -5) !== 'Async') {
            trigger_error('Call to undefined method ' . __CLASS__ . "::$method()", E_USER_ERROR);
        }

        array_unshift($args, substr($method, 0, -5));
        return call_user_func_array([$this, 'startAsyncCall'], $args);
    }

    /**
     * Creates a new Autonomous Database in a given project and location.
     *
     * The async variant is
     * {@see OracleDatabaseClient::createAutonomousDatabaseAsync()} .
     *
     * @example samples/V1/OracleDatabaseClient/create_autonomous_database.php
     *
     * @param CreateAutonomousDatabaseRequest $request     A request to house fields associated with the call.
     * @param array                           $callOptions {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return OperationResponse
     *
     * @throws ApiException Thrown if the API call fails.
     */
    public function createAutonomousDatabase(
        CreateAutonomousDatabaseRequest $request,
        array $callOptions = []
    ): OperationResponse {
        return $this->startApiCall('CreateAutonomousDatabase', $request, $callOptions)->wait();
    }

    /**
     * Creates a new Exadata Infrastructure in a given project and location.
     *
     * The async variant is
     * {@see OracleDatabaseClient::createCloudExadataInfrastructureAsync()} .
     *
     * @example samples/V1/OracleDatabaseClient/create_cloud_exadata_infrastructure.php
     *
     * @param CreateCloudExadataInfrastructureRequest $request     A request to house fields associated with the call.
     * @param array                                   $callOptions {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return OperationResponse
     *
     * @throws ApiException Thrown if the API call fails.
     */
    public function createCloudExadataInfrastructure(
        CreateCloudExadataInfrastructureRequest $request,
        array $callOptions = []
    ): OperationResponse {
        return $this->startApiCall('CreateCloudExadataInfrastructure', $request, $callOptions)->wait();
    }

    /**
     * Creates a new VM Cluster in a given project and location.
     *
     * The async variant is {@see OracleDatabaseClient::createCloudVmClusterAsync()} .
     *
     * @example samples/V1/OracleDatabaseClient/create_cloud_vm_cluster.php
     *
     * @param CreateCloudVmClusterRequest $request     A request to house fields associated with the call.
     * @param array                       $callOptions {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return OperationResponse
     *
     * @throws ApiException Thrown if the API call fails.
     */
    public function createCloudVmCluster(
        CreateCloudVmClusterRequest $request,
        array $callOptions = []
    ): OperationResponse {
        return $this->startApiCall('CreateCloudVmCluster', $request, $callOptions)->wait();
    }

    /**
     * Deletes a single Autonomous Database.
     *
     * The async variant is
     * {@see OracleDatabaseClient::deleteAutonomousDatabaseAsync()} .
     *
     * @example samples/V1/OracleDatabaseClient/delete_autonomous_database.php
     *
     * @param DeleteAutonomousDatabaseRequest $request     A request to house fields associated with the call.
     * @param array                           $callOptions {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return OperationResponse
     *
     * @throws ApiException Thrown if the API call fails.
     */
    public function deleteAutonomousDatabase(
        DeleteAutonomousDatabaseRequest $request,
        array $callOptions = []
    ): OperationResponse {
        return $this->startApiCall('DeleteAutonomousDatabase', $request, $callOptions)->wait();
    }

    /**
     * Deletes a single Exadata Infrastructure.
     *
     * The async variant is
     * {@see OracleDatabaseClient::deleteCloudExadataInfrastructureAsync()} .
     *
     * @example samples/V1/OracleDatabaseClient/delete_cloud_exadata_infrastructure.php
     *
     * @param DeleteCloudExadataInfrastructureRequest $request     A request to house fields associated with the call.
     * @param array                                   $callOptions {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return OperationResponse
     *
     * @throws ApiException Thrown if the API call fails.
     */
    public function deleteCloudExadataInfrastructure(
        DeleteCloudExadataInfrastructureRequest $request,
        array $callOptions = []
    ): OperationResponse {
        return $this->startApiCall('DeleteCloudExadataInfrastructure', $request, $callOptions)->wait();
    }

    /**
     * Deletes a single VM Cluster.
     *
     * The async variant is {@see OracleDatabaseClient::deleteCloudVmClusterAsync()} .
     *
     * @example samples/V1/OracleDatabaseClient/delete_cloud_vm_cluster.php
     *
     * @param DeleteCloudVmClusterRequest $request     A request to house fields associated with the call.
     * @param array                       $callOptions {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return OperationResponse
     *
     * @throws ApiException Thrown if the API call fails.
     */
    public function deleteCloudVmCluster(
        DeleteCloudVmClusterRequest $request,
        array $callOptions = []
    ): OperationResponse {
        return $this->startApiCall('DeleteCloudVmCluster', $request, $callOptions)->wait();
    }

    /**
     * Generates a wallet for an Autonomous Database.
     *
     * The async variant is
     * {@see OracleDatabaseClient::generateAutonomousDatabaseWalletAsync()} .
     *
     * @example samples/V1/OracleDatabaseClient/generate_autonomous_database_wallet.php
     *
     * @param GenerateAutonomousDatabaseWalletRequest $request     A request to house fields associated with the call.
     * @param array                                   $callOptions {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return GenerateAutonomousDatabaseWalletResponse
     *
     * @throws ApiException Thrown if the API call fails.
     */
    public function generateAutonomousDatabaseWallet(
        GenerateAutonomousDatabaseWalletRequest $request,
        array $callOptions = []
    ): GenerateAutonomousDatabaseWalletResponse {
        return $this->startApiCall('GenerateAutonomousDatabaseWallet', $request, $callOptions)->wait();
    }

    /**
     * Gets the details of a single Autonomous Database.
     *
     * The async variant is {@see OracleDatabaseClient::getAutonomousDatabaseAsync()} .
     *
     * @example samples/V1/OracleDatabaseClient/get_autonomous_database.php
     *
     * @param GetAutonomousDatabaseRequest $request     A request to house fields associated with the call.
     * @param array                        $callOptions {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return AutonomousDatabase
     *
     * @throws ApiException Thrown if the API call fails.
     */
    public function getAutonomousDatabase(
        GetAutonomousDatabaseRequest $request,
        array $callOptions = []
    ): AutonomousDatabase {
        return $this->startApiCall('GetAutonomousDatabase', $request, $callOptions)->wait();
    }

    /**
     * Gets details of a single Exadata Infrastructure.
     *
     * The async variant is
     * {@see OracleDatabaseClient::getCloudExadataInfrastructureAsync()} .
     *
     * @example samples/V1/OracleDatabaseClient/get_cloud_exadata_infrastructure.php
     *
     * @param GetCloudExadataInfrastructureRequest $request     A request to house fields associated with the call.
     * @param array                                $callOptions {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return CloudExadataInfrastructure
     *
     * @throws ApiException Thrown if the API call fails.
     */
    public function getCloudExadataInfrastructure(
        GetCloudExadataInfrastructureRequest $request,
        array $callOptions = []
    ): CloudExadataInfrastructure {
        return $this->startApiCall('GetCloudExadataInfrastructure', $request, $callOptions)->wait();
    }

    /**
     * Gets details of a single VM Cluster.
     *
     * The async variant is {@see OracleDatabaseClient::getCloudVmClusterAsync()} .
     *
     * @example samples/V1/OracleDatabaseClient/get_cloud_vm_cluster.php
     *
     * @param GetCloudVmClusterRequest $request     A request to house fields associated with the call.
     * @param array                    $callOptions {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return CloudVmCluster
     *
     * @throws ApiException Thrown if the API call fails.
     */
    public function getCloudVmCluster(GetCloudVmClusterRequest $request, array $callOptions = []): CloudVmCluster
    {
        return $this->startApiCall('GetCloudVmCluster', $request, $callOptions)->wait();
    }

    /**
     * Lists the long-term and automatic backups of an Autonomous Database.
     *
     * The async variant is
     * {@see OracleDatabaseClient::listAutonomousDatabaseBackupsAsync()} .
     *
     * @example samples/V1/OracleDatabaseClient/list_autonomous_database_backups.php
     *
     * @param ListAutonomousDatabaseBackupsRequest $request     A request to house fields associated with the call.
     * @param array                                $callOptions {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return PagedListResponse
     *
     * @throws ApiException Thrown if the API call fails.
     */
    public function listAutonomousDatabaseBackups(
        ListAutonomousDatabaseBackupsRequest $request,
        array $callOptions = []
    ): PagedListResponse {
        return $this->startApiCall('ListAutonomousDatabaseBackups', $request, $callOptions);
    }

    /**
     * Lists Autonomous Database Character Sets in a given project and location.
     *
     * The async variant is
     * {@see OracleDatabaseClient::listAutonomousDatabaseCharacterSetsAsync()} .
     *
     * @example samples/V1/OracleDatabaseClient/list_autonomous_database_character_sets.php
     *
     * @param ListAutonomousDatabaseCharacterSetsRequest $request     A request to house fields associated with the call.
     * @param array                                      $callOptions {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return PagedListResponse
     *
     * @throws ApiException Thrown if the API call fails.
     */
    public function listAutonomousDatabaseCharacterSets(
        ListAutonomousDatabaseCharacterSetsRequest $request,
        array $callOptions = []
    ): PagedListResponse {
        return $this->startApiCall('ListAutonomousDatabaseCharacterSets', $request, $callOptions);
    }

    /**
     * Lists the Autonomous Databases in a given project and location.
     *
     * The async variant is {@see OracleDatabaseClient::listAutonomousDatabasesAsync()}
     * .
     *
     * @example samples/V1/OracleDatabaseClient/list_autonomous_databases.php
     *
     * @param ListAutonomousDatabasesRequest $request     A request to house fields associated with the call.
     * @param array                          $callOptions {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return PagedListResponse
     *
     * @throws ApiException Thrown if the API call fails.
     */
    public function listAutonomousDatabases(
        ListAutonomousDatabasesRequest $request,
        array $callOptions = []
    ): PagedListResponse {
        return $this->startApiCall('ListAutonomousDatabases', $request, $callOptions);
    }

    /**
     * Lists all the available Autonomous Database versions for a project and
     * location.
     *
     * The async variant is
     * {@see OracleDatabaseClient::listAutonomousDbVersionsAsync()} .
     *
     * @example samples/V1/OracleDatabaseClient/list_autonomous_db_versions.php
     *
     * @param ListAutonomousDbVersionsRequest $request     A request to house fields associated with the call.
     * @param array                           $callOptions {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return PagedListResponse
     *
     * @throws ApiException Thrown if the API call fails.
     */
    public function listAutonomousDbVersions(
        ListAutonomousDbVersionsRequest $request,
        array $callOptions = []
    ): PagedListResponse {
        return $this->startApiCall('ListAutonomousDbVersions', $request, $callOptions);
    }

    /**
     * Lists Exadata Infrastructures in a given project and location.
     *
     * The async variant is
     * {@see OracleDatabaseClient::listCloudExadataInfrastructuresAsync()} .
     *
     * @example samples/V1/OracleDatabaseClient/list_cloud_exadata_infrastructures.php
     *
     * @param ListCloudExadataInfrastructuresRequest $request     A request to house fields associated with the call.
     * @param array                                  $callOptions {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return PagedListResponse
     *
     * @throws ApiException Thrown if the API call fails.
     */
    public function listCloudExadataInfrastructures(
        ListCloudExadataInfrastructuresRequest $request,
        array $callOptions = []
    ): PagedListResponse {
        return $this->startApiCall('ListCloudExadataInfrastructures', $request, $callOptions);
    }

    /**
     * Lists the VM Clusters in a given project and location.
     *
     * The async variant is {@see OracleDatabaseClient::listCloudVmClustersAsync()} .
     *
     * @example samples/V1/OracleDatabaseClient/list_cloud_vm_clusters.php
     *
     * @param ListCloudVmClustersRequest $request     A request to house fields associated with the call.
     * @param array                      $callOptions {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return PagedListResponse
     *
     * @throws ApiException Thrown if the API call fails.
     */
    public function listCloudVmClusters(ListCloudVmClustersRequest $request, array $callOptions = []): PagedListResponse
    {
        return $this->startApiCall('ListCloudVmClusters', $request, $callOptions);
    }

    /**
     * Lists the database nodes of a VM Cluster.
     *
     * The async variant is {@see OracleDatabaseClient::listDbNodesAsync()} .
     *
     * @example samples/V1/OracleDatabaseClient/list_db_nodes.php
     *
     * @param ListDbNodesRequest $request     A request to house fields associated with the call.
     * @param array              $callOptions {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return PagedListResponse
     *
     * @throws ApiException Thrown if the API call fails.
     */
    public function listDbNodes(ListDbNodesRequest $request, array $callOptions = []): PagedListResponse
    {
        return $this->startApiCall('ListDbNodes', $request, $callOptions);
    }

    /**
     * Lists the database servers of an Exadata Infrastructure instance.
     *
     * The async variant is {@see OracleDatabaseClient::listDbServersAsync()} .
     *
     * @example samples/V1/OracleDatabaseClient/list_db_servers.php
     *
     * @param ListDbServersRequest $request     A request to house fields associated with the call.
     * @param array                $callOptions {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return PagedListResponse
     *
     * @throws ApiException Thrown if the API call fails.
     */
    public function listDbServers(ListDbServersRequest $request, array $callOptions = []): PagedListResponse
    {
        return $this->startApiCall('ListDbServers', $request, $callOptions);
    }

    /**
     * Lists the database system shapes available for the project and location.
     *
     * The async variant is {@see OracleDatabaseClient::listDbSystemShapesAsync()} .
     *
     * @example samples/V1/OracleDatabaseClient/list_db_system_shapes.php
     *
     * @param ListDbSystemShapesRequest $request     A request to house fields associated with the call.
     * @param array                     $callOptions {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return PagedListResponse
     *
     * @throws ApiException Thrown if the API call fails.
     */
    public function listDbSystemShapes(ListDbSystemShapesRequest $request, array $callOptions = []): PagedListResponse
    {
        return $this->startApiCall('ListDbSystemShapes', $request, $callOptions);
    }

    /**
     * Lists the entitlements in a given project.
     *
     * The async variant is {@see OracleDatabaseClient::listEntitlementsAsync()} .
     *
     * @example samples/V1/OracleDatabaseClient/list_entitlements.php
     *
     * @param ListEntitlementsRequest $request     A request to house fields associated with the call.
     * @param array                   $callOptions {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return PagedListResponse
     *
     * @throws ApiException Thrown if the API call fails.
     */
    public function listEntitlements(ListEntitlementsRequest $request, array $callOptions = []): PagedListResponse
    {
        return $this->startApiCall('ListEntitlements', $request, $callOptions);
    }

    /**
     * Lists all the valid Oracle Grid Infrastructure (GI) versions for the given
     * project and location.
     *
     * The async variant is {@see OracleDatabaseClient::listGiVersionsAsync()} .
     *
     * @example samples/V1/OracleDatabaseClient/list_gi_versions.php
     *
     * @param ListGiVersionsRequest $request     A request to house fields associated with the call.
     * @param array                 $callOptions {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return PagedListResponse
     *
     * @throws ApiException Thrown if the API call fails.
     */
    public function listGiVersions(ListGiVersionsRequest $request, array $callOptions = []): PagedListResponse
    {
        return $this->startApiCall('ListGiVersions', $request, $callOptions);
    }

    /**
     * Restores a single Autonomous Database.
     *
     * The async variant is
     * {@see OracleDatabaseClient::restoreAutonomousDatabaseAsync()} .
     *
     * @example samples/V1/OracleDatabaseClient/restore_autonomous_database.php
     *
     * @param RestoreAutonomousDatabaseRequest $request     A request to house fields associated with the call.
     * @param array                            $callOptions {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return OperationResponse
     *
     * @throws ApiException Thrown if the API call fails.
     */
    public function restoreAutonomousDatabase(
        RestoreAutonomousDatabaseRequest $request,
        array $callOptions = []
    ): OperationResponse {
        return $this->startApiCall('RestoreAutonomousDatabase', $request, $callOptions)->wait();
    }

    /**
     * Gets information about a location.
     *
     * The async variant is {@see OracleDatabaseClient::getLocationAsync()} .
     *
     * @example samples/V1/OracleDatabaseClient/get_location.php
     *
     * @param GetLocationRequest $request     A request to house fields associated with the call.
     * @param array              $callOptions {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return Location
     *
     * @throws ApiException Thrown if the API call fails.
     */
    public function getLocation(GetLocationRequest $request, array $callOptions = []): Location
    {
        return $this->startApiCall('GetLocation', $request, $callOptions)->wait();
    }

    /**
     * Lists information about the supported locations for this service.
     *
     * The async variant is {@see OracleDatabaseClient::listLocationsAsync()} .
     *
     * @example samples/V1/OracleDatabaseClient/list_locations.php
     *
     * @param ListLocationsRequest $request     A request to house fields associated with the call.
     * @param array                $callOptions {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return PagedListResponse
     *
     * @throws ApiException Thrown if the API call fails.
     */
    public function listLocations(ListLocationsRequest $request, array $callOptions = []): PagedListResponse
    {
        return $this->startApiCall('ListLocations', $request, $callOptions);
    }
}
