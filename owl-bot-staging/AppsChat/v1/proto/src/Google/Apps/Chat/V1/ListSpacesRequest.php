<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/chat/v1/space.proto

namespace Google\Apps\Chat\V1;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * A request to list the spaces the caller is a member of.
 *
 * Generated from protobuf message <code>google.chat.v1.ListSpacesRequest</code>
 */
class ListSpacesRequest extends \Google\Protobuf\Internal\Message
{
    /**
     * Optional. The maximum number of spaces to return. The service might return
     * fewer than this value.
     * If unspecified, at most 100 spaces are returned.
     * The maximum value is 1000. If you use a value more than 1000, it's
     * automatically changed to 1000.
     * Negative values return an `INVALID_ARGUMENT` error.
     *
     * Generated from protobuf field <code>int32 page_size = 1 [(.google.api.field_behavior) = OPTIONAL];</code>
     */
    protected $page_size = 0;
    /**
     * Optional. A page token, received from a previous list spaces call.
     * Provide this parameter to retrieve the subsequent page.
     * When paginating, the filter value should match the call that provided the
     * page token. Passing a different value may lead to unexpected results.
     *
     * Generated from protobuf field <code>string page_token = 2 [(.google.api.field_behavior) = OPTIONAL];</code>
     */
    protected $page_token = '';
    /**
     * Optional. A query filter.
     * You can filter spaces by the space type
     * ([`space_type`](https://developers.google.com/workspace/chat/api/reference/rest/v1/spaces#spacetype)).
     * To filter by space type, you must specify valid enum value, such as
     * `SPACE` or `GROUP_CHAT` (the `space_type` can't be
     * `SPACE_TYPE_UNSPECIFIED`). To query for multiple space types, use the `OR`
     * operator.
     * For example, the following queries are valid:
     * ```
     * space_type = "SPACE"
     * spaceType = "GROUP_CHAT" OR spaceType = "DIRECT_MESSAGE"
     * ```
     * Invalid queries are rejected by the server with an `INVALID_ARGUMENT`
     * error.
     *
     * Generated from protobuf field <code>string filter = 3 [(.google.api.field_behavior) = OPTIONAL];</code>
     */
    protected $filter = '';

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type int $page_size
     *           Optional. The maximum number of spaces to return. The service might return
     *           fewer than this value.
     *           If unspecified, at most 100 spaces are returned.
     *           The maximum value is 1000. If you use a value more than 1000, it's
     *           automatically changed to 1000.
     *           Negative values return an `INVALID_ARGUMENT` error.
     *     @type string $page_token
     *           Optional. A page token, received from a previous list spaces call.
     *           Provide this parameter to retrieve the subsequent page.
     *           When paginating, the filter value should match the call that provided the
     *           page token. Passing a different value may lead to unexpected results.
     *     @type string $filter
     *           Optional. A query filter.
     *           You can filter spaces by the space type
     *           ([`space_type`](https://developers.google.com/workspace/chat/api/reference/rest/v1/spaces#spacetype)).
     *           To filter by space type, you must specify valid enum value, such as
     *           `SPACE` or `GROUP_CHAT` (the `space_type` can't be
     *           `SPACE_TYPE_UNSPECIFIED`). To query for multiple space types, use the `OR`
     *           operator.
     *           For example, the following queries are valid:
     *           ```
     *           space_type = "SPACE"
     *           spaceType = "GROUP_CHAT" OR spaceType = "DIRECT_MESSAGE"
     *           ```
     *           Invalid queries are rejected by the server with an `INVALID_ARGUMENT`
     *           error.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Google\Chat\V1\Space::initOnce();
        parent::__construct($data);
    }

    /**
     * Optional. The maximum number of spaces to return. The service might return
     * fewer than this value.
     * If unspecified, at most 100 spaces are returned.
     * The maximum value is 1000. If you use a value more than 1000, it's
     * automatically changed to 1000.
     * Negative values return an `INVALID_ARGUMENT` error.
     *
     * Generated from protobuf field <code>int32 page_size = 1 [(.google.api.field_behavior) = OPTIONAL];</code>
     * @return int
     */
    public function getPageSize()
    {
        return $this->page_size;
    }

    /**
     * Optional. The maximum number of spaces to return. The service might return
     * fewer than this value.
     * If unspecified, at most 100 spaces are returned.
     * The maximum value is 1000. If you use a value more than 1000, it's
     * automatically changed to 1000.
     * Negative values return an `INVALID_ARGUMENT` error.
     *
     * Generated from protobuf field <code>int32 page_size = 1 [(.google.api.field_behavior) = OPTIONAL];</code>
     * @param int $var
     * @return $this
     */
    public function setPageSize($var)
    {
        GPBUtil::checkInt32($var);
        $this->page_size = $var;

        return $this;
    }

    /**
     * Optional. A page token, received from a previous list spaces call.
     * Provide this parameter to retrieve the subsequent page.
     * When paginating, the filter value should match the call that provided the
     * page token. Passing a different value may lead to unexpected results.
     *
     * Generated from protobuf field <code>string page_token = 2 [(.google.api.field_behavior) = OPTIONAL];</code>
     * @return string
     */
    public function getPageToken()
    {
        return $this->page_token;
    }

    /**
     * Optional. A page token, received from a previous list spaces call.
     * Provide this parameter to retrieve the subsequent page.
     * When paginating, the filter value should match the call that provided the
     * page token. Passing a different value may lead to unexpected results.
     *
     * Generated from protobuf field <code>string page_token = 2 [(.google.api.field_behavior) = OPTIONAL];</code>
     * @param string $var
     * @return $this
     */
    public function setPageToken($var)
    {
        GPBUtil::checkString($var, True);
        $this->page_token = $var;

        return $this;
    }

    /**
     * Optional. A query filter.
     * You can filter spaces by the space type
     * ([`space_type`](https://developers.google.com/workspace/chat/api/reference/rest/v1/spaces#spacetype)).
     * To filter by space type, you must specify valid enum value, such as
     * `SPACE` or `GROUP_CHAT` (the `space_type` can't be
     * `SPACE_TYPE_UNSPECIFIED`). To query for multiple space types, use the `OR`
     * operator.
     * For example, the following queries are valid:
     * ```
     * space_type = "SPACE"
     * spaceType = "GROUP_CHAT" OR spaceType = "DIRECT_MESSAGE"
     * ```
     * Invalid queries are rejected by the server with an `INVALID_ARGUMENT`
     * error.
     *
     * Generated from protobuf field <code>string filter = 3 [(.google.api.field_behavior) = OPTIONAL];</code>
     * @return string
     */
    public function getFilter()
    {
        return $this->filter;
    }

    /**
     * Optional. A query filter.
     * You can filter spaces by the space type
     * ([`space_type`](https://developers.google.com/workspace/chat/api/reference/rest/v1/spaces#spacetype)).
     * To filter by space type, you must specify valid enum value, such as
     * `SPACE` or `GROUP_CHAT` (the `space_type` can't be
     * `SPACE_TYPE_UNSPECIFIED`). To query for multiple space types, use the `OR`
     * operator.
     * For example, the following queries are valid:
     * ```
     * space_type = "SPACE"
     * spaceType = "GROUP_CHAT" OR spaceType = "DIRECT_MESSAGE"
     * ```
     * Invalid queries are rejected by the server with an `INVALID_ARGUMENT`
     * error.
     *
     * Generated from protobuf field <code>string filter = 3 [(.google.api.field_behavior) = OPTIONAL];</code>
     * @param string $var
     * @return $this
     */
    public function setFilter($var)
    {
        GPBUtil::checkString($var, True);
        $this->filter = $var;

        return $this;
    }

}

