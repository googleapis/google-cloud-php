<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/bigtable/admin/v2/bigtable_table_admin.proto

namespace Google\Cloud\Bigtable\Admin\V2;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * The request for
 * [UpdateSchemaBundle][google.bigtable.admin.v2.BigtableTableAdmin.UpdateSchemaBundle].
 *
 * Generated from protobuf message <code>google.bigtable.admin.v2.UpdateSchemaBundleRequest</code>
 */
class UpdateSchemaBundleRequest extends \Google\Protobuf\Internal\Message
{
    /**
     * Required. The schema bundle to update.
     * The schema bundle's `name` field is used to identify the schema bundle to
     * update. Values are of the form
     * `projects/{project}/instances/{instance}/tables/{table}/schemaBundles/{schema_bundle}`
     *
     * Generated from protobuf field <code>.google.bigtable.admin.v2.SchemaBundle schema_bundle = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    protected $schema_bundle = null;
    /**
     * Optional. The list of fields to update.
     *
     * Generated from protobuf field <code>.google.protobuf.FieldMask update_mask = 2 [(.google.api.field_behavior) = OPTIONAL];</code>
     */
    protected $update_mask = null;
    /**
     * Optional. If set, ignore the safety checks when updating the Schema Bundle.
     * The safety checks are:
     * - The new Schema Bundle is backwards compatible with the existing Schema
     * Bundle.
     *
     * Generated from protobuf field <code>bool ignore_warnings = 3 [(.google.api.field_behavior) = OPTIONAL];</code>
     */
    protected $ignore_warnings = false;

    /**
     * @param \Google\Cloud\Bigtable\Admin\V2\SchemaBundle $schemaBundle Required. The schema bundle to update.
     *
     *                                                                   The schema bundle's `name` field is used to identify the schema bundle to
     *                                                                   update. Values are of the form
     *                                                                   `projects/{project}/instances/{instance}/tables/{table}/schemaBundles/{schema_bundle}`
     * @param \Google\Protobuf\FieldMask                   $updateMask   Optional. The list of fields to update.
     *
     * @return \Google\Cloud\Bigtable\Admin\V2\UpdateSchemaBundleRequest
     *
     * @experimental
     */
    public static function build(\Google\Cloud\Bigtable\Admin\V2\SchemaBundle $schemaBundle, \Google\Protobuf\FieldMask $updateMask): self
    {
        return (new self())
            ->setSchemaBundle($schemaBundle)
            ->setUpdateMask($updateMask);
    }

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type \Google\Cloud\Bigtable\Admin\V2\SchemaBundle $schema_bundle
     *           Required. The schema bundle to update.
     *           The schema bundle's `name` field is used to identify the schema bundle to
     *           update. Values are of the form
     *           `projects/{project}/instances/{instance}/tables/{table}/schemaBundles/{schema_bundle}`
     *     @type \Google\Protobuf\FieldMask $update_mask
     *           Optional. The list of fields to update.
     *     @type bool $ignore_warnings
     *           Optional. If set, ignore the safety checks when updating the Schema Bundle.
     *           The safety checks are:
     *           - The new Schema Bundle is backwards compatible with the existing Schema
     *           Bundle.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Google\Bigtable\Admin\V2\BigtableTableAdmin::initOnce();
        parent::__construct($data);
    }

    /**
     * Required. The schema bundle to update.
     * The schema bundle's `name` field is used to identify the schema bundle to
     * update. Values are of the form
     * `projects/{project}/instances/{instance}/tables/{table}/schemaBundles/{schema_bundle}`
     *
     * Generated from protobuf field <code>.google.bigtable.admin.v2.SchemaBundle schema_bundle = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     * @return \Google\Cloud\Bigtable\Admin\V2\SchemaBundle|null
     */
    public function getSchemaBundle()
    {
        return $this->schema_bundle;
    }

    public function hasSchemaBundle()
    {
        return isset($this->schema_bundle);
    }

    public function clearSchemaBundle()
    {
        unset($this->schema_bundle);
    }

    /**
     * Required. The schema bundle to update.
     * The schema bundle's `name` field is used to identify the schema bundle to
     * update. Values are of the form
     * `projects/{project}/instances/{instance}/tables/{table}/schemaBundles/{schema_bundle}`
     *
     * Generated from protobuf field <code>.google.bigtable.admin.v2.SchemaBundle schema_bundle = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     * @param \Google\Cloud\Bigtable\Admin\V2\SchemaBundle $var
     * @return $this
     */
    public function setSchemaBundle($var)
    {
        GPBUtil::checkMessage($var, \Google\Cloud\Bigtable\Admin\V2\SchemaBundle::class);
        $this->schema_bundle = $var;

        return $this;
    }

    /**
     * Optional. The list of fields to update.
     *
     * Generated from protobuf field <code>.google.protobuf.FieldMask update_mask = 2 [(.google.api.field_behavior) = OPTIONAL];</code>
     * @return \Google\Protobuf\FieldMask|null
     */
    public function getUpdateMask()
    {
        return $this->update_mask;
    }

    public function hasUpdateMask()
    {
        return isset($this->update_mask);
    }

    public function clearUpdateMask()
    {
        unset($this->update_mask);
    }

    /**
     * Optional. The list of fields to update.
     *
     * Generated from protobuf field <code>.google.protobuf.FieldMask update_mask = 2 [(.google.api.field_behavior) = OPTIONAL];</code>
     * @param \Google\Protobuf\FieldMask $var
     * @return $this
     */
    public function setUpdateMask($var)
    {
        GPBUtil::checkMessage($var, \Google\Protobuf\FieldMask::class);
        $this->update_mask = $var;

        return $this;
    }

    /**
     * Optional. If set, ignore the safety checks when updating the Schema Bundle.
     * The safety checks are:
     * - The new Schema Bundle is backwards compatible with the existing Schema
     * Bundle.
     *
     * Generated from protobuf field <code>bool ignore_warnings = 3 [(.google.api.field_behavior) = OPTIONAL];</code>
     * @return bool
     */
    public function getIgnoreWarnings()
    {
        return $this->ignore_warnings;
    }

    /**
     * Optional. If set, ignore the safety checks when updating the Schema Bundle.
     * The safety checks are:
     * - The new Schema Bundle is backwards compatible with the existing Schema
     * Bundle.
     *
     * Generated from protobuf field <code>bool ignore_warnings = 3 [(.google.api.field_behavior) = OPTIONAL];</code>
     * @param bool $var
     * @return $this
     */
    public function setIgnoreWarnings($var)
    {
        GPBUtil::checkBool($var);
        $this->ignore_warnings = $var;

        return $this;
    }

}

