<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/cloud/bigquery/migration/v2/translation_config.proto

namespace Google\Cloud\BigQuery\Migration\V2;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Represents the default source environment values for the translation.
 *
 * Generated from protobuf message <code>google.cloud.bigquery.migration.v2.SourceEnv</code>
 */
class SourceEnv extends \Google\Protobuf\Internal\Message
{
    /**
     * The default database name to fully qualify SQL objects when their database
     * name is missing.
     *
     * Generated from protobuf field <code>string default_database = 1;</code>
     */
    protected $default_database = '';
    /**
     * The schema search path. When SQL objects are missing schema name,
     * translation engine will search through this list to find the value.
     *
     * Generated from protobuf field <code>repeated string schema_search_path = 2;</code>
     */
    private $schema_search_path;
    /**
     * Optional. Expects a valid BigQuery dataset ID that exists, e.g.,
     * project-123.metadata_store_123.  If specified, translation will search and
     * read the required schema information from a metadata store in this dataset.
     * If metadata store doesn't exist, translation will parse the metadata file
     * and upload the schema info to a temp table in the dataset to speed up
     * future translation jobs.
     *
     * Generated from protobuf field <code>string metadata_store_dataset = 3 [(.google.api.field_behavior) = OPTIONAL];</code>
     */
    protected $metadata_store_dataset = '';

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $default_database
     *           The default database name to fully qualify SQL objects when their database
     *           name is missing.
     *     @type array<string>|\Google\Protobuf\Internal\RepeatedField $schema_search_path
     *           The schema search path. When SQL objects are missing schema name,
     *           translation engine will search through this list to find the value.
     *     @type string $metadata_store_dataset
     *           Optional. Expects a valid BigQuery dataset ID that exists, e.g.,
     *           project-123.metadata_store_123.  If specified, translation will search and
     *           read the required schema information from a metadata store in this dataset.
     *           If metadata store doesn't exist, translation will parse the metadata file
     *           and upload the schema info to a temp table in the dataset to speed up
     *           future translation jobs.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Google\Cloud\Bigquery\Migration\V2\TranslationConfig::initOnce();
        parent::__construct($data);
    }

    /**
     * The default database name to fully qualify SQL objects when their database
     * name is missing.
     *
     * Generated from protobuf field <code>string default_database = 1;</code>
     * @return string
     */
    public function getDefaultDatabase()
    {
        return $this->default_database;
    }

    /**
     * The default database name to fully qualify SQL objects when their database
     * name is missing.
     *
     * Generated from protobuf field <code>string default_database = 1;</code>
     * @param string $var
     * @return $this
     */
    public function setDefaultDatabase($var)
    {
        GPBUtil::checkString($var, True);
        $this->default_database = $var;

        return $this;
    }

    /**
     * The schema search path. When SQL objects are missing schema name,
     * translation engine will search through this list to find the value.
     *
     * Generated from protobuf field <code>repeated string schema_search_path = 2;</code>
     * @return \Google\Protobuf\Internal\RepeatedField
     */
    public function getSchemaSearchPath()
    {
        return $this->schema_search_path;
    }

    /**
     * The schema search path. When SQL objects are missing schema name,
     * translation engine will search through this list to find the value.
     *
     * Generated from protobuf field <code>repeated string schema_search_path = 2;</code>
     * @param array<string>|\Google\Protobuf\Internal\RepeatedField $var
     * @return $this
     */
    public function setSchemaSearchPath($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::STRING);
        $this->schema_search_path = $arr;

        return $this;
    }

    /**
     * Optional. Expects a valid BigQuery dataset ID that exists, e.g.,
     * project-123.metadata_store_123.  If specified, translation will search and
     * read the required schema information from a metadata store in this dataset.
     * If metadata store doesn't exist, translation will parse the metadata file
     * and upload the schema info to a temp table in the dataset to speed up
     * future translation jobs.
     *
     * Generated from protobuf field <code>string metadata_store_dataset = 3 [(.google.api.field_behavior) = OPTIONAL];</code>
     * @return string
     */
    public function getMetadataStoreDataset()
    {
        return $this->metadata_store_dataset;
    }

    /**
     * Optional. Expects a valid BigQuery dataset ID that exists, e.g.,
     * project-123.metadata_store_123.  If specified, translation will search and
     * read the required schema information from a metadata store in this dataset.
     * If metadata store doesn't exist, translation will parse the metadata file
     * and upload the schema info to a temp table in the dataset to speed up
     * future translation jobs.
     *
     * Generated from protobuf field <code>string metadata_store_dataset = 3 [(.google.api.field_behavior) = OPTIONAL];</code>
     * @param string $var
     * @return $this
     */
    public function setMetadataStoreDataset($var)
    {
        GPBUtil::checkString($var, True);
        $this->metadata_store_dataset = $var;

        return $this;
    }

}

