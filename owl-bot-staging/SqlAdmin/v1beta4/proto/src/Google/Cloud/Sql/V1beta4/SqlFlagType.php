<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/cloud/sql/v1beta4/cloud_sql_resources.proto

namespace Google\Cloud\Sql\V1beta4;

use UnexpectedValueException;

/**
 * Protobuf type <code>google.cloud.sql.v1beta4.SqlFlagType</code>
 */
class SqlFlagType
{
    /**
     * This is an unknown flag type.
     *
     * Generated from protobuf enum <code>SQL_FLAG_TYPE_UNSPECIFIED = 0;</code>
     */
    const SQL_FLAG_TYPE_UNSPECIFIED = 0;
    /**
     * Boolean type flag.
     *
     * Generated from protobuf enum <code>BOOLEAN = 1;</code>
     */
    const BOOLEAN = 1;
    /**
     * String type flag.
     *
     * Generated from protobuf enum <code>STRING = 2;</code>
     */
    const STRING = 2;
    /**
     * Integer type flag.
     *
     * Generated from protobuf enum <code>INTEGER = 3;</code>
     */
    const INTEGER = 3;
    /**
     * Flag type used for a server startup option.
     *
     * Generated from protobuf enum <code>NONE = 4;</code>
     */
    const NONE = 4;
    /**
     * Type introduced specially for MySQL TimeZone offset. Accept a string value
     * with the format [-12:59, 13:00].
     *
     * Generated from protobuf enum <code>MYSQL_TIMEZONE_OFFSET = 5;</code>
     */
    const MYSQL_TIMEZONE_OFFSET = 5;
    /**
     * Float type flag.
     *
     * Generated from protobuf enum <code>FLOAT = 6;</code>
     */
    const FLOAT = 6;
    /**
     * Comma-separated list of the strings in a SqlFlagType enum.
     *
     * Generated from protobuf enum <code>REPEATED_STRING = 7;</code>
     */
    const REPEATED_STRING = 7;

    private static $valueToName = [
        self::SQL_FLAG_TYPE_UNSPECIFIED => 'SQL_FLAG_TYPE_UNSPECIFIED',
        self::BOOLEAN => 'BOOLEAN',
        self::STRING => 'STRING',
        self::INTEGER => 'INTEGER',
        self::NONE => 'NONE',
        self::MYSQL_TIMEZONE_OFFSET => 'MYSQL_TIMEZONE_OFFSET',
        self::FLOAT => 'FLOAT',
        self::REPEATED_STRING => 'REPEATED_STRING',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

