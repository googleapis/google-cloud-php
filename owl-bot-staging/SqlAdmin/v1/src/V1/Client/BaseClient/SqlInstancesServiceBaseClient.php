<?php
/*
 * Copyright 2023 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * GENERATED CODE WARNING
 * Generated by gapic-generator-php from the file
 * https://github.com/googleapis/googleapis/blob/master/google/cloud/sql/v1/cloud_sql_instances.proto
 * Updates to the above are reflected here through a refresh process.
 */

namespace Google\Cloud\Sql\V1\Client\BaseClient;

use Google\ApiCore\ApiException;
use Google\ApiCore\CredentialsWrapper;
use Google\ApiCore\GapicClientTrait;
use Google\ApiCore\RetrySettings;
use Google\ApiCore\Transport\TransportInterface;
use Google\ApiCore\ValidationException;
use Google\Auth\FetchAuthTokenInterface;
use Google\Cloud\Sql\V1\DatabaseInstance;
use Google\Cloud\Sql\V1\InstancesListResponse;
use Google\Cloud\Sql\V1\InstancesListServerCasResponse;
use Google\Cloud\Sql\V1\Operation;
use Google\Cloud\Sql\V1\SqlInstancesAddServerCaRequest;
use Google\Cloud\Sql\V1\SqlInstancesCloneRequest;
use Google\Cloud\Sql\V1\SqlInstancesCreateEphemeralCertRequest;
use Google\Cloud\Sql\V1\SqlInstancesDeleteRequest;
use Google\Cloud\Sql\V1\SqlInstancesDemoteMasterRequest;
use Google\Cloud\Sql\V1\SqlInstancesExportRequest;
use Google\Cloud\Sql\V1\SqlInstancesFailoverRequest;
use Google\Cloud\Sql\V1\SqlInstancesGetDiskShrinkConfigRequest;
use Google\Cloud\Sql\V1\SqlInstancesGetDiskShrinkConfigResponse;
use Google\Cloud\Sql\V1\SqlInstancesGetLatestRecoveryTimeRequest;
use Google\Cloud\Sql\V1\SqlInstancesGetLatestRecoveryTimeResponse;
use Google\Cloud\Sql\V1\SqlInstancesGetRequest;
use Google\Cloud\Sql\V1\SqlInstancesImportRequest;
use Google\Cloud\Sql\V1\SqlInstancesInsertRequest;
use Google\Cloud\Sql\V1\SqlInstancesListRequest;
use Google\Cloud\Sql\V1\SqlInstancesListServerCasRequest;
use Google\Cloud\Sql\V1\SqlInstancesPatchRequest;
use Google\Cloud\Sql\V1\SqlInstancesPerformDiskShrinkRequest;
use Google\Cloud\Sql\V1\SqlInstancesPromoteReplicaRequest;
use Google\Cloud\Sql\V1\SqlInstancesReencryptRequest;
use Google\Cloud\Sql\V1\SqlInstancesRescheduleMaintenanceRequest;
use Google\Cloud\Sql\V1\SqlInstancesResetReplicaSizeRequest;
use Google\Cloud\Sql\V1\SqlInstancesResetSslConfigRequest;
use Google\Cloud\Sql\V1\SqlInstancesRestartRequest;
use Google\Cloud\Sql\V1\SqlInstancesRestoreBackupRequest;
use Google\Cloud\Sql\V1\SqlInstancesRotateServerCaRequest;
use Google\Cloud\Sql\V1\SqlInstancesStartExternalSyncRequest;
use Google\Cloud\Sql\V1\SqlInstancesStartReplicaRequest;
use Google\Cloud\Sql\V1\SqlInstancesStopReplicaRequest;
use Google\Cloud\Sql\V1\SqlInstancesTruncateLogRequest;
use Google\Cloud\Sql\V1\SqlInstancesUpdateRequest;
use Google\Cloud\Sql\V1\SqlInstancesVerifyExternalSyncSettingsRequest;
use Google\Cloud\Sql\V1\SqlInstancesVerifyExternalSyncSettingsResponse;
use Google\Cloud\Sql\V1\SslCert;
use GuzzleHttp\Promise\PromiseInterface;

/**
 * Service Description: Service to manage Cloud SQL instances.
 *
 * This class provides the ability to make remote calls to the backing service through method
 * calls that map to API methods.
 *
 * This class is currently experimental and may be subject to changes.
 *
 * @experimental
 *
 * @internal
 *
 * @method PromiseInterface addServerCaAsync(SqlInstancesAddServerCaRequest $request, array $optionalArgs = [])
 * @method PromiseInterface cloneAsync(SqlInstancesCloneRequest $request, array $optionalArgs = [])
 * @method PromiseInterface createEphemeralAsync(SqlInstancesCreateEphemeralCertRequest $request, array $optionalArgs = [])
 * @method PromiseInterface deleteAsync(SqlInstancesDeleteRequest $request, array $optionalArgs = [])
 * @method PromiseInterface demoteMasterAsync(SqlInstancesDemoteMasterRequest $request, array $optionalArgs = [])
 * @method PromiseInterface exportAsync(SqlInstancesExportRequest $request, array $optionalArgs = [])
 * @method PromiseInterface failoverAsync(SqlInstancesFailoverRequest $request, array $optionalArgs = [])
 * @method PromiseInterface getAsync(SqlInstancesGetRequest $request, array $optionalArgs = [])
 * @method PromiseInterface getDiskShrinkConfigAsync(SqlInstancesGetDiskShrinkConfigRequest $request, array $optionalArgs = [])
 * @method PromiseInterface getLatestRecoveryTimeAsync(SqlInstancesGetLatestRecoveryTimeRequest $request, array $optionalArgs = [])
 * @method PromiseInterface importAsync(SqlInstancesImportRequest $request, array $optionalArgs = [])
 * @method PromiseInterface insertAsync(SqlInstancesInsertRequest $request, array $optionalArgs = [])
 * @method PromiseInterface listAsync(SqlInstancesListRequest $request, array $optionalArgs = [])
 * @method PromiseInterface listServerCasAsync(SqlInstancesListServerCasRequest $request, array $optionalArgs = [])
 * @method PromiseInterface patchAsync(SqlInstancesPatchRequest $request, array $optionalArgs = [])
 * @method PromiseInterface performDiskShrinkAsync(SqlInstancesPerformDiskShrinkRequest $request, array $optionalArgs = [])
 * @method PromiseInterface promoteReplicaAsync(SqlInstancesPromoteReplicaRequest $request, array $optionalArgs = [])
 * @method PromiseInterface reencryptAsync(SqlInstancesReencryptRequest $request, array $optionalArgs = [])
 * @method PromiseInterface rescheduleMaintenanceAsync(SqlInstancesRescheduleMaintenanceRequest $request, array $optionalArgs = [])
 * @method PromiseInterface resetReplicaSizeAsync(SqlInstancesResetReplicaSizeRequest $request, array $optionalArgs = [])
 * @method PromiseInterface resetSslConfigAsync(SqlInstancesResetSslConfigRequest $request, array $optionalArgs = [])
 * @method PromiseInterface restartAsync(SqlInstancesRestartRequest $request, array $optionalArgs = [])
 * @method PromiseInterface restoreBackupAsync(SqlInstancesRestoreBackupRequest $request, array $optionalArgs = [])
 * @method PromiseInterface rotateServerCaAsync(SqlInstancesRotateServerCaRequest $request, array $optionalArgs = [])
 * @method PromiseInterface startExternalSyncAsync(SqlInstancesStartExternalSyncRequest $request, array $optionalArgs = [])
 * @method PromiseInterface startReplicaAsync(SqlInstancesStartReplicaRequest $request, array $optionalArgs = [])
 * @method PromiseInterface stopReplicaAsync(SqlInstancesStopReplicaRequest $request, array $optionalArgs = [])
 * @method PromiseInterface truncateLogAsync(SqlInstancesTruncateLogRequest $request, array $optionalArgs = [])
 * @method PromiseInterface updateAsync(SqlInstancesUpdateRequest $request, array $optionalArgs = [])
 * @method PromiseInterface verifyExternalSyncSettingsAsync(SqlInstancesVerifyExternalSyncSettingsRequest $request, array $optionalArgs = [])
 */
abstract class SqlInstancesServiceBaseClient
{
    use GapicClientTrait;

    /** The name of the service. */
    private const SERVICE_NAME = 'google.cloud.sql.v1.SqlInstancesService';

    /** The default address of the service. */
    private const SERVICE_ADDRESS = 'sqladmin.googleapis.com';

    /** The default port of the service. */
    private const DEFAULT_SERVICE_PORT = 443;

    /** The name of the code generator, to be included in the agent header. */
    private const CODEGEN_NAME = 'gapic';

    /** The default scopes required by the service. */
    public static $serviceScopes = [
        'https://www.googleapis.com/auth/cloud-platform',
        'https://www.googleapis.com/auth/sqlservice.admin',
    ];

    private static function getClientDefaults()
    {
        return [
            'serviceName' => self::SERVICE_NAME,
            'apiEndpoint' => self::SERVICE_ADDRESS . ':' . self::DEFAULT_SERVICE_PORT,
            'clientConfig' => __DIR__ . '/../../resources/sql_instances_service_client_config.json',
            'descriptorsConfigPath' => __DIR__ . '/../../resources/sql_instances_service_descriptor_config.php',
            'gcpApiConfigPath' => __DIR__ . '/../../resources/sql_instances_service_grpc_config.json',
            'credentialsConfig' => [
                'defaultScopes' => self::$serviceScopes,
            ],
            'transportConfig' => [
                'rest' => [
                    'restClientConfigPath' => __DIR__ . '/../../resources/sql_instances_service_rest_client_config.php',
                ],
            ],
        ];
    }

    /**
     * Constructor.
     *
     * @param array $options {
     *     Optional. Options for configuring the service API wrapper.
     *
     *     @type string $apiEndpoint
     *           The address of the API remote host. May optionally include the port, formatted
     *           as "<uri>:<port>". Default 'sqladmin.googleapis.com:443'.
     *     @type string|array|FetchAuthTokenInterface|CredentialsWrapper $credentials
     *           The credentials to be used by the client to authorize API calls. This option
     *           accepts either a path to a credentials file, or a decoded credentials file as a
     *           PHP array.
     *           *Advanced usage*: In addition, this option can also accept a pre-constructed
     *           {@see \Google\Auth\FetchAuthTokenInterface} object or
     *           {@see \Google\ApiCore\CredentialsWrapper} object. Note that when one of these
     *           objects are provided, any settings in $credentialsConfig will be ignored.
     *     @type array $credentialsConfig
     *           Options used to configure credentials, including auth token caching, for the
     *           client. For a full list of supporting configuration options, see
     *           {@see \Google\ApiCore\CredentialsWrapper::build()} .
     *     @type bool $disableRetries
     *           Determines whether or not retries defined by the client configuration should be
     *           disabled. Defaults to `false`.
     *     @type string|array $clientConfig
     *           Client method configuration, including retry settings. This option can be either
     *           a path to a JSON file, or a PHP array containing the decoded JSON data. By
     *           default this settings points to the default client config file, which is
     *           provided in the resources folder.
     *     @type string|TransportInterface $transport
     *           The transport used for executing network requests. May be either the string
     *           `rest` or `grpc`. Defaults to `grpc` if gRPC support is detected on the system.
     *           *Advanced usage*: Additionally, it is possible to pass in an already
     *           instantiated {@see \Google\ApiCore\Transport\TransportInterface} object. Note
     *           that when this object is provided, any settings in $transportConfig, and any
     *           $apiEndpoint setting, will be ignored.
     *     @type array $transportConfig
     *           Configuration options that will be used to construct the transport. Options for
     *           each supported transport type should be passed in a key for that transport. For
     *           example:
     *           $transportConfig = [
     *               'grpc' => [...],
     *               'rest' => [...],
     *           ];
     *           See the {@see \Google\ApiCore\Transport\GrpcTransport::build()} and
     *           {@see \Google\ApiCore\Transport\RestTransport::build()} methods for the
     *           supported options.
     *     @type callable $clientCertSource
     *           A callable which returns the client cert as a string. This can be used to
     *           provide a certificate and private key to the transport layer for mTLS.
     * }
     *
     * @throws ValidationException
     */
    public function __construct(array $options = [])
    {
        $clientOptions = $this->buildClientOptions($options);
        $this->setClientOptions($clientOptions);
    }

    /** Handles execution of the async variants for each documented method. */
    public function __call($method, $args)
    {
        if (substr($method, -5) !== 'Async') {
            trigger_error('Call to undefined method ' . __CLASS__ . "::$method()", E_USER_ERROR);
        }

        array_unshift($args, substr($method, 0, -5));
        return call_user_func_array([$this, 'startAsyncCall'], $args);
    }

    /**
     * Adds a new trusted Certificate Authority (CA) version for the specified
     * instance. Required to prepare for a certificate rotation. If a CA version
     * was previously added but never used in a certificate rotation, this
     * operation replaces that version. There cannot be more than one CA version
     * waiting to be rotated in.
     *
     * The async variant is {@see self::addServerCaAsync()} .
     *
     * @example samples/V1/SqlInstancesServiceClient/add_server_ca.php
     *
     * @param SqlInstancesAddServerCaRequest $request     A request to house fields associated with the call.
     * @param array                          $callOptions {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return Operation
     *
     * @throws ApiException Thrown if the API call fails.
     */
    public function addServerCa(SqlInstancesAddServerCaRequest $request, array $callOptions = []): Operation
    {
        return $this->startApiCall('AddServerCa', $request, $callOptions)->wait();
    }

    /**
     * Creates a Cloud SQL instance as a clone of the source instance. Using this
     * operation might cause your instance to restart.
     *
     * The async variant is {@see self::cloneAsync()} .
     *
     * @example samples/V1/SqlInstancesServiceClient/clone.php
     *
     * @param SqlInstancesCloneRequest $request     A request to house fields associated with the call.
     * @param array                    $callOptions {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return Operation
     *
     * @throws ApiException Thrown if the API call fails.
     */
    public function clone(SqlInstancesCloneRequest $request, array $callOptions = []): Operation
    {
        return $this->startApiCall('Clone', $request, $callOptions)->wait();
    }

    /**
     * Generates a short-lived X509 certificate containing the provided public key
     * and signed by a private key specific to the target instance. Users may use
     * the certificate to authenticate as themselves when connecting to the
     * database.
     *
     * The async variant is {@see self::createEphemeralAsync()} .
     *
     * @example samples/V1/SqlInstancesServiceClient/create_ephemeral.php
     *
     * @param SqlInstancesCreateEphemeralCertRequest $request     A request to house fields associated with the call.
     * @param array                                  $callOptions {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return SslCert
     *
     * @throws ApiException Thrown if the API call fails.
     */
    public function createEphemeral(SqlInstancesCreateEphemeralCertRequest $request, array $callOptions = []): SslCert
    {
        return $this->startApiCall('CreateEphemeral', $request, $callOptions)->wait();
    }

    /**
     * Deletes a Cloud SQL instance.
     *
     * The async variant is {@see self::deleteAsync()} .
     *
     * @example samples/V1/SqlInstancesServiceClient/delete.php
     *
     * @param SqlInstancesDeleteRequest $request     A request to house fields associated with the call.
     * @param array                     $callOptions {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return Operation
     *
     * @throws ApiException Thrown if the API call fails.
     */
    public function delete(SqlInstancesDeleteRequest $request, array $callOptions = []): Operation
    {
        return $this->startApiCall('Delete', $request, $callOptions)->wait();
    }

    /**
     * Demotes the stand-alone instance to be a Cloud SQL read replica for an
     * external database server.
     *
     * The async variant is {@see self::demoteMasterAsync()} .
     *
     * @example samples/V1/SqlInstancesServiceClient/demote_master.php
     *
     * @param SqlInstancesDemoteMasterRequest $request     A request to house fields associated with the call.
     * @param array                           $callOptions {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return Operation
     *
     * @throws ApiException Thrown if the API call fails.
     */
    public function demoteMaster(SqlInstancesDemoteMasterRequest $request, array $callOptions = []): Operation
    {
        return $this->startApiCall('DemoteMaster', $request, $callOptions)->wait();
    }

    /**
     * Exports data from a Cloud SQL instance to a Cloud Storage bucket as a SQL
     * dump or CSV file.
     *
     * The async variant is {@see self::exportAsync()} .
     *
     * @example samples/V1/SqlInstancesServiceClient/export.php
     *
     * @param SqlInstancesExportRequest $request     A request to house fields associated with the call.
     * @param array                     $callOptions {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return Operation
     *
     * @throws ApiException Thrown if the API call fails.
     */
    public function export(SqlInstancesExportRequest $request, array $callOptions = []): Operation
    {
        return $this->startApiCall('Export', $request, $callOptions)->wait();
    }

    /**
     * Initiates a manual failover of a high availability (HA) primary instance
     * to a standby instance, which becomes the primary instance. Users are
     * then rerouted to the new primary. For more information, see the
     * [Overview of high
     * availability](https://cloud.google.com/sql/docs/mysql/high-availability)
     * page in the Cloud SQL documentation.
     * If using Legacy HA (MySQL only), this causes the instance to failover to
     * its failover replica instance.
     *
     * The async variant is {@see self::failoverAsync()} .
     *
     * @example samples/V1/SqlInstancesServiceClient/failover.php
     *
     * @param SqlInstancesFailoverRequest $request     A request to house fields associated with the call.
     * @param array                       $callOptions {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return Operation
     *
     * @throws ApiException Thrown if the API call fails.
     */
    public function failover(SqlInstancesFailoverRequest $request, array $callOptions = []): Operation
    {
        return $this->startApiCall('Failover', $request, $callOptions)->wait();
    }

    /**
     * Retrieves a resource containing information about a Cloud SQL instance.
     *
     * The async variant is {@see self::getAsync()} .
     *
     * @example samples/V1/SqlInstancesServiceClient/get.php
     *
     * @param SqlInstancesGetRequest $request     A request to house fields associated with the call.
     * @param array                  $callOptions {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return DatabaseInstance
     *
     * @throws ApiException Thrown if the API call fails.
     */
    public function get(SqlInstancesGetRequest $request, array $callOptions = []): DatabaseInstance
    {
        return $this->startApiCall('Get', $request, $callOptions)->wait();
    }

    /**
     * Get Disk Shrink Config for a given instance.
     *
     * The async variant is {@see self::getDiskShrinkConfigAsync()} .
     *
     * @example samples/V1/SqlInstancesServiceClient/get_disk_shrink_config.php
     *
     * @param SqlInstancesGetDiskShrinkConfigRequest $request     A request to house fields associated with the call.
     * @param array                                  $callOptions {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return SqlInstancesGetDiskShrinkConfigResponse
     *
     * @throws ApiException Thrown if the API call fails.
     */
    public function getDiskShrinkConfig(SqlInstancesGetDiskShrinkConfigRequest $request, array $callOptions = []): SqlInstancesGetDiskShrinkConfigResponse
    {
        return $this->startApiCall('GetDiskShrinkConfig', $request, $callOptions)->wait();
    }

    /**
     * Get Latest Recovery Time for a given instance.
     *
     * The async variant is {@see self::getLatestRecoveryTimeAsync()} .
     *
     * @example samples/V1/SqlInstancesServiceClient/get_latest_recovery_time.php
     *
     * @param SqlInstancesGetLatestRecoveryTimeRequest $request     A request to house fields associated with the call.
     * @param array                                    $callOptions {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return SqlInstancesGetLatestRecoveryTimeResponse
     *
     * @throws ApiException Thrown if the API call fails.
     */
    public function getLatestRecoveryTime(SqlInstancesGetLatestRecoveryTimeRequest $request, array $callOptions = []): SqlInstancesGetLatestRecoveryTimeResponse
    {
        return $this->startApiCall('GetLatestRecoveryTime', $request, $callOptions)->wait();
    }

    /**
     * Imports data into a Cloud SQL instance from a SQL dump  or CSV file in
     * Cloud Storage.
     *
     * The async variant is {@see self::importAsync()} .
     *
     * @example samples/V1/SqlInstancesServiceClient/import.php
     *
     * @param SqlInstancesImportRequest $request     A request to house fields associated with the call.
     * @param array                     $callOptions {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return Operation
     *
     * @throws ApiException Thrown if the API call fails.
     */
    public function import(SqlInstancesImportRequest $request, array $callOptions = []): Operation
    {
        return $this->startApiCall('Import', $request, $callOptions)->wait();
    }

    /**
     * Creates a new Cloud SQL instance.
     *
     * The async variant is {@see self::insertAsync()} .
     *
     * @example samples/V1/SqlInstancesServiceClient/insert.php
     *
     * @param SqlInstancesInsertRequest $request     A request to house fields associated with the call.
     * @param array                     $callOptions {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return Operation
     *
     * @throws ApiException Thrown if the API call fails.
     */
    public function insert(SqlInstancesInsertRequest $request, array $callOptions = []): Operation
    {
        return $this->startApiCall('Insert', $request, $callOptions)->wait();
    }

    /**
     * Lists instances under a given project.
     *
     * The async variant is {@see self::listAsync()} .
     *
     * @example samples/V1/SqlInstancesServiceClient/list.php
     *
     * @param SqlInstancesListRequest $request     A request to house fields associated with the call.
     * @param array                   $callOptions {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return InstancesListResponse
     *
     * @throws ApiException Thrown if the API call fails.
     */
    public function list(SqlInstancesListRequest $request, array $callOptions = []): InstancesListResponse
    {
        return $this->startApiCall('List', $request, $callOptions)->wait();
    }

    /**
     * Lists all of the trusted Certificate Authorities (CAs) for the specified
     * instance. There can be up to three CAs listed: the CA that was used to sign
     * the certificate that is currently in use, a CA that has been added but not
     * yet used to sign a certificate, and a CA used to sign a certificate that
     * has previously rotated out.
     *
     * The async variant is {@see self::listServerCasAsync()} .
     *
     * @example samples/V1/SqlInstancesServiceClient/list_server_cas.php
     *
     * @param SqlInstancesListServerCasRequest $request     A request to house fields associated with the call.
     * @param array                            $callOptions {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return InstancesListServerCasResponse
     *
     * @throws ApiException Thrown if the API call fails.
     */
    public function listServerCas(SqlInstancesListServerCasRequest $request, array $callOptions = []): InstancesListServerCasResponse
    {
        return $this->startApiCall('ListServerCas', $request, $callOptions)->wait();
    }

    /**
     * Partially updates settings of a Cloud SQL instance by merging the request
     * with the current configuration. This method supports patch semantics.
     *
     * The async variant is {@see self::patchAsync()} .
     *
     * @example samples/V1/SqlInstancesServiceClient/patch.php
     *
     * @param SqlInstancesPatchRequest $request     A request to house fields associated with the call.
     * @param array                    $callOptions {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return Operation
     *
     * @throws ApiException Thrown if the API call fails.
     */
    public function patch(SqlInstancesPatchRequest $request, array $callOptions = []): Operation
    {
        return $this->startApiCall('Patch', $request, $callOptions)->wait();
    }

    /**
     * Perform Disk Shrink on primary instance.
     *
     * The async variant is {@see self::performDiskShrinkAsync()} .
     *
     * @example samples/V1/SqlInstancesServiceClient/perform_disk_shrink.php
     *
     * @param SqlInstancesPerformDiskShrinkRequest $request     A request to house fields associated with the call.
     * @param array                                $callOptions {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return Operation
     *
     * @throws ApiException Thrown if the API call fails.
     */
    public function performDiskShrink(SqlInstancesPerformDiskShrinkRequest $request, array $callOptions = []): Operation
    {
        return $this->startApiCall('PerformDiskShrink', $request, $callOptions)->wait();
    }

    /**
     * Promotes the read replica instance to be a stand-alone Cloud SQL instance.
     * Using this operation might cause your instance to restart.
     *
     * The async variant is {@see self::promoteReplicaAsync()} .
     *
     * @example samples/V1/SqlInstancesServiceClient/promote_replica.php
     *
     * @param SqlInstancesPromoteReplicaRequest $request     A request to house fields associated with the call.
     * @param array                             $callOptions {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return Operation
     *
     * @throws ApiException Thrown if the API call fails.
     */
    public function promoteReplica(SqlInstancesPromoteReplicaRequest $request, array $callOptions = []): Operation
    {
        return $this->startApiCall('PromoteReplica', $request, $callOptions)->wait();
    }

    /**
     * Reencrypt CMEK instance with latest key version.
     *
     * The async variant is {@see self::reencryptAsync()} .
     *
     * @example samples/V1/SqlInstancesServiceClient/reencrypt.php
     *
     * @param SqlInstancesReencryptRequest $request     A request to house fields associated with the call.
     * @param array                        $callOptions {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return Operation
     *
     * @throws ApiException Thrown if the API call fails.
     */
    public function reencrypt(SqlInstancesReencryptRequest $request, array $callOptions = []): Operation
    {
        return $this->startApiCall('Reencrypt', $request, $callOptions)->wait();
    }

    /**
     * Reschedules the maintenance on the given instance.
     *
     * The async variant is {@see self::rescheduleMaintenanceAsync()} .
     *
     * @example samples/V1/SqlInstancesServiceClient/reschedule_maintenance.php
     *
     * @param SqlInstancesRescheduleMaintenanceRequest $request     A request to house fields associated with the call.
     * @param array                                    $callOptions {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return Operation
     *
     * @throws ApiException Thrown if the API call fails.
     */
    public function rescheduleMaintenance(SqlInstancesRescheduleMaintenanceRequest $request, array $callOptions = []): Operation
    {
        return $this->startApiCall('RescheduleMaintenance', $request, $callOptions)->wait();
    }

    /**
     * Reset Replica Size to primary instance disk size.
     *
     * The async variant is {@see self::resetReplicaSizeAsync()} .
     *
     * @example samples/V1/SqlInstancesServiceClient/reset_replica_size.php
     *
     * @param SqlInstancesResetReplicaSizeRequest $request     A request to house fields associated with the call.
     * @param array                               $callOptions {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return Operation
     *
     * @throws ApiException Thrown if the API call fails.
     */
    public function resetReplicaSize(SqlInstancesResetReplicaSizeRequest $request, array $callOptions = []): Operation
    {
        return $this->startApiCall('ResetReplicaSize', $request, $callOptions)->wait();
    }

    /**
     * Deletes all client certificates and generates a new server SSL certificate
     * for the instance.
     *
     * The async variant is {@see self::resetSslConfigAsync()} .
     *
     * @example samples/V1/SqlInstancesServiceClient/reset_ssl_config.php
     *
     * @param SqlInstancesResetSslConfigRequest $request     A request to house fields associated with the call.
     * @param array                             $callOptions {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return Operation
     *
     * @throws ApiException Thrown if the API call fails.
     */
    public function resetSslConfig(SqlInstancesResetSslConfigRequest $request, array $callOptions = []): Operation
    {
        return $this->startApiCall('ResetSslConfig', $request, $callOptions)->wait();
    }

    /**
     * Restarts a Cloud SQL instance.
     *
     * The async variant is {@see self::restartAsync()} .
     *
     * @example samples/V1/SqlInstancesServiceClient/restart.php
     *
     * @param SqlInstancesRestartRequest $request     A request to house fields associated with the call.
     * @param array                      $callOptions {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return Operation
     *
     * @throws ApiException Thrown if the API call fails.
     */
    public function restart(SqlInstancesRestartRequest $request, array $callOptions = []): Operation
    {
        return $this->startApiCall('Restart', $request, $callOptions)->wait();
    }

    /**
     * Restores a backup of a Cloud SQL instance. Using this operation might cause
     * your instance to restart.
     *
     * The async variant is {@see self::restoreBackupAsync()} .
     *
     * @example samples/V1/SqlInstancesServiceClient/restore_backup.php
     *
     * @param SqlInstancesRestoreBackupRequest $request     A request to house fields associated with the call.
     * @param array                            $callOptions {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return Operation
     *
     * @throws ApiException Thrown if the API call fails.
     */
    public function restoreBackup(SqlInstancesRestoreBackupRequest $request, array $callOptions = []): Operation
    {
        return $this->startApiCall('RestoreBackup', $request, $callOptions)->wait();
    }

    /**
     * Rotates the server certificate to one signed by the Certificate Authority
     * (CA) version previously added with the addServerCA method.
     *
     * The async variant is {@see self::rotateServerCaAsync()} .
     *
     * @example samples/V1/SqlInstancesServiceClient/rotate_server_ca.php
     *
     * @param SqlInstancesRotateServerCaRequest $request     A request to house fields associated with the call.
     * @param array                             $callOptions {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return Operation
     *
     * @throws ApiException Thrown if the API call fails.
     */
    public function rotateServerCa(SqlInstancesRotateServerCaRequest $request, array $callOptions = []): Operation
    {
        return $this->startApiCall('RotateServerCa', $request, $callOptions)->wait();
    }

    /**
     * Start External primary instance migration.
     *
     * The async variant is {@see self::startExternalSyncAsync()} .
     *
     * @example samples/V1/SqlInstancesServiceClient/start_external_sync.php
     *
     * @param SqlInstancesStartExternalSyncRequest $request     A request to house fields associated with the call.
     * @param array                                $callOptions {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return Operation
     *
     * @throws ApiException Thrown if the API call fails.
     */
    public function startExternalSync(SqlInstancesStartExternalSyncRequest $request, array $callOptions = []): Operation
    {
        return $this->startApiCall('StartExternalSync', $request, $callOptions)->wait();
    }

    /**
     * Starts the replication in the read replica instance.
     *
     * The async variant is {@see self::startReplicaAsync()} .
     *
     * @example samples/V1/SqlInstancesServiceClient/start_replica.php
     *
     * @param SqlInstancesStartReplicaRequest $request     A request to house fields associated with the call.
     * @param array                           $callOptions {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return Operation
     *
     * @throws ApiException Thrown if the API call fails.
     */
    public function startReplica(SqlInstancesStartReplicaRequest $request, array $callOptions = []): Operation
    {
        return $this->startApiCall('StartReplica', $request, $callOptions)->wait();
    }

    /**
     * Stops the replication in the read replica instance.
     *
     * The async variant is {@see self::stopReplicaAsync()} .
     *
     * @example samples/V1/SqlInstancesServiceClient/stop_replica.php
     *
     * @param SqlInstancesStopReplicaRequest $request     A request to house fields associated with the call.
     * @param array                          $callOptions {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return Operation
     *
     * @throws ApiException Thrown if the API call fails.
     */
    public function stopReplica(SqlInstancesStopReplicaRequest $request, array $callOptions = []): Operation
    {
        return $this->startApiCall('StopReplica', $request, $callOptions)->wait();
    }

    /**
     * Truncate MySQL general and slow query log tables
     * MySQL only.
     *
     * The async variant is {@see self::truncateLogAsync()} .
     *
     * @example samples/V1/SqlInstancesServiceClient/truncate_log.php
     *
     * @param SqlInstancesTruncateLogRequest $request     A request to house fields associated with the call.
     * @param array                          $callOptions {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return Operation
     *
     * @throws ApiException Thrown if the API call fails.
     */
    public function truncateLog(SqlInstancesTruncateLogRequest $request, array $callOptions = []): Operation
    {
        return $this->startApiCall('TruncateLog', $request, $callOptions)->wait();
    }

    /**
     * Updates settings of a Cloud SQL instance. Using this operation might cause
     * your instance to restart.
     *
     * The async variant is {@see self::updateAsync()} .
     *
     * @example samples/V1/SqlInstancesServiceClient/update.php
     *
     * @param SqlInstancesUpdateRequest $request     A request to house fields associated with the call.
     * @param array                     $callOptions {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return Operation
     *
     * @throws ApiException Thrown if the API call fails.
     */
    public function update(SqlInstancesUpdateRequest $request, array $callOptions = []): Operation
    {
        return $this->startApiCall('Update', $request, $callOptions)->wait();
    }

    /**
     * Verify External primary instance external sync settings.
     *
     * The async variant is {@see self::verifyExternalSyncSettingsAsync()} .
     *
     * @example samples/V1/SqlInstancesServiceClient/verify_external_sync_settings.php
     *
     * @param SqlInstancesVerifyExternalSyncSettingsRequest $request     A request to house fields associated with the call.
     * @param array                                         $callOptions {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return SqlInstancesVerifyExternalSyncSettingsResponse
     *
     * @throws ApiException Thrown if the API call fails.
     */
    public function verifyExternalSyncSettings(SqlInstancesVerifyExternalSyncSettingsRequest $request, array $callOptions = []): SqlInstancesVerifyExternalSyncSettingsResponse
    {
        return $this->startApiCall('VerifyExternalSyncSettings', $request, $callOptions)->wait();
    }
}
