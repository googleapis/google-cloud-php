<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/cloud/aiplatform/v1/tool.proto

namespace Google\Cloud\AIPlatform\V1\Tool;

use UnexpectedValueException;

/**
 * These are available confidence level user can set to block malicious urls
 * with chosen confidence and above. For understanding different confidence of
 * webrisk, please refer to
 * https://cloud.google.com/web-risk/docs/reference/rpc/google.cloud.webrisk.v1eap1#confidencelevel
 *
 * Protobuf type <code>google.cloud.aiplatform.v1.Tool.PhishBlockThreshold</code>
 */
class PhishBlockThreshold
{
    /**
     * Defaults to unspecified.
     *
     * Generated from protobuf enum <code>PHISH_BLOCK_THRESHOLD_UNSPECIFIED = 0;</code>
     */
    const PHISH_BLOCK_THRESHOLD_UNSPECIFIED = 0;
    /**
     * Blocks Low and above confidence URL that is risky.
     *
     * Generated from protobuf enum <code>BLOCK_LOW_AND_ABOVE = 30;</code>
     */
    const BLOCK_LOW_AND_ABOVE = 30;
    /**
     * Blocks Medium and above confidence URL that is risky.
     *
     * Generated from protobuf enum <code>BLOCK_MEDIUM_AND_ABOVE = 40;</code>
     */
    const BLOCK_MEDIUM_AND_ABOVE = 40;
    /**
     * Blocks High and above confidence URL that is risky.
     *
     * Generated from protobuf enum <code>BLOCK_HIGH_AND_ABOVE = 50;</code>
     */
    const BLOCK_HIGH_AND_ABOVE = 50;
    /**
     * Blocks Higher and above confidence URL that is risky.
     *
     * Generated from protobuf enum <code>BLOCK_HIGHER_AND_ABOVE = 55;</code>
     */
    const BLOCK_HIGHER_AND_ABOVE = 55;
    /**
     * Blocks Very high and above confidence URL that is risky.
     *
     * Generated from protobuf enum <code>BLOCK_VERY_HIGH_AND_ABOVE = 60;</code>
     */
    const BLOCK_VERY_HIGH_AND_ABOVE = 60;
    /**
     * Blocks Extremely high confidence URL that is risky.
     *
     * Generated from protobuf enum <code>BLOCK_ONLY_EXTREMELY_HIGH = 100;</code>
     */
    const BLOCK_ONLY_EXTREMELY_HIGH = 100;

    private static $valueToName = [
        self::PHISH_BLOCK_THRESHOLD_UNSPECIFIED => 'PHISH_BLOCK_THRESHOLD_UNSPECIFIED',
        self::BLOCK_LOW_AND_ABOVE => 'BLOCK_LOW_AND_ABOVE',
        self::BLOCK_MEDIUM_AND_ABOVE => 'BLOCK_MEDIUM_AND_ABOVE',
        self::BLOCK_HIGH_AND_ABOVE => 'BLOCK_HIGH_AND_ABOVE',
        self::BLOCK_HIGHER_AND_ABOVE => 'BLOCK_HIGHER_AND_ABOVE',
        self::BLOCK_VERY_HIGH_AND_ABOVE => 'BLOCK_VERY_HIGH_AND_ABOVE',
        self::BLOCK_ONLY_EXTREMELY_HIGH => 'BLOCK_ONLY_EXTREMELY_HIGH',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(PhishBlockThreshold::class, \Google\Cloud\AIPlatform\V1\Tool_PhishBlockThreshold::class);

