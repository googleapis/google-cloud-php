<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/cloud/aiplatform/v1/vertex_rag_data_service.proto

namespace Google\Cloud\AIPlatform\V1;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Response message for
 * [VertexRagDataService.ImportRagFiles][google.cloud.aiplatform.v1.VertexRagDataService.ImportRagFiles].
 *
 * Generated from protobuf message <code>google.cloud.aiplatform.v1.ImportRagFilesResponse</code>
 */
class ImportRagFilesResponse extends \Google\Protobuf\Internal\Message
{
    /**
     * The number of RagFiles that had been imported into the RagCorpus.
     *
     * Generated from protobuf field <code>int64 imported_rag_files_count = 1;</code>
     */
    protected $imported_rag_files_count = 0;
    /**
     * The number of RagFiles that had failed while importing into the RagCorpus.
     *
     * Generated from protobuf field <code>int64 failed_rag_files_count = 2;</code>
     */
    protected $failed_rag_files_count = 0;
    /**
     * The number of RagFiles that was skipped while importing into the RagCorpus.
     *
     * Generated from protobuf field <code>int64 skipped_rag_files_count = 3;</code>
     */
    protected $skipped_rag_files_count = 0;
    protected $partial_failure_sink;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $partial_failures_gcs_path
     *           The Google Cloud Storage path into which the partial failures were
     *           written.
     *     @type string $partial_failures_bigquery_table
     *           The BigQuery table into which the partial failures were written.
     *     @type int|string $imported_rag_files_count
     *           The number of RagFiles that had been imported into the RagCorpus.
     *     @type int|string $failed_rag_files_count
     *           The number of RagFiles that had failed while importing into the RagCorpus.
     *     @type int|string $skipped_rag_files_count
     *           The number of RagFiles that was skipped while importing into the RagCorpus.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Google\Cloud\Aiplatform\V1\VertexRagDataService::initOnce();
        parent::__construct($data);
    }

    /**
     * The Google Cloud Storage path into which the partial failures were
     * written.
     *
     * Generated from protobuf field <code>string partial_failures_gcs_path = 4;</code>
     * @return string
     */
    public function getPartialFailuresGcsPath()
    {
        return $this->readOneof(4);
    }

    public function hasPartialFailuresGcsPath()
    {
        return $this->hasOneof(4);
    }

    /**
     * The Google Cloud Storage path into which the partial failures were
     * written.
     *
     * Generated from protobuf field <code>string partial_failures_gcs_path = 4;</code>
     * @param string $var
     * @return $this
     */
    public function setPartialFailuresGcsPath($var)
    {
        GPBUtil::checkString($var, True);
        $this->writeOneof(4, $var);

        return $this;
    }

    /**
     * The BigQuery table into which the partial failures were written.
     *
     * Generated from protobuf field <code>string partial_failures_bigquery_table = 5;</code>
     * @return string
     */
    public function getPartialFailuresBigqueryTable()
    {
        return $this->readOneof(5);
    }

    public function hasPartialFailuresBigqueryTable()
    {
        return $this->hasOneof(5);
    }

    /**
     * The BigQuery table into which the partial failures were written.
     *
     * Generated from protobuf field <code>string partial_failures_bigquery_table = 5;</code>
     * @param string $var
     * @return $this
     */
    public function setPartialFailuresBigqueryTable($var)
    {
        GPBUtil::checkString($var, True);
        $this->writeOneof(5, $var);

        return $this;
    }

    /**
     * The number of RagFiles that had been imported into the RagCorpus.
     *
     * Generated from protobuf field <code>int64 imported_rag_files_count = 1;</code>
     * @return int|string
     */
    public function getImportedRagFilesCount()
    {
        return $this->imported_rag_files_count;
    }

    /**
     * The number of RagFiles that had been imported into the RagCorpus.
     *
     * Generated from protobuf field <code>int64 imported_rag_files_count = 1;</code>
     * @param int|string $var
     * @return $this
     */
    public function setImportedRagFilesCount($var)
    {
        GPBUtil::checkInt64($var);
        $this->imported_rag_files_count = $var;

        return $this;
    }

    /**
     * The number of RagFiles that had failed while importing into the RagCorpus.
     *
     * Generated from protobuf field <code>int64 failed_rag_files_count = 2;</code>
     * @return int|string
     */
    public function getFailedRagFilesCount()
    {
        return $this->failed_rag_files_count;
    }

    /**
     * The number of RagFiles that had failed while importing into the RagCorpus.
     *
     * Generated from protobuf field <code>int64 failed_rag_files_count = 2;</code>
     * @param int|string $var
     * @return $this
     */
    public function setFailedRagFilesCount($var)
    {
        GPBUtil::checkInt64($var);
        $this->failed_rag_files_count = $var;

        return $this;
    }

    /**
     * The number of RagFiles that was skipped while importing into the RagCorpus.
     *
     * Generated from protobuf field <code>int64 skipped_rag_files_count = 3;</code>
     * @return int|string
     */
    public function getSkippedRagFilesCount()
    {
        return $this->skipped_rag_files_count;
    }

    /**
     * The number of RagFiles that was skipped while importing into the RagCorpus.
     *
     * Generated from protobuf field <code>int64 skipped_rag_files_count = 3;</code>
     * @param int|string $var
     * @return $this
     */
    public function setSkippedRagFilesCount($var)
    {
        GPBUtil::checkInt64($var);
        $this->skipped_rag_files_count = $var;

        return $this;
    }

    /**
     * @return string
     */
    public function getPartialFailureSink()
    {
        return $this->whichOneof("partial_failure_sink");
    }

}

