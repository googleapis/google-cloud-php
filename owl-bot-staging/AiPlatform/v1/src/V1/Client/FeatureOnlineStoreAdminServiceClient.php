<?php
/*
 * Copyright 2023 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * GENERATED CODE WARNING
 * Generated by gapic-generator-php from the file
 * https://github.com/googleapis/googleapis/blob/master/google/cloud/aiplatform/v1/feature_online_store_admin_service.proto
 * Updates to the above are reflected here through a refresh process.
 */

namespace Google\Cloud\AIPlatform\V1\Client;

use Google\ApiCore\ApiException;
use Google\ApiCore\CredentialsWrapper;
use Google\ApiCore\GapicClientTrait;
use Google\ApiCore\LongRunning\OperationsClient;
use Google\ApiCore\OperationResponse;
use Google\ApiCore\PagedListResponse;
use Google\ApiCore\ResourceHelperTrait;
use Google\ApiCore\RetrySettings;
use Google\ApiCore\Transport\TransportInterface;
use Google\ApiCore\ValidationException;
use Google\Auth\FetchAuthTokenInterface;
use Google\Cloud\AIPlatform\V1\CreateFeatureOnlineStoreRequest;
use Google\Cloud\AIPlatform\V1\CreateFeatureViewRequest;
use Google\Cloud\AIPlatform\V1\DeleteFeatureOnlineStoreRequest;
use Google\Cloud\AIPlatform\V1\DeleteFeatureViewRequest;
use Google\Cloud\AIPlatform\V1\FeatureOnlineStore;
use Google\Cloud\AIPlatform\V1\FeatureView;
use Google\Cloud\AIPlatform\V1\FeatureViewSync;
use Google\Cloud\AIPlatform\V1\GetFeatureOnlineStoreRequest;
use Google\Cloud\AIPlatform\V1\GetFeatureViewRequest;
use Google\Cloud\AIPlatform\V1\GetFeatureViewSyncRequest;
use Google\Cloud\AIPlatform\V1\ListFeatureOnlineStoresRequest;
use Google\Cloud\AIPlatform\V1\ListFeatureViewSyncsRequest;
use Google\Cloud\AIPlatform\V1\ListFeatureViewsRequest;
use Google\Cloud\AIPlatform\V1\SyncFeatureViewRequest;
use Google\Cloud\AIPlatform\V1\SyncFeatureViewResponse;
use Google\Cloud\AIPlatform\V1\UpdateFeatureOnlineStoreRequest;
use Google\Cloud\AIPlatform\V1\UpdateFeatureViewRequest;
use Google\Cloud\Iam\V1\GetIamPolicyRequest;
use Google\Cloud\Iam\V1\Policy;
use Google\Cloud\Iam\V1\SetIamPolicyRequest;
use Google\Cloud\Iam\V1\TestIamPermissionsRequest;
use Google\Cloud\Iam\V1\TestIamPermissionsResponse;
use Google\Cloud\Location\GetLocationRequest;
use Google\Cloud\Location\ListLocationsRequest;
use Google\Cloud\Location\Location;
use Google\LongRunning\Operation;
use GuzzleHttp\Promise\PromiseInterface;

/**
 * Service Description: The service that handles CRUD and List for resources for
 * FeatureOnlineStore.
 *
 * This class provides the ability to make remote calls to the backing service through method
 * calls that map to API methods.
 *
 * Many parameters require resource names to be formatted in a particular way. To
 * assist with these names, this class includes a format method for each type of
 * name, and additionally a parseName method to extract the individual identifiers
 * contained within formatted names that are returned by the API.
 *
 * @method PromiseInterface createFeatureOnlineStoreAsync(CreateFeatureOnlineStoreRequest $request, array $optionalArgs = [])
 * @method PromiseInterface createFeatureViewAsync(CreateFeatureViewRequest $request, array $optionalArgs = [])
 * @method PromiseInterface deleteFeatureOnlineStoreAsync(DeleteFeatureOnlineStoreRequest $request, array $optionalArgs = [])
 * @method PromiseInterface deleteFeatureViewAsync(DeleteFeatureViewRequest $request, array $optionalArgs = [])
 * @method PromiseInterface getFeatureOnlineStoreAsync(GetFeatureOnlineStoreRequest $request, array $optionalArgs = [])
 * @method PromiseInterface getFeatureViewAsync(GetFeatureViewRequest $request, array $optionalArgs = [])
 * @method PromiseInterface getFeatureViewSyncAsync(GetFeatureViewSyncRequest $request, array $optionalArgs = [])
 * @method PromiseInterface listFeatureOnlineStoresAsync(ListFeatureOnlineStoresRequest $request, array $optionalArgs = [])
 * @method PromiseInterface listFeatureViewSyncsAsync(ListFeatureViewSyncsRequest $request, array $optionalArgs = [])
 * @method PromiseInterface listFeatureViewsAsync(ListFeatureViewsRequest $request, array $optionalArgs = [])
 * @method PromiseInterface syncFeatureViewAsync(SyncFeatureViewRequest $request, array $optionalArgs = [])
 * @method PromiseInterface updateFeatureOnlineStoreAsync(UpdateFeatureOnlineStoreRequest $request, array $optionalArgs = [])
 * @method PromiseInterface updateFeatureViewAsync(UpdateFeatureViewRequest $request, array $optionalArgs = [])
 * @method PromiseInterface getLocationAsync(GetLocationRequest $request, array $optionalArgs = [])
 * @method PromiseInterface listLocationsAsync(ListLocationsRequest $request, array $optionalArgs = [])
 * @method PromiseInterface getIamPolicyAsync(GetIamPolicyRequest $request, array $optionalArgs = [])
 * @method PromiseInterface setIamPolicyAsync(SetIamPolicyRequest $request, array $optionalArgs = [])
 * @method PromiseInterface testIamPermissionsAsync(TestIamPermissionsRequest $request, array $optionalArgs = [])
 */
final class FeatureOnlineStoreAdminServiceClient
{
    use GapicClientTrait;
    use ResourceHelperTrait;

    /** The name of the service. */
    private const SERVICE_NAME = 'google.cloud.aiplatform.v1.FeatureOnlineStoreAdminService';

    /**
     * The default address of the service.
     *
     * @deprecated SERVICE_ADDRESS_TEMPLATE should be used instead.
     */
    private const SERVICE_ADDRESS = 'aiplatform.googleapis.com';

    /** The address template of the service. */
    private const SERVICE_ADDRESS_TEMPLATE = 'aiplatform.UNIVERSE_DOMAIN';

    /** The default port of the service. */
    private const DEFAULT_SERVICE_PORT = 443;

    /** The name of the code generator, to be included in the agent header. */
    private const CODEGEN_NAME = 'gapic';

    /** The default scopes required by the service. */
    public static $serviceScopes = [
        'https://www.googleapis.com/auth/cloud-platform',
    ];

    private $operationsClient;

    private static function getClientDefaults()
    {
        return [
            'serviceName' => self::SERVICE_NAME,
            'apiEndpoint' => self::SERVICE_ADDRESS . ':' . self::DEFAULT_SERVICE_PORT,
            'clientConfig' => __DIR__ . '/../resources/feature_online_store_admin_service_client_config.json',
            'descriptorsConfigPath' => __DIR__ . '/../resources/feature_online_store_admin_service_descriptor_config.php',
            'gcpApiConfigPath' => __DIR__ . '/../resources/feature_online_store_admin_service_grpc_config.json',
            'credentialsConfig' => [
                'defaultScopes' => self::$serviceScopes,
            ],
            'transportConfig' => [
                'rest' => [
                    'restClientConfigPath' => __DIR__ . '/../resources/feature_online_store_admin_service_rest_client_config.php',
                ],
            ],
        ];
    }

    /**
     * Return an OperationsClient object with the same endpoint as $this.
     *
     * @return OperationsClient
     */
    public function getOperationsClient()
    {
        return $this->operationsClient;
    }

    /**
     * Resume an existing long running operation that was previously started by a long
     * running API method. If $methodName is not provided, or does not match a long
     * running API method, then the operation can still be resumed, but the
     * OperationResponse object will not deserialize the final response.
     *
     * @param string $operationName The name of the long running operation
     * @param string $methodName    The name of the method used to start the operation
     *
     * @return OperationResponse
     */
    public function resumeOperation($operationName, $methodName = null)
    {
        $options = isset($this->descriptors[$methodName]['longRunning']) ? $this->descriptors[$methodName]['longRunning'] : [];
        $operation = new OperationResponse($operationName, $this->getOperationsClient(), $options);
        $operation->reload();
        return $operation;
    }

    /**
     * Formats a string containing the fully-qualified path to represent a
     * feature_online_store resource.
     *
     * @param string $project
     * @param string $location
     * @param string $featureOnlineStore
     *
     * @return string The formatted feature_online_store resource.
     */
    public static function featureOnlineStoreName(string $project, string $location, string $featureOnlineStore): string
    {
        return self::getPathTemplate('featureOnlineStore')->render([
            'project' => $project,
            'location' => $location,
            'feature_online_store' => $featureOnlineStore,
        ]);
    }

    /**
     * Formats a string containing the fully-qualified path to represent a feature_view
     * resource.
     *
     * @param string $project
     * @param string $location
     * @param string $featureOnlineStore
     * @param string $featureView
     *
     * @return string The formatted feature_view resource.
     */
    public static function featureViewName(string $project, string $location, string $featureOnlineStore, string $featureView): string
    {
        return self::getPathTemplate('featureView')->render([
            'project' => $project,
            'location' => $location,
            'feature_online_store' => $featureOnlineStore,
            'feature_view' => $featureView,
        ]);
    }

    /**
     * Formats a string containing the fully-qualified path to represent a
     * feature_view_sync resource.
     *
     * @param string $project
     * @param string $location
     * @param string $featureOnlineStore
     * @param string $featureView
     *
     * @return string The formatted feature_view_sync resource.
     */
    public static function featureViewSyncName(string $project, string $location, string $featureOnlineStore, string $featureView): string
    {
        return self::getPathTemplate('featureViewSync')->render([
            'project' => $project,
            'location' => $location,
            'feature_online_store' => $featureOnlineStore,
            'feature_view' => $featureView,
        ]);
    }

    /**
     * Formats a string containing the fully-qualified path to represent a location
     * resource.
     *
     * @param string $project
     * @param string $location
     *
     * @return string The formatted location resource.
     */
    public static function locationName(string $project, string $location): string
    {
        return self::getPathTemplate('location')->render([
            'project' => $project,
            'location' => $location,
        ]);
    }

    /**
     * Parses a formatted name string and returns an associative array of the components in the name.
     * The following name formats are supported:
     * Template: Pattern
     * - featureOnlineStore: projects/{project}/locations/{location}/featureOnlineStores/{feature_online_store}
     * - featureView: projects/{project}/locations/{location}/featureOnlineStores/{feature_online_store}/featureViews/{feature_view}
     * - featureViewSync: projects/{project}/locations/{location}/featureOnlineStores/{feature_online_store}/featureViews/{feature_view}/featureViewSyncs/feature_view_sync
     * - location: projects/{project}/locations/{location}
     *
     * The optional $template argument can be supplied to specify a particular pattern,
     * and must match one of the templates listed above. If no $template argument is
     * provided, or if the $template argument does not match one of the templates
     * listed, then parseName will check each of the supported templates, and return
     * the first match.
     *
     * @param string $formattedName The formatted name string
     * @param string $template      Optional name of template to match
     *
     * @return array An associative array from name component IDs to component values.
     *
     * @throws ValidationException If $formattedName could not be matched.
     */
    public static function parseName(string $formattedName, string $template = null): array
    {
        return self::parseFormattedName($formattedName, $template);
    }

    /**
     * Constructor.
     *
     * @param array $options {
     *     Optional. Options for configuring the service API wrapper.
     *
     *     @type string $apiEndpoint
     *           The address of the API remote host. May optionally include the port, formatted
     *           as "<uri>:<port>". Default 'aiplatform.googleapis.com:443'.
     *     @type string|array|FetchAuthTokenInterface|CredentialsWrapper $credentials
     *           The credentials to be used by the client to authorize API calls. This option
     *           accepts either a path to a credentials file, or a decoded credentials file as a
     *           PHP array.
     *           *Advanced usage*: In addition, this option can also accept a pre-constructed
     *           {@see \Google\Auth\FetchAuthTokenInterface} object or
     *           {@see \Google\ApiCore\CredentialsWrapper} object. Note that when one of these
     *           objects are provided, any settings in $credentialsConfig will be ignored.
     *     @type array $credentialsConfig
     *           Options used to configure credentials, including auth token caching, for the
     *           client. For a full list of supporting configuration options, see
     *           {@see \Google\ApiCore\CredentialsWrapper::build()} .
     *     @type bool $disableRetries
     *           Determines whether or not retries defined by the client configuration should be
     *           disabled. Defaults to `false`.
     *     @type string|array $clientConfig
     *           Client method configuration, including retry settings. This option can be either
     *           a path to a JSON file, or a PHP array containing the decoded JSON data. By
     *           default this settings points to the default client config file, which is
     *           provided in the resources folder.
     *     @type string|TransportInterface $transport
     *           The transport used for executing network requests. May be either the string
     *           `rest` or `grpc`. Defaults to `grpc` if gRPC support is detected on the system.
     *           *Advanced usage*: Additionally, it is possible to pass in an already
     *           instantiated {@see \Google\ApiCore\Transport\TransportInterface} object. Note
     *           that when this object is provided, any settings in $transportConfig, and any
     *           $apiEndpoint setting, will be ignored.
     *     @type array $transportConfig
     *           Configuration options that will be used to construct the transport. Options for
     *           each supported transport type should be passed in a key for that transport. For
     *           example:
     *           $transportConfig = [
     *               'grpc' => [...],
     *               'rest' => [...],
     *           ];
     *           See the {@see \Google\ApiCore\Transport\GrpcTransport::build()} and
     *           {@see \Google\ApiCore\Transport\RestTransport::build()} methods for the
     *           supported options.
     *     @type callable $clientCertSource
     *           A callable which returns the client cert as a string. This can be used to
     *           provide a certificate and private key to the transport layer for mTLS.
     * }
     *
     * @throws ValidationException
     */
    public function __construct(array $options = [])
    {
        $clientOptions = $this->buildClientOptions($options);
        $this->setClientOptions($clientOptions);
        $this->operationsClient = $this->createOperationsClient($clientOptions);
    }

    /** Handles execution of the async variants for each documented method. */
    public function __call($method, $args)
    {
        if (substr($method, -5) !== 'Async') {
            trigger_error('Call to undefined method ' . __CLASS__ . "::$method()", E_USER_ERROR);
        }

        array_unshift($args, substr($method, 0, -5));
        return call_user_func_array([$this, 'startAsyncCall'], $args);
    }

    /**
     * Creates a new FeatureOnlineStore in a given project and location.
     *
     * The async variant is
     * {@see FeatureOnlineStoreAdminServiceClient::createFeatureOnlineStoreAsync()} .
     *
     * @example samples/V1/FeatureOnlineStoreAdminServiceClient/create_feature_online_store.php
     *
     * @param CreateFeatureOnlineStoreRequest $request     A request to house fields associated with the call.
     * @param array                           $callOptions {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return OperationResponse
     *
     * @throws ApiException Thrown if the API call fails.
     */
    public function createFeatureOnlineStore(CreateFeatureOnlineStoreRequest $request, array $callOptions = []): OperationResponse
    {
        return $this->startApiCall('CreateFeatureOnlineStore', $request, $callOptions)->wait();
    }

    /**
     * Creates a new FeatureView in a given FeatureOnlineStore.
     *
     * The async variant is
     * {@see FeatureOnlineStoreAdminServiceClient::createFeatureViewAsync()} .
     *
     * @example samples/V1/FeatureOnlineStoreAdminServiceClient/create_feature_view.php
     *
     * @param CreateFeatureViewRequest $request     A request to house fields associated with the call.
     * @param array                    $callOptions {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return OperationResponse
     *
     * @throws ApiException Thrown if the API call fails.
     */
    public function createFeatureView(CreateFeatureViewRequest $request, array $callOptions = []): OperationResponse
    {
        return $this->startApiCall('CreateFeatureView', $request, $callOptions)->wait();
    }

    /**
     * Deletes a single FeatureOnlineStore. The FeatureOnlineStore must not
     * contain any FeatureViews.
     *
     * The async variant is
     * {@see FeatureOnlineStoreAdminServiceClient::deleteFeatureOnlineStoreAsync()} .
     *
     * @example samples/V1/FeatureOnlineStoreAdminServiceClient/delete_feature_online_store.php
     *
     * @param DeleteFeatureOnlineStoreRequest $request     A request to house fields associated with the call.
     * @param array                           $callOptions {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return OperationResponse
     *
     * @throws ApiException Thrown if the API call fails.
     */
    public function deleteFeatureOnlineStore(DeleteFeatureOnlineStoreRequest $request, array $callOptions = []): OperationResponse
    {
        return $this->startApiCall('DeleteFeatureOnlineStore', $request, $callOptions)->wait();
    }

    /**
     * Deletes a single FeatureView.
     *
     * The async variant is
     * {@see FeatureOnlineStoreAdminServiceClient::deleteFeatureViewAsync()} .
     *
     * @example samples/V1/FeatureOnlineStoreAdminServiceClient/delete_feature_view.php
     *
     * @param DeleteFeatureViewRequest $request     A request to house fields associated with the call.
     * @param array                    $callOptions {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return OperationResponse
     *
     * @throws ApiException Thrown if the API call fails.
     */
    public function deleteFeatureView(DeleteFeatureViewRequest $request, array $callOptions = []): OperationResponse
    {
        return $this->startApiCall('DeleteFeatureView', $request, $callOptions)->wait();
    }

    /**
     * Gets details of a single FeatureOnlineStore.
     *
     * The async variant is
     * {@see FeatureOnlineStoreAdminServiceClient::getFeatureOnlineStoreAsync()} .
     *
     * @example samples/V1/FeatureOnlineStoreAdminServiceClient/get_feature_online_store.php
     *
     * @param GetFeatureOnlineStoreRequest $request     A request to house fields associated with the call.
     * @param array                        $callOptions {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return FeatureOnlineStore
     *
     * @throws ApiException Thrown if the API call fails.
     */
    public function getFeatureOnlineStore(GetFeatureOnlineStoreRequest $request, array $callOptions = []): FeatureOnlineStore
    {
        return $this->startApiCall('GetFeatureOnlineStore', $request, $callOptions)->wait();
    }

    /**
     * Gets details of a single FeatureView.
     *
     * The async variant is
     * {@see FeatureOnlineStoreAdminServiceClient::getFeatureViewAsync()} .
     *
     * @example samples/V1/FeatureOnlineStoreAdminServiceClient/get_feature_view.php
     *
     * @param GetFeatureViewRequest $request     A request to house fields associated with the call.
     * @param array                 $callOptions {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return FeatureView
     *
     * @throws ApiException Thrown if the API call fails.
     */
    public function getFeatureView(GetFeatureViewRequest $request, array $callOptions = []): FeatureView
    {
        return $this->startApiCall('GetFeatureView', $request, $callOptions)->wait();
    }

    /**
     * Gets details of a single FeatureViewSync.
     *
     * The async variant is
     * {@see FeatureOnlineStoreAdminServiceClient::getFeatureViewSyncAsync()} .
     *
     * @example samples/V1/FeatureOnlineStoreAdminServiceClient/get_feature_view_sync.php
     *
     * @param GetFeatureViewSyncRequest $request     A request to house fields associated with the call.
     * @param array                     $callOptions {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return FeatureViewSync
     *
     * @throws ApiException Thrown if the API call fails.
     */
    public function getFeatureViewSync(GetFeatureViewSyncRequest $request, array $callOptions = []): FeatureViewSync
    {
        return $this->startApiCall('GetFeatureViewSync', $request, $callOptions)->wait();
    }

    /**
     * Lists FeatureOnlineStores in a given project and location.
     *
     * The async variant is
     * {@see FeatureOnlineStoreAdminServiceClient::listFeatureOnlineStoresAsync()} .
     *
     * @example samples/V1/FeatureOnlineStoreAdminServiceClient/list_feature_online_stores.php
     *
     * @param ListFeatureOnlineStoresRequest $request     A request to house fields associated with the call.
     * @param array                          $callOptions {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return PagedListResponse
     *
     * @throws ApiException Thrown if the API call fails.
     */
    public function listFeatureOnlineStores(ListFeatureOnlineStoresRequest $request, array $callOptions = []): PagedListResponse
    {
        return $this->startApiCall('ListFeatureOnlineStores', $request, $callOptions);
    }

    /**
     * Lists FeatureViewSyncs in a given FeatureView.
     *
     * The async variant is
     * {@see FeatureOnlineStoreAdminServiceClient::listFeatureViewSyncsAsync()} .
     *
     * @example samples/V1/FeatureOnlineStoreAdminServiceClient/list_feature_view_syncs.php
     *
     * @param ListFeatureViewSyncsRequest $request     A request to house fields associated with the call.
     * @param array                       $callOptions {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return PagedListResponse
     *
     * @throws ApiException Thrown if the API call fails.
     */
    public function listFeatureViewSyncs(ListFeatureViewSyncsRequest $request, array $callOptions = []): PagedListResponse
    {
        return $this->startApiCall('ListFeatureViewSyncs', $request, $callOptions);
    }

    /**
     * Lists FeatureViews in a given FeatureOnlineStore.
     *
     * The async variant is
     * {@see FeatureOnlineStoreAdminServiceClient::listFeatureViewsAsync()} .
     *
     * @example samples/V1/FeatureOnlineStoreAdminServiceClient/list_feature_views.php
     *
     * @param ListFeatureViewsRequest $request     A request to house fields associated with the call.
     * @param array                   $callOptions {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return PagedListResponse
     *
     * @throws ApiException Thrown if the API call fails.
     */
    public function listFeatureViews(ListFeatureViewsRequest $request, array $callOptions = []): PagedListResponse
    {
        return $this->startApiCall('ListFeatureViews', $request, $callOptions);
    }

    /**
     * Triggers on-demand sync for the FeatureView.
     *
     * The async variant is
     * {@see FeatureOnlineStoreAdminServiceClient::syncFeatureViewAsync()} .
     *
     * @example samples/V1/FeatureOnlineStoreAdminServiceClient/sync_feature_view.php
     *
     * @param SyncFeatureViewRequest $request     A request to house fields associated with the call.
     * @param array                  $callOptions {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return SyncFeatureViewResponse
     *
     * @throws ApiException Thrown if the API call fails.
     */
    public function syncFeatureView(SyncFeatureViewRequest $request, array $callOptions = []): SyncFeatureViewResponse
    {
        return $this->startApiCall('SyncFeatureView', $request, $callOptions)->wait();
    }

    /**
     * Updates the parameters of a single FeatureOnlineStore.
     *
     * The async variant is
     * {@see FeatureOnlineStoreAdminServiceClient::updateFeatureOnlineStoreAsync()} .
     *
     * @example samples/V1/FeatureOnlineStoreAdminServiceClient/update_feature_online_store.php
     *
     * @param UpdateFeatureOnlineStoreRequest $request     A request to house fields associated with the call.
     * @param array                           $callOptions {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return OperationResponse
     *
     * @throws ApiException Thrown if the API call fails.
     */
    public function updateFeatureOnlineStore(UpdateFeatureOnlineStoreRequest $request, array $callOptions = []): OperationResponse
    {
        return $this->startApiCall('UpdateFeatureOnlineStore', $request, $callOptions)->wait();
    }

    /**
     * Updates the parameters of a single FeatureView.
     *
     * The async variant is
     * {@see FeatureOnlineStoreAdminServiceClient::updateFeatureViewAsync()} .
     *
     * @example samples/V1/FeatureOnlineStoreAdminServiceClient/update_feature_view.php
     *
     * @param UpdateFeatureViewRequest $request     A request to house fields associated with the call.
     * @param array                    $callOptions {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return OperationResponse
     *
     * @throws ApiException Thrown if the API call fails.
     */
    public function updateFeatureView(UpdateFeatureViewRequest $request, array $callOptions = []): OperationResponse
    {
        return $this->startApiCall('UpdateFeatureView', $request, $callOptions)->wait();
    }

    /**
     * Gets information about a location.
     *
     * The async variant is
     * {@see FeatureOnlineStoreAdminServiceClient::getLocationAsync()} .
     *
     * @example samples/V1/FeatureOnlineStoreAdminServiceClient/get_location.php
     *
     * @param GetLocationRequest $request     A request to house fields associated with the call.
     * @param array              $callOptions {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return Location
     *
     * @throws ApiException Thrown if the API call fails.
     */
    public function getLocation(GetLocationRequest $request, array $callOptions = []): Location
    {
        return $this->startApiCall('GetLocation', $request, $callOptions)->wait();
    }

    /**
     * Lists information about the supported locations for this service.
     *
     * The async variant is
     * {@see FeatureOnlineStoreAdminServiceClient::listLocationsAsync()} .
     *
     * @example samples/V1/FeatureOnlineStoreAdminServiceClient/list_locations.php
     *
     * @param ListLocationsRequest $request     A request to house fields associated with the call.
     * @param array                $callOptions {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return PagedListResponse
     *
     * @throws ApiException Thrown if the API call fails.
     */
    public function listLocations(ListLocationsRequest $request, array $callOptions = []): PagedListResponse
    {
        return $this->startApiCall('ListLocations', $request, $callOptions);
    }

    /**
     * Gets the access control policy for a resource. Returns an empty policy
    if the resource exists and does not have a policy set.
     *
     * The async variant is
     * {@see FeatureOnlineStoreAdminServiceClient::getIamPolicyAsync()} .
     *
     * @example samples/V1/FeatureOnlineStoreAdminServiceClient/get_iam_policy.php
     *
     * @param GetIamPolicyRequest $request     A request to house fields associated with the call.
     * @param array               $callOptions {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return Policy
     *
     * @throws ApiException Thrown if the API call fails.
     */
    public function getIamPolicy(GetIamPolicyRequest $request, array $callOptions = []): Policy
    {
        return $this->startApiCall('GetIamPolicy', $request, $callOptions)->wait();
    }

    /**
     * Sets the access control policy on the specified resource. Replaces
    any existing policy.

    Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED`
    errors.
     *
     * The async variant is
     * {@see FeatureOnlineStoreAdminServiceClient::setIamPolicyAsync()} .
     *
     * @example samples/V1/FeatureOnlineStoreAdminServiceClient/set_iam_policy.php
     *
     * @param SetIamPolicyRequest $request     A request to house fields associated with the call.
     * @param array               $callOptions {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return Policy
     *
     * @throws ApiException Thrown if the API call fails.
     */
    public function setIamPolicy(SetIamPolicyRequest $request, array $callOptions = []): Policy
    {
        return $this->startApiCall('SetIamPolicy', $request, $callOptions)->wait();
    }

    /**
     * Returns permissions that a caller has on the specified resource. If the
    resource does not exist, this will return an empty set of
    permissions, not a `NOT_FOUND` error.

    Note: This operation is designed to be used for building
    permission-aware UIs and command-line tools, not for authorization
    checking. This operation may "fail open" without warning.
     *
     * The async variant is
     * {@see FeatureOnlineStoreAdminServiceClient::testIamPermissionsAsync()} .
     *
     * @example samples/V1/FeatureOnlineStoreAdminServiceClient/test_iam_permissions.php
     *
     * @param TestIamPermissionsRequest $request     A request to house fields associated with the call.
     * @param array                     $callOptions {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return TestIamPermissionsResponse
     *
     * @throws ApiException Thrown if the API call fails.
     */
    public function testIamPermissions(TestIamPermissionsRequest $request, array $callOptions = []): TestIamPermissionsResponse
    {
        return $this->startApiCall('TestIamPermissions', $request, $callOptions)->wait();
    }
}
