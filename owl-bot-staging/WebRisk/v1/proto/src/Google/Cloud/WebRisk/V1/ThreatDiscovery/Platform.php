<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/cloud/webrisk/v1/webrisk.proto

namespace Google\Cloud\WebRisk\V1\ThreatDiscovery;

use UnexpectedValueException;

/**
 * Platform types.
 *
 * Protobuf type <code>google.cloud.webrisk.v1.ThreatDiscovery.Platform</code>
 */
class Platform
{
    /**
     * Default.
     *
     * Generated from protobuf enum <code>PLATFORM_UNSPECIFIED = 0;</code>
     */
    const PLATFORM_UNSPECIFIED = 0;
    /**
     * General Android platform.
     *
     * Generated from protobuf enum <code>ANDROID = 1;</code>
     */
    const ANDROID = 1;
    /**
     * General iOS platform.
     *
     * Generated from protobuf enum <code>IOS = 2;</code>
     */
    const IOS = 2;
    /**
     * General macOS platform.
     *
     * Generated from protobuf enum <code>MACOS = 3;</code>
     */
    const MACOS = 3;
    /**
     * General Windows platform.
     *
     * Generated from protobuf enum <code>WINDOWS = 4;</code>
     */
    const WINDOWS = 4;

    private static $valueToName = [
        self::PLATFORM_UNSPECIFIED => 'PLATFORM_UNSPECIFIED',
        self::ANDROID => 'ANDROID',
        self::IOS => 'IOS',
        self::MACOS => 'MACOS',
        self::WINDOWS => 'WINDOWS',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(Platform::class, \Google\Cloud\WebRisk\V1\ThreatDiscovery_Platform::class);

