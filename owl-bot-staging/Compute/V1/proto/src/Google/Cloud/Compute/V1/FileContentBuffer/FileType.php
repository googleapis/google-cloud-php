<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/cloud/compute/v1/compute.proto

namespace Google\Cloud\Compute\V1\FileContentBuffer;

use UnexpectedValueException;

/**
 * The file type of source file.
 *
 * Protobuf type <code>google.cloud.compute.v1.FileContentBuffer.FileType</code>
 */
class FileType
{
    /**
     * A value indicating that the enum field is not set.
     *
     * Generated from protobuf enum <code>UNDEFINED_FILE_TYPE = 0;</code>
     */
    const UNDEFINED_FILE_TYPE = 0;
    /**
     * Generated from protobuf enum <code>BIN = 65767;</code>
     */
    const BIN = 65767;
    /**
     * Generated from protobuf enum <code>UNDEFINED = 137851184;</code>
     */
    const UNDEFINED = 137851184;
    /**
     * Generated from protobuf enum <code>X509 = 2674086;</code>
     */
    const X509 = 2674086;

    private static $valueToName = [
        self::UNDEFINED_FILE_TYPE => 'UNDEFINED_FILE_TYPE',
        self::BIN => 'BIN',
        self::UNDEFINED => 'UNDEFINED',
        self::X509 => 'X509',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(FileType::class, \Google\Cloud\Compute\V1\FileContentBuffer_FileType::class);

