<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/pubsub/v1/pubsub.proto

namespace Google\Cloud\PubSub\V1;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Dead lettering is done on a best effort basis. The same message might be
 * dead lettered multiple times.
 * If validation on any of the fields fails at subscription creation/updation,
 * the create/update subscription request will fail.
 *
 * Generated from protobuf message <code>google.pubsub.v1.DeadLetterPolicy</code>
 */
class DeadLetterPolicy extends \Google\Protobuf\Internal\Message
{
    /**
     * The name of the topic to which dead letter messages should be published.
     * Format is `projects/{project}/topics/{topic}`.The Cloud Pub/Sub service
     * account associated with the enclosing subscription's parent project (i.e.,
     * service-{project_number}&#64;gcp-sa-pubsub.iam.gserviceaccount.com) must have
     * permission to Publish() to this topic.
     * The operation will fail if the topic does not exist.
     * Users should ensure that there is a subscription attached to this topic
     * since messages published to a topic with no subscriptions are lost.
     *
     * Generated from protobuf field <code>string dead_letter_topic = 1;</code>
     */
    protected $dead_letter_topic = '';
    /**
     * The maximum number of delivery attempts for any message. The value must be
     * between 5 and 100.
     * The number of delivery attempts is defined as 1 + (the sum of number of
     * NACKs and number of times the acknowledgement deadline has been exceeded
     * for the message).
     * A NACK is any call to ModifyAckDeadline with a 0 deadline. Note that
     * client libraries may automatically extend ack_deadlines.
     * This field will be honored on a best effort basis.
     * If this parameter is 0, a default value of 5 is used.
     *
     * Generated from protobuf field <code>int32 max_delivery_attempts = 2;</code>
     */
    protected $max_delivery_attempts = 0;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $dead_letter_topic
     *           The name of the topic to which dead letter messages should be published.
     *           Format is `projects/{project}/topics/{topic}`.The Cloud Pub/Sub service
     *           account associated with the enclosing subscription's parent project (i.e.,
     *           service-{project_number}&#64;gcp-sa-pubsub.iam.gserviceaccount.com) must have
     *           permission to Publish() to this topic.
     *           The operation will fail if the topic does not exist.
     *           Users should ensure that there is a subscription attached to this topic
     *           since messages published to a topic with no subscriptions are lost.
     *     @type int $max_delivery_attempts
     *           The maximum number of delivery attempts for any message. The value must be
     *           between 5 and 100.
     *           The number of delivery attempts is defined as 1 + (the sum of number of
     *           NACKs and number of times the acknowledgement deadline has been exceeded
     *           for the message).
     *           A NACK is any call to ModifyAckDeadline with a 0 deadline. Note that
     *           client libraries may automatically extend ack_deadlines.
     *           This field will be honored on a best effort basis.
     *           If this parameter is 0, a default value of 5 is used.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Google\Pubsub\V1\Pubsub::initOnce();
        parent::__construct($data);
    }

    /**
     * The name of the topic to which dead letter messages should be published.
     * Format is `projects/{project}/topics/{topic}`.The Cloud Pub/Sub service
     * account associated with the enclosing subscription's parent project (i.e.,
     * service-{project_number}&#64;gcp-sa-pubsub.iam.gserviceaccount.com) must have
     * permission to Publish() to this topic.
     * The operation will fail if the topic does not exist.
     * Users should ensure that there is a subscription attached to this topic
     * since messages published to a topic with no subscriptions are lost.
     *
     * Generated from protobuf field <code>string dead_letter_topic = 1;</code>
     * @return string
     */
    public function getDeadLetterTopic()
    {
        return $this->dead_letter_topic;
    }

    /**
     * The name of the topic to which dead letter messages should be published.
     * Format is `projects/{project}/topics/{topic}`.The Cloud Pub/Sub service
     * account associated with the enclosing subscription's parent project (i.e.,
     * service-{project_number}&#64;gcp-sa-pubsub.iam.gserviceaccount.com) must have
     * permission to Publish() to this topic.
     * The operation will fail if the topic does not exist.
     * Users should ensure that there is a subscription attached to this topic
     * since messages published to a topic with no subscriptions are lost.
     *
     * Generated from protobuf field <code>string dead_letter_topic = 1;</code>
     * @param string $var
     * @return $this
     */
    public function setDeadLetterTopic($var)
    {
        GPBUtil::checkString($var, True);
        $this->dead_letter_topic = $var;

        return $this;
    }

    /**
     * The maximum number of delivery attempts for any message. The value must be
     * between 5 and 100.
     * The number of delivery attempts is defined as 1 + (the sum of number of
     * NACKs and number of times the acknowledgement deadline has been exceeded
     * for the message).
     * A NACK is any call to ModifyAckDeadline with a 0 deadline. Note that
     * client libraries may automatically extend ack_deadlines.
     * This field will be honored on a best effort basis.
     * If this parameter is 0, a default value of 5 is used.
     *
     * Generated from protobuf field <code>int32 max_delivery_attempts = 2;</code>
     * @return int
     */
    public function getMaxDeliveryAttempts()
    {
        return $this->max_delivery_attempts;
    }

    /**
     * The maximum number of delivery attempts for any message. The value must be
     * between 5 and 100.
     * The number of delivery attempts is defined as 1 + (the sum of number of
     * NACKs and number of times the acknowledgement deadline has been exceeded
     * for the message).
     * A NACK is any call to ModifyAckDeadline with a 0 deadline. Note that
     * client libraries may automatically extend ack_deadlines.
     * This field will be honored on a best effort basis.
     * If this parameter is 0, a default value of 5 is used.
     *
     * Generated from protobuf field <code>int32 max_delivery_attempts = 2;</code>
     * @param int $var
     * @return $this
     */
    public function setMaxDeliveryAttempts($var)
    {
        GPBUtil::checkInt32($var);
        $this->max_delivery_attempts = $var;

        return $this;
    }

}

