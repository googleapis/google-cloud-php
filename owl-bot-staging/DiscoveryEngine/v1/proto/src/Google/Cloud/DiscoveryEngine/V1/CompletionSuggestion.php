<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/cloud/discoveryengine/v1/completion.proto

namespace Google\Cloud\DiscoveryEngine\V1;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Autocomplete suggestions that are imported from Customer.
 *
 * Generated from protobuf message <code>google.cloud.discoveryengine.v1.CompletionSuggestion</code>
 */
class CompletionSuggestion extends \Google\Protobuf\Internal\Message
{
    /**
     * Required. The suggestion text.
     *
     * Generated from protobuf field <code>string suggestion = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    protected $suggestion = '';
    /**
     * BCP-47 language code of this suggestion.
     *
     * Generated from protobuf field <code>string language_code = 4;</code>
     */
    protected $language_code = '';
    /**
     * If two suggestions have the same groupId, they will not be
     * returned together. Instead the one ranked higher will be returned. This can
     * be used to deduplicate semantically identical suggestions.
     *
     * Generated from protobuf field <code>string group_id = 5;</code>
     */
    protected $group_id = '';
    /**
     * The score of this suggestion within its group.
     *
     * Generated from protobuf field <code>double group_score = 6;</code>
     */
    protected $group_score = 0.0;
    /**
     * Alternative matching phrases for this suggestion.
     *
     * Generated from protobuf field <code>repeated string alternative_phrases = 7;</code>
     */
    private $alternative_phrases;
    protected $ranking_info;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type float $global_score
     *           Global score of this suggestion. Control how this suggestion would be
     *           scored / ranked.
     *     @type int|string $frequency
     *           Frequency of this suggestion. Will be used to rank suggestions when score
     *           is not available.
     *     @type string $suggestion
     *           Required. The suggestion text.
     *     @type string $language_code
     *           BCP-47 language code of this suggestion.
     *     @type string $group_id
     *           If two suggestions have the same groupId, they will not be
     *           returned together. Instead the one ranked higher will be returned. This can
     *           be used to deduplicate semantically identical suggestions.
     *     @type float $group_score
     *           The score of this suggestion within its group.
     *     @type array<string>|\Google\Protobuf\Internal\RepeatedField $alternative_phrases
     *           Alternative matching phrases for this suggestion.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Google\Cloud\Discoveryengine\V1\Completion::initOnce();
        parent::__construct($data);
    }

    /**
     * Global score of this suggestion. Control how this suggestion would be
     * scored / ranked.
     *
     * Generated from protobuf field <code>double global_score = 2;</code>
     * @return float
     */
    public function getGlobalScore()
    {
        return $this->readOneof(2);
    }

    public function hasGlobalScore()
    {
        return $this->hasOneof(2);
    }

    /**
     * Global score of this suggestion. Control how this suggestion would be
     * scored / ranked.
     *
     * Generated from protobuf field <code>double global_score = 2;</code>
     * @param float $var
     * @return $this
     */
    public function setGlobalScore($var)
    {
        GPBUtil::checkDouble($var);
        $this->writeOneof(2, $var);

        return $this;
    }

    /**
     * Frequency of this suggestion. Will be used to rank suggestions when score
     * is not available.
     *
     * Generated from protobuf field <code>int64 frequency = 3;</code>
     * @return int|string
     */
    public function getFrequency()
    {
        return $this->readOneof(3);
    }

    public function hasFrequency()
    {
        return $this->hasOneof(3);
    }

    /**
     * Frequency of this suggestion. Will be used to rank suggestions when score
     * is not available.
     *
     * Generated from protobuf field <code>int64 frequency = 3;</code>
     * @param int|string $var
     * @return $this
     */
    public function setFrequency($var)
    {
        GPBUtil::checkInt64($var);
        $this->writeOneof(3, $var);

        return $this;
    }

    /**
     * Required. The suggestion text.
     *
     * Generated from protobuf field <code>string suggestion = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     * @return string
     */
    public function getSuggestion()
    {
        return $this->suggestion;
    }

    /**
     * Required. The suggestion text.
     *
     * Generated from protobuf field <code>string suggestion = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     * @param string $var
     * @return $this
     */
    public function setSuggestion($var)
    {
        GPBUtil::checkString($var, True);
        $this->suggestion = $var;

        return $this;
    }

    /**
     * BCP-47 language code of this suggestion.
     *
     * Generated from protobuf field <code>string language_code = 4;</code>
     * @return string
     */
    public function getLanguageCode()
    {
        return $this->language_code;
    }

    /**
     * BCP-47 language code of this suggestion.
     *
     * Generated from protobuf field <code>string language_code = 4;</code>
     * @param string $var
     * @return $this
     */
    public function setLanguageCode($var)
    {
        GPBUtil::checkString($var, True);
        $this->language_code = $var;

        return $this;
    }

    /**
     * If two suggestions have the same groupId, they will not be
     * returned together. Instead the one ranked higher will be returned. This can
     * be used to deduplicate semantically identical suggestions.
     *
     * Generated from protobuf field <code>string group_id = 5;</code>
     * @return string
     */
    public function getGroupId()
    {
        return $this->group_id;
    }

    /**
     * If two suggestions have the same groupId, they will not be
     * returned together. Instead the one ranked higher will be returned. This can
     * be used to deduplicate semantically identical suggestions.
     *
     * Generated from protobuf field <code>string group_id = 5;</code>
     * @param string $var
     * @return $this
     */
    public function setGroupId($var)
    {
        GPBUtil::checkString($var, True);
        $this->group_id = $var;

        return $this;
    }

    /**
     * The score of this suggestion within its group.
     *
     * Generated from protobuf field <code>double group_score = 6;</code>
     * @return float
     */
    public function getGroupScore()
    {
        return $this->group_score;
    }

    /**
     * The score of this suggestion within its group.
     *
     * Generated from protobuf field <code>double group_score = 6;</code>
     * @param float $var
     * @return $this
     */
    public function setGroupScore($var)
    {
        GPBUtil::checkDouble($var);
        $this->group_score = $var;

        return $this;
    }

    /**
     * Alternative matching phrases for this suggestion.
     *
     * Generated from protobuf field <code>repeated string alternative_phrases = 7;</code>
     * @return \Google\Protobuf\Internal\RepeatedField
     */
    public function getAlternativePhrases()
    {
        return $this->alternative_phrases;
    }

    /**
     * Alternative matching phrases for this suggestion.
     *
     * Generated from protobuf field <code>repeated string alternative_phrases = 7;</code>
     * @param array<string>|\Google\Protobuf\Internal\RepeatedField $var
     * @return $this
     */
    public function setAlternativePhrases($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::STRING);
        $this->alternative_phrases = $arr;

        return $this;
    }

    /**
     * @return string
     */
    public function getRankingInfo()
    {
        return $this->whichOneof("ranking_info");
    }

}

