<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/cloud/retail/v2/common.proto

namespace Google\Cloud\Retail\V2;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * A floating point interval.
 *
 * Generated from protobuf message <code>google.cloud.retail.v2.Interval</code>
 */
class Interval extends \Google\Protobuf\Internal\Message
{
    protected $min;
    protected $max;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type float $minimum
     *           Inclusive lower bound.
     *     @type float $exclusive_minimum
     *           Exclusive lower bound.
     *     @type float $maximum
     *           Inclusive upper bound.
     *     @type float $exclusive_maximum
     *           Exclusive upper bound.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Google\Cloud\Retail\V2\Common::initOnce();
        parent::__construct($data);
    }

    /**
     * Inclusive lower bound.
     *
     * Generated from protobuf field <code>double minimum = 1;</code>
     * @return float
     */
    public function getMinimum()
    {
        return $this->readOneof(1);
    }

    public function hasMinimum()
    {
        return $this->hasOneof(1);
    }

    /**
     * Inclusive lower bound.
     *
     * Generated from protobuf field <code>double minimum = 1;</code>
     * @param float $var
     * @return $this
     */
    public function setMinimum($var)
    {
        GPBUtil::checkDouble($var);
        $this->writeOneof(1, $var);

        return $this;
    }

    /**
     * Exclusive lower bound.
     *
     * Generated from protobuf field <code>double exclusive_minimum = 2;</code>
     * @return float
     */
    public function getExclusiveMinimum()
    {
        return $this->readOneof(2);
    }

    public function hasExclusiveMinimum()
    {
        return $this->hasOneof(2);
    }

    /**
     * Exclusive lower bound.
     *
     * Generated from protobuf field <code>double exclusive_minimum = 2;</code>
     * @param float $var
     * @return $this
     */
    public function setExclusiveMinimum($var)
    {
        GPBUtil::checkDouble($var);
        $this->writeOneof(2, $var);

        return $this;
    }

    /**
     * Inclusive upper bound.
     *
     * Generated from protobuf field <code>double maximum = 3;</code>
     * @return float
     */
    public function getMaximum()
    {
        return $this->readOneof(3);
    }

    public function hasMaximum()
    {
        return $this->hasOneof(3);
    }

    /**
     * Inclusive upper bound.
     *
     * Generated from protobuf field <code>double maximum = 3;</code>
     * @param float $var
     * @return $this
     */
    public function setMaximum($var)
    {
        GPBUtil::checkDouble($var);
        $this->writeOneof(3, $var);

        return $this;
    }

    /**
     * Exclusive upper bound.
     *
     * Generated from protobuf field <code>double exclusive_maximum = 4;</code>
     * @return float
     */
    public function getExclusiveMaximum()
    {
        return $this->readOneof(4);
    }

    public function hasExclusiveMaximum()
    {
        return $this->hasOneof(4);
    }

    /**
     * Exclusive upper bound.
     *
     * Generated from protobuf field <code>double exclusive_maximum = 4;</code>
     * @param float $var
     * @return $this
     */
    public function setExclusiveMaximum($var)
    {
        GPBUtil::checkDouble($var);
        $this->writeOneof(4, $var);

        return $this;
    }

    /**
     * @return string
     */
    public function getMin()
    {
        return $this->whichOneof("min");
    }

    /**
     * @return string
     */
    public function getMax()
    {
        return $this->whichOneof("max");
    }

}

