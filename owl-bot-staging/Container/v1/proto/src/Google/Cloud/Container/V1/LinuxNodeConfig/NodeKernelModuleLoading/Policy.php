<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/container/v1/cluster_service.proto

namespace Google\Cloud\Container\V1\LinuxNodeConfig\NodeKernelModuleLoading;

use UnexpectedValueException;

/**
 * Defines the kernel module loading policy for nodes in the nodepool.
 *
 * Protobuf type <code>google.container.v1.LinuxNodeConfig.NodeKernelModuleLoading.Policy</code>
 */
class Policy
{
    /**
     * Default behavior. GKE selects the image based on node type.
     * For CPU and TPU nodes, the image will not allow loading external
     * kernel modules.
     * For GPU nodes, the image will allow loading any module, whether it
     * is signed or not.
     *
     * Generated from protobuf enum <code>POLICY_UNSPECIFIED = 0;</code>
     */
    const POLICY_UNSPECIFIED = 0;
    /**
     * Enforced signature verification: Node pools will use a
     * Container-Optimized OS image configured to allow loading of
     * *Google-signed* external kernel modules.
     * Loadpin is enabled but configured to exclude modules, and kernel
     * module signature checking is enforced.
     *
     * Generated from protobuf enum <code>ENFORCE_SIGNED_MODULES = 1;</code>
     */
    const ENFORCE_SIGNED_MODULES = 1;
    /**
     * Mirrors existing DEFAULT behavior:
     * For CPU and TPU nodes, the image will not allow loading external
     * kernel modules.
     * For GPU nodes, the image will allow loading any module, whether it
     * is signed or not.
     *
     * Generated from protobuf enum <code>DO_NOT_ENFORCE_SIGNED_MODULES = 2;</code>
     */
    const DO_NOT_ENFORCE_SIGNED_MODULES = 2;

    private static $valueToName = [
        self::POLICY_UNSPECIFIED => 'POLICY_UNSPECIFIED',
        self::ENFORCE_SIGNED_MODULES => 'ENFORCE_SIGNED_MODULES',
        self::DO_NOT_ENFORCE_SIGNED_MODULES => 'DO_NOT_ENFORCE_SIGNED_MODULES',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(Policy::class, \Google\Cloud\Container\V1\LinuxNodeConfig_NodeKernelModuleLoading_Policy::class);

