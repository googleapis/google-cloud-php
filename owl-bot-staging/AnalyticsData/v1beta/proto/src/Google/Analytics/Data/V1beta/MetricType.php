<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/analytics/data/v1beta/data.proto

namespace Google\Analytics\Data\V1beta;

use UnexpectedValueException;

/**
 * A metric's value type.
 *
 * Protobuf type <code>google.analytics.data.v1beta.MetricType</code>
 */
class MetricType
{
    /**
     * Unspecified type.
     *
     * Generated from protobuf enum <code>METRIC_TYPE_UNSPECIFIED = 0;</code>
     */
    const METRIC_TYPE_UNSPECIFIED = 0;
    /**
     * Integer type.
     *
     * Generated from protobuf enum <code>TYPE_INTEGER = 1;</code>
     */
    const TYPE_INTEGER = 1;
    /**
     * Floating point type.
     *
     * Generated from protobuf enum <code>TYPE_FLOAT = 2;</code>
     */
    const TYPE_FLOAT = 2;
    /**
     * A duration of seconds; a special floating point type.
     *
     * Generated from protobuf enum <code>TYPE_SECONDS = 4;</code>
     */
    const TYPE_SECONDS = 4;
    /**
     * A duration in milliseconds; a special floating point type.
     *
     * Generated from protobuf enum <code>TYPE_MILLISECONDS = 5;</code>
     */
    const TYPE_MILLISECONDS = 5;
    /**
     * A duration in minutes; a special floating point type.
     *
     * Generated from protobuf enum <code>TYPE_MINUTES = 6;</code>
     */
    const TYPE_MINUTES = 6;
    /**
     * A duration in hours; a special floating point type.
     *
     * Generated from protobuf enum <code>TYPE_HOURS = 7;</code>
     */
    const TYPE_HOURS = 7;
    /**
     * A custom metric of standard type; a special floating point type.
     *
     * Generated from protobuf enum <code>TYPE_STANDARD = 8;</code>
     */
    const TYPE_STANDARD = 8;
    /**
     * An amount of money; a special floating point type.
     *
     * Generated from protobuf enum <code>TYPE_CURRENCY = 9;</code>
     */
    const TYPE_CURRENCY = 9;
    /**
     * A length in feet; a special floating point type.
     *
     * Generated from protobuf enum <code>TYPE_FEET = 10;</code>
     */
    const TYPE_FEET = 10;
    /**
     * A length in miles; a special floating point type.
     *
     * Generated from protobuf enum <code>TYPE_MILES = 11;</code>
     */
    const TYPE_MILES = 11;
    /**
     * A length in meters; a special floating point type.
     *
     * Generated from protobuf enum <code>TYPE_METERS = 12;</code>
     */
    const TYPE_METERS = 12;
    /**
     * A length in kilometers; a special floating point type.
     *
     * Generated from protobuf enum <code>TYPE_KILOMETERS = 13;</code>
     */
    const TYPE_KILOMETERS = 13;

    private static $valueToName = [
        self::METRIC_TYPE_UNSPECIFIED => 'METRIC_TYPE_UNSPECIFIED',
        self::TYPE_INTEGER => 'TYPE_INTEGER',
        self::TYPE_FLOAT => 'TYPE_FLOAT',
        self::TYPE_SECONDS => 'TYPE_SECONDS',
        self::TYPE_MILLISECONDS => 'TYPE_MILLISECONDS',
        self::TYPE_MINUTES => 'TYPE_MINUTES',
        self::TYPE_HOURS => 'TYPE_HOURS',
        self::TYPE_STANDARD => 'TYPE_STANDARD',
        self::TYPE_CURRENCY => 'TYPE_CURRENCY',
        self::TYPE_FEET => 'TYPE_FEET',
        self::TYPE_MILES => 'TYPE_MILES',
        self::TYPE_METERS => 'TYPE_METERS',
        self::TYPE_KILOMETERS => 'TYPE_KILOMETERS',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

