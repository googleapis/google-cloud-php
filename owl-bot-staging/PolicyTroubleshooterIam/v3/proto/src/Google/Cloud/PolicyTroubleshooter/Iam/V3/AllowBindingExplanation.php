<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/cloud/policytroubleshooter/iam/v3/troubleshooter.proto

namespace Google\Cloud\PolicyTroubleshooter\Iam\V3;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Details about how a role binding in an allow policy affects a principal's
 * ability to use a permission.
 *
 * Generated from protobuf message <code>google.cloud.policytroubleshooter.iam.v3.AllowBindingExplanation</code>
 */
class AllowBindingExplanation extends \Google\Protobuf\Internal\Message
{
    /**
     * Required. Indicates whether _this role binding_ gives the specified
     * permission to the specified principal on the specified resource.
     * This field does _not_ indicate whether the principal actually has the
     * permission on the resource. There might be another role binding that
     * overrides this role binding. To determine whether the principal actually
     * has the permission, use the `overall_access_state` field in the
     * [TroubleshootIamPolicyResponse][google.cloud.policytroubleshooter.iam.v3.TroubleshootIamPolicyResponse].
     *
     * Generated from protobuf field <code>.google.cloud.policytroubleshooter.iam.v3.AllowAccessState allow_access_state = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    protected $allow_access_state = 0;
    /**
     * The role that this role binding grants. For example,
     * `roles/compute.admin`.
     * For a complete list of predefined IAM roles, as well as the permissions in
     * each role, see https://cloud.google.com/iam/help/roles/reference.
     *
     * Generated from protobuf field <code>string role = 2;</code>
     */
    protected $role = '';
    /**
     * Indicates whether the role granted by this role binding contains the
     * specified permission.
     *
     * Generated from protobuf field <code>.google.cloud.policytroubleshooter.iam.v3.RolePermissionInclusionState role_permission = 3;</code>
     */
    protected $role_permission = 0;
    /**
     * The relevance of the permission's existence, or nonexistence, in the role
     * to the overall determination for the entire policy.
     *
     * Generated from protobuf field <code>.google.cloud.policytroubleshooter.iam.v3.HeuristicRelevance role_permission_relevance = 4;</code>
     */
    protected $role_permission_relevance = 0;
    /**
     * The combined result of all memberships. Indicates if the principal is
     * included in any role binding, either directly or indirectly.
     *
     * Generated from protobuf field <code>.google.cloud.policytroubleshooter.iam.v3.AllowBindingExplanation.AnnotatedAllowMembership combined_membership = 5;</code>
     */
    protected $combined_membership = null;
    /**
     * Indicates whether each role binding includes the principal specified in the
     * request, either directly or indirectly. Each key identifies a principal in
     * the role binding, and each value indicates whether the principal in the
     * role binding includes the principal in the request.
     * For example, suppose that a role binding includes the following principals:
     * * `user:alice&#64;example.com`
     * * `group:product-eng&#64;example.com`
     * You want to troubleshoot access for `user:bob&#64;example.com`. This user is a
     * member of the group `group:product-eng&#64;example.com`.
     * For the first principal in the role binding, the key is
     * `user:alice&#64;example.com`, and the `membership` field in the value is set to
     * `NOT_INCLUDED`.
     * For the second principal in the role binding, the key is
     * `group:product-eng&#64;example.com`, and the `membership` field in the value is
     * set to `INCLUDED`.
     *
     * Generated from protobuf field <code>map<string, .google.cloud.policytroubleshooter.iam.v3.AllowBindingExplanation.AnnotatedAllowMembership> memberships = 6;</code>
     */
    private $memberships;
    /**
     * The relevance of this role binding to the overall determination for the
     * entire policy.
     *
     * Generated from protobuf field <code>.google.cloud.policytroubleshooter.iam.v3.HeuristicRelevance relevance = 7;</code>
     */
    protected $relevance = 0;
    /**
     * A condition expression that specifies when the role binding grants access.
     * To learn about IAM Conditions, see
     * https://cloud.google.com/iam/help/conditions/overview.
     *
     * Generated from protobuf field <code>.google.type.Expr condition = 8;</code>
     */
    protected $condition = null;
    /**
     * Condition evaluation state for this role binding.
     *
     * Generated from protobuf field <code>.google.cloud.policytroubleshooter.iam.v3.ConditionExplanation condition_explanation = 9;</code>
     */
    protected $condition_explanation = null;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type int $allow_access_state
     *           Required. Indicates whether _this role binding_ gives the specified
     *           permission to the specified principal on the specified resource.
     *           This field does _not_ indicate whether the principal actually has the
     *           permission on the resource. There might be another role binding that
     *           overrides this role binding. To determine whether the principal actually
     *           has the permission, use the `overall_access_state` field in the
     *           [TroubleshootIamPolicyResponse][google.cloud.policytroubleshooter.iam.v3.TroubleshootIamPolicyResponse].
     *     @type string $role
     *           The role that this role binding grants. For example,
     *           `roles/compute.admin`.
     *           For a complete list of predefined IAM roles, as well as the permissions in
     *           each role, see https://cloud.google.com/iam/help/roles/reference.
     *     @type int $role_permission
     *           Indicates whether the role granted by this role binding contains the
     *           specified permission.
     *     @type int $role_permission_relevance
     *           The relevance of the permission's existence, or nonexistence, in the role
     *           to the overall determination for the entire policy.
     *     @type \Google\Cloud\PolicyTroubleshooter\Iam\V3\AllowBindingExplanation\AnnotatedAllowMembership $combined_membership
     *           The combined result of all memberships. Indicates if the principal is
     *           included in any role binding, either directly or indirectly.
     *     @type array|\Google\Protobuf\Internal\MapField $memberships
     *           Indicates whether each role binding includes the principal specified in the
     *           request, either directly or indirectly. Each key identifies a principal in
     *           the role binding, and each value indicates whether the principal in the
     *           role binding includes the principal in the request.
     *           For example, suppose that a role binding includes the following principals:
     *           * `user:alice&#64;example.com`
     *           * `group:product-eng&#64;example.com`
     *           You want to troubleshoot access for `user:bob&#64;example.com`. This user is a
     *           member of the group `group:product-eng&#64;example.com`.
     *           For the first principal in the role binding, the key is
     *           `user:alice&#64;example.com`, and the `membership` field in the value is set to
     *           `NOT_INCLUDED`.
     *           For the second principal in the role binding, the key is
     *           `group:product-eng&#64;example.com`, and the `membership` field in the value is
     *           set to `INCLUDED`.
     *     @type int $relevance
     *           The relevance of this role binding to the overall determination for the
     *           entire policy.
     *     @type \Google\Type\Expr $condition
     *           A condition expression that specifies when the role binding grants access.
     *           To learn about IAM Conditions, see
     *           https://cloud.google.com/iam/help/conditions/overview.
     *     @type \Google\Cloud\PolicyTroubleshooter\Iam\V3\ConditionExplanation $condition_explanation
     *           Condition evaluation state for this role binding.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Google\Cloud\Policytroubleshooter\Iam\V3\Troubleshooter::initOnce();
        parent::__construct($data);
    }

    /**
     * Required. Indicates whether _this role binding_ gives the specified
     * permission to the specified principal on the specified resource.
     * This field does _not_ indicate whether the principal actually has the
     * permission on the resource. There might be another role binding that
     * overrides this role binding. To determine whether the principal actually
     * has the permission, use the `overall_access_state` field in the
     * [TroubleshootIamPolicyResponse][google.cloud.policytroubleshooter.iam.v3.TroubleshootIamPolicyResponse].
     *
     * Generated from protobuf field <code>.google.cloud.policytroubleshooter.iam.v3.AllowAccessState allow_access_state = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     * @return int
     */
    public function getAllowAccessState()
    {
        return $this->allow_access_state;
    }

    /**
     * Required. Indicates whether _this role binding_ gives the specified
     * permission to the specified principal on the specified resource.
     * This field does _not_ indicate whether the principal actually has the
     * permission on the resource. There might be another role binding that
     * overrides this role binding. To determine whether the principal actually
     * has the permission, use the `overall_access_state` field in the
     * [TroubleshootIamPolicyResponse][google.cloud.policytroubleshooter.iam.v3.TroubleshootIamPolicyResponse].
     *
     * Generated from protobuf field <code>.google.cloud.policytroubleshooter.iam.v3.AllowAccessState allow_access_state = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     * @param int $var
     * @return $this
     */
    public function setAllowAccessState($var)
    {
        GPBUtil::checkEnum($var, \Google\Cloud\PolicyTroubleshooter\Iam\V3\AllowAccessState::class);
        $this->allow_access_state = $var;

        return $this;
    }

    /**
     * The role that this role binding grants. For example,
     * `roles/compute.admin`.
     * For a complete list of predefined IAM roles, as well as the permissions in
     * each role, see https://cloud.google.com/iam/help/roles/reference.
     *
     * Generated from protobuf field <code>string role = 2;</code>
     * @return string
     */
    public function getRole()
    {
        return $this->role;
    }

    /**
     * The role that this role binding grants. For example,
     * `roles/compute.admin`.
     * For a complete list of predefined IAM roles, as well as the permissions in
     * each role, see https://cloud.google.com/iam/help/roles/reference.
     *
     * Generated from protobuf field <code>string role = 2;</code>
     * @param string $var
     * @return $this
     */
    public function setRole($var)
    {
        GPBUtil::checkString($var, True);
        $this->role = $var;

        return $this;
    }

    /**
     * Indicates whether the role granted by this role binding contains the
     * specified permission.
     *
     * Generated from protobuf field <code>.google.cloud.policytroubleshooter.iam.v3.RolePermissionInclusionState role_permission = 3;</code>
     * @return int
     */
    public function getRolePermission()
    {
        return $this->role_permission;
    }

    /**
     * Indicates whether the role granted by this role binding contains the
     * specified permission.
     *
     * Generated from protobuf field <code>.google.cloud.policytroubleshooter.iam.v3.RolePermissionInclusionState role_permission = 3;</code>
     * @param int $var
     * @return $this
     */
    public function setRolePermission($var)
    {
        GPBUtil::checkEnum($var, \Google\Cloud\PolicyTroubleshooter\Iam\V3\RolePermissionInclusionState::class);
        $this->role_permission = $var;

        return $this;
    }

    /**
     * The relevance of the permission's existence, or nonexistence, in the role
     * to the overall determination for the entire policy.
     *
     * Generated from protobuf field <code>.google.cloud.policytroubleshooter.iam.v3.HeuristicRelevance role_permission_relevance = 4;</code>
     * @return int
     */
    public function getRolePermissionRelevance()
    {
        return $this->role_permission_relevance;
    }

    /**
     * The relevance of the permission's existence, or nonexistence, in the role
     * to the overall determination for the entire policy.
     *
     * Generated from protobuf field <code>.google.cloud.policytroubleshooter.iam.v3.HeuristicRelevance role_permission_relevance = 4;</code>
     * @param int $var
     * @return $this
     */
    public function setRolePermissionRelevance($var)
    {
        GPBUtil::checkEnum($var, \Google\Cloud\PolicyTroubleshooter\Iam\V3\HeuristicRelevance::class);
        $this->role_permission_relevance = $var;

        return $this;
    }

    /**
     * The combined result of all memberships. Indicates if the principal is
     * included in any role binding, either directly or indirectly.
     *
     * Generated from protobuf field <code>.google.cloud.policytroubleshooter.iam.v3.AllowBindingExplanation.AnnotatedAllowMembership combined_membership = 5;</code>
     * @return \Google\Cloud\PolicyTroubleshooter\Iam\V3\AllowBindingExplanation\AnnotatedAllowMembership|null
     */
    public function getCombinedMembership()
    {
        return $this->combined_membership;
    }

    public function hasCombinedMembership()
    {
        return isset($this->combined_membership);
    }

    public function clearCombinedMembership()
    {
        unset($this->combined_membership);
    }

    /**
     * The combined result of all memberships. Indicates if the principal is
     * included in any role binding, either directly or indirectly.
     *
     * Generated from protobuf field <code>.google.cloud.policytroubleshooter.iam.v3.AllowBindingExplanation.AnnotatedAllowMembership combined_membership = 5;</code>
     * @param \Google\Cloud\PolicyTroubleshooter\Iam\V3\AllowBindingExplanation\AnnotatedAllowMembership $var
     * @return $this
     */
    public function setCombinedMembership($var)
    {
        GPBUtil::checkMessage($var, \Google\Cloud\PolicyTroubleshooter\Iam\V3\AllowBindingExplanation\AnnotatedAllowMembership::class);
        $this->combined_membership = $var;

        return $this;
    }

    /**
     * Indicates whether each role binding includes the principal specified in the
     * request, either directly or indirectly. Each key identifies a principal in
     * the role binding, and each value indicates whether the principal in the
     * role binding includes the principal in the request.
     * For example, suppose that a role binding includes the following principals:
     * * `user:alice&#64;example.com`
     * * `group:product-eng&#64;example.com`
     * You want to troubleshoot access for `user:bob&#64;example.com`. This user is a
     * member of the group `group:product-eng&#64;example.com`.
     * For the first principal in the role binding, the key is
     * `user:alice&#64;example.com`, and the `membership` field in the value is set to
     * `NOT_INCLUDED`.
     * For the second principal in the role binding, the key is
     * `group:product-eng&#64;example.com`, and the `membership` field in the value is
     * set to `INCLUDED`.
     *
     * Generated from protobuf field <code>map<string, .google.cloud.policytroubleshooter.iam.v3.AllowBindingExplanation.AnnotatedAllowMembership> memberships = 6;</code>
     * @return \Google\Protobuf\Internal\MapField
     */
    public function getMemberships()
    {
        return $this->memberships;
    }

    /**
     * Indicates whether each role binding includes the principal specified in the
     * request, either directly or indirectly. Each key identifies a principal in
     * the role binding, and each value indicates whether the principal in the
     * role binding includes the principal in the request.
     * For example, suppose that a role binding includes the following principals:
     * * `user:alice&#64;example.com`
     * * `group:product-eng&#64;example.com`
     * You want to troubleshoot access for `user:bob&#64;example.com`. This user is a
     * member of the group `group:product-eng&#64;example.com`.
     * For the first principal in the role binding, the key is
     * `user:alice&#64;example.com`, and the `membership` field in the value is set to
     * `NOT_INCLUDED`.
     * For the second principal in the role binding, the key is
     * `group:product-eng&#64;example.com`, and the `membership` field in the value is
     * set to `INCLUDED`.
     *
     * Generated from protobuf field <code>map<string, .google.cloud.policytroubleshooter.iam.v3.AllowBindingExplanation.AnnotatedAllowMembership> memberships = 6;</code>
     * @param array|\Google\Protobuf\Internal\MapField $var
     * @return $this
     */
    public function setMemberships($var)
    {
        $arr = GPBUtil::checkMapField($var, \Google\Protobuf\Internal\GPBType::STRING, \Google\Protobuf\Internal\GPBType::MESSAGE, \Google\Cloud\PolicyTroubleshooter\Iam\V3\AllowBindingExplanation\AnnotatedAllowMembership::class);
        $this->memberships = $arr;

        return $this;
    }

    /**
     * The relevance of this role binding to the overall determination for the
     * entire policy.
     *
     * Generated from protobuf field <code>.google.cloud.policytroubleshooter.iam.v3.HeuristicRelevance relevance = 7;</code>
     * @return int
     */
    public function getRelevance()
    {
        return $this->relevance;
    }

    /**
     * The relevance of this role binding to the overall determination for the
     * entire policy.
     *
     * Generated from protobuf field <code>.google.cloud.policytroubleshooter.iam.v3.HeuristicRelevance relevance = 7;</code>
     * @param int $var
     * @return $this
     */
    public function setRelevance($var)
    {
        GPBUtil::checkEnum($var, \Google\Cloud\PolicyTroubleshooter\Iam\V3\HeuristicRelevance::class);
        $this->relevance = $var;

        return $this;
    }

    /**
     * A condition expression that specifies when the role binding grants access.
     * To learn about IAM Conditions, see
     * https://cloud.google.com/iam/help/conditions/overview.
     *
     * Generated from protobuf field <code>.google.type.Expr condition = 8;</code>
     * @return \Google\Type\Expr|null
     */
    public function getCondition()
    {
        return $this->condition;
    }

    public function hasCondition()
    {
        return isset($this->condition);
    }

    public function clearCondition()
    {
        unset($this->condition);
    }

    /**
     * A condition expression that specifies when the role binding grants access.
     * To learn about IAM Conditions, see
     * https://cloud.google.com/iam/help/conditions/overview.
     *
     * Generated from protobuf field <code>.google.type.Expr condition = 8;</code>
     * @param \Google\Type\Expr $var
     * @return $this
     */
    public function setCondition($var)
    {
        GPBUtil::checkMessage($var, \Google\Type\Expr::class);
        $this->condition = $var;

        return $this;
    }

    /**
     * Condition evaluation state for this role binding.
     *
     * Generated from protobuf field <code>.google.cloud.policytroubleshooter.iam.v3.ConditionExplanation condition_explanation = 9;</code>
     * @return \Google\Cloud\PolicyTroubleshooter\Iam\V3\ConditionExplanation|null
     */
    public function getConditionExplanation()
    {
        return $this->condition_explanation;
    }

    public function hasConditionExplanation()
    {
        return isset($this->condition_explanation);
    }

    public function clearConditionExplanation()
    {
        unset($this->condition_explanation);
    }

    /**
     * Condition evaluation state for this role binding.
     *
     * Generated from protobuf field <code>.google.cloud.policytroubleshooter.iam.v3.ConditionExplanation condition_explanation = 9;</code>
     * @param \Google\Cloud\PolicyTroubleshooter\Iam\V3\ConditionExplanation $var
     * @return $this
     */
    public function setConditionExplanation($var)
    {
        GPBUtil::checkMessage($var, \Google\Cloud\PolicyTroubleshooter\Iam\V3\ConditionExplanation::class);
        $this->condition_explanation = $var;

        return $this;
    }

}

