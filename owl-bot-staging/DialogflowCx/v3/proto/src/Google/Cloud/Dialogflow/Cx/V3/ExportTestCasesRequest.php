<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/cloud/dialogflow/cx/v3/test_case.proto

namespace Google\Cloud\Dialogflow\Cx\V3;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * The request message for
 * [TestCases.ExportTestCases][google.cloud.dialogflow.cx.v3.TestCases.ExportTestCases].
 *
 * Generated from protobuf message <code>google.cloud.dialogflow.cx.v3.ExportTestCasesRequest</code>
 */
class ExportTestCasesRequest extends \Google\Protobuf\Internal\Message
{
    /**
     * Required. The agent where to export test cases from.
     * Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>`.
     *
     * Generated from protobuf field <code>string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {</code>
     */
    protected $parent = '';
    /**
     * The data format of the exported test cases. If not specified, `BLOB` is
     * assumed.
     *
     * Generated from protobuf field <code>.google.cloud.dialogflow.cx.v3.ExportTestCasesRequest.DataFormat data_format = 3;</code>
     */
    protected $data_format = 0;
    /**
     * The filter expression used to filter exported test cases, see
     * [API Filtering](https://aip.dev/160). The expression is case insensitive
     * and supports the following syntax:
     *   name = <value> [OR name = <value>] ...
     * For example:
     * *   "name = t1 OR name = t2" matches the test case with the exact resource
     *     name "t1" or "t2".
     *
     * Generated from protobuf field <code>string filter = 4;</code>
     */
    protected $filter = '';
    protected $destination;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $parent
     *           Required. The agent where to export test cases from.
     *           Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>`.
     *     @type string $gcs_uri
     *           The [Google Cloud Storage](https://cloud.google.com/storage/docs/) URI to
     *           export the test cases to. The format of this URI must be
     *           `gs://<bucket-name>/<object-name>`. If unspecified, the serialized test
     *           cases is returned inline.
     *           Dialogflow performs a write operation for the Cloud Storage object
     *           on the caller's behalf, so your request authentication must
     *           have write permissions for the object. For more information, see
     *           [Dialogflow access
     *           control](https://cloud.google.com/dialogflow/cx/docs/concept/access-control#storage).
     *     @type int $data_format
     *           The data format of the exported test cases. If not specified, `BLOB` is
     *           assumed.
     *     @type string $filter
     *           The filter expression used to filter exported test cases, see
     *           [API Filtering](https://aip.dev/160). The expression is case insensitive
     *           and supports the following syntax:
     *             name = <value> [OR name = <value>] ...
     *           For example:
     *           *   "name = t1 OR name = t2" matches the test case with the exact resource
     *               name "t1" or "t2".
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Google\Cloud\Dialogflow\Cx\V3\TestCase::initOnce();
        parent::__construct($data);
    }

    /**
     * Required. The agent where to export test cases from.
     * Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>`.
     *
     * Generated from protobuf field <code>string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {</code>
     * @return string
     */
    public function getParent()
    {
        return $this->parent;
    }

    /**
     * Required. The agent where to export test cases from.
     * Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>`.
     *
     * Generated from protobuf field <code>string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {</code>
     * @param string $var
     * @return $this
     */
    public function setParent($var)
    {
        GPBUtil::checkString($var, True);
        $this->parent = $var;

        return $this;
    }

    /**
     * The [Google Cloud Storage](https://cloud.google.com/storage/docs/) URI to
     * export the test cases to. The format of this URI must be
     * `gs://<bucket-name>/<object-name>`. If unspecified, the serialized test
     * cases is returned inline.
     * Dialogflow performs a write operation for the Cloud Storage object
     * on the caller's behalf, so your request authentication must
     * have write permissions for the object. For more information, see
     * [Dialogflow access
     * control](https://cloud.google.com/dialogflow/cx/docs/concept/access-control#storage).
     *
     * Generated from protobuf field <code>string gcs_uri = 2;</code>
     * @return string
     */
    public function getGcsUri()
    {
        return $this->readOneof(2);
    }

    public function hasGcsUri()
    {
        return $this->hasOneof(2);
    }

    /**
     * The [Google Cloud Storage](https://cloud.google.com/storage/docs/) URI to
     * export the test cases to. The format of this URI must be
     * `gs://<bucket-name>/<object-name>`. If unspecified, the serialized test
     * cases is returned inline.
     * Dialogflow performs a write operation for the Cloud Storage object
     * on the caller's behalf, so your request authentication must
     * have write permissions for the object. For more information, see
     * [Dialogflow access
     * control](https://cloud.google.com/dialogflow/cx/docs/concept/access-control#storage).
     *
     * Generated from protobuf field <code>string gcs_uri = 2;</code>
     * @param string $var
     * @return $this
     */
    public function setGcsUri($var)
    {
        GPBUtil::checkString($var, True);
        $this->writeOneof(2, $var);

        return $this;
    }

    /**
     * The data format of the exported test cases. If not specified, `BLOB` is
     * assumed.
     *
     * Generated from protobuf field <code>.google.cloud.dialogflow.cx.v3.ExportTestCasesRequest.DataFormat data_format = 3;</code>
     * @return int
     */
    public function getDataFormat()
    {
        return $this->data_format;
    }

    /**
     * The data format of the exported test cases. If not specified, `BLOB` is
     * assumed.
     *
     * Generated from protobuf field <code>.google.cloud.dialogflow.cx.v3.ExportTestCasesRequest.DataFormat data_format = 3;</code>
     * @param int $var
     * @return $this
     */
    public function setDataFormat($var)
    {
        GPBUtil::checkEnum($var, \Google\Cloud\Dialogflow\Cx\V3\ExportTestCasesRequest\DataFormat::class);
        $this->data_format = $var;

        return $this;
    }

    /**
     * The filter expression used to filter exported test cases, see
     * [API Filtering](https://aip.dev/160). The expression is case insensitive
     * and supports the following syntax:
     *   name = <value> [OR name = <value>] ...
     * For example:
     * *   "name = t1 OR name = t2" matches the test case with the exact resource
     *     name "t1" or "t2".
     *
     * Generated from protobuf field <code>string filter = 4;</code>
     * @return string
     */
    public function getFilter()
    {
        return $this->filter;
    }

    /**
     * The filter expression used to filter exported test cases, see
     * [API Filtering](https://aip.dev/160). The expression is case insensitive
     * and supports the following syntax:
     *   name = <value> [OR name = <value>] ...
     * For example:
     * *   "name = t1 OR name = t2" matches the test case with the exact resource
     *     name "t1" or "t2".
     *
     * Generated from protobuf field <code>string filter = 4;</code>
     * @param string $var
     * @return $this
     */
    public function setFilter($var)
    {
        GPBUtil::checkString($var, True);
        $this->filter = $var;

        return $this;
    }

    /**
     * @return string
     */
    public function getDestination()
    {
        return $this->whichOneof("destination");
    }

}

