<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/privacy/dlp/v2/dlp.proto

namespace Google\Cloud\Dlp\V2;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Configure processing location for discovery and inspection. For example,
 * image OCR is only provided in limited regions but configuring
 * ProcessingLocation will redirect OCR to a location where OCR is provided.
 *
 * Generated from protobuf message <code>google.privacy.dlp.v2.ProcessingLocation</code>
 */
class ProcessingLocation extends \Google\Protobuf\Internal\Message
{
    /**
     * Image processing will fall back using this configuration.
     *
     * Generated from protobuf field <code>.google.privacy.dlp.v2.ProcessingLocation.ImageFallbackLocation image_fallback_location = 1;</code>
     */
    protected $image_fallback_location = null;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type \Google\Cloud\Dlp\V2\ProcessingLocation\ImageFallbackLocation $image_fallback_location
     *           Image processing will fall back using this configuration.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Google\Privacy\Dlp\V2\Dlp::initOnce();
        parent::__construct($data);
    }

    /**
     * Image processing will fall back using this configuration.
     *
     * Generated from protobuf field <code>.google.privacy.dlp.v2.ProcessingLocation.ImageFallbackLocation image_fallback_location = 1;</code>
     * @return \Google\Cloud\Dlp\V2\ProcessingLocation\ImageFallbackLocation|null
     */
    public function getImageFallbackLocation()
    {
        return $this->image_fallback_location;
    }

    public function hasImageFallbackLocation()
    {
        return isset($this->image_fallback_location);
    }

    public function clearImageFallbackLocation()
    {
        unset($this->image_fallback_location);
    }

    /**
     * Image processing will fall back using this configuration.
     *
     * Generated from protobuf field <code>.google.privacy.dlp.v2.ProcessingLocation.ImageFallbackLocation image_fallback_location = 1;</code>
     * @param \Google\Cloud\Dlp\V2\ProcessingLocation\ImageFallbackLocation $var
     * @return $this
     */
    public function setImageFallbackLocation($var)
    {
        GPBUtil::checkMessage($var, \Google\Cloud\Dlp\V2\ProcessingLocation\ImageFallbackLocation::class);
        $this->image_fallback_location = $var;

        return $this;
    }

}

