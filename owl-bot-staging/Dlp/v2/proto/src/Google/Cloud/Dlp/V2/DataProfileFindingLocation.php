<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/privacy/dlp/v2/dlp.proto

namespace Google\Cloud\Dlp\V2;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Location of a data profile finding within a resource.
 *
 * Generated from protobuf message <code>google.privacy.dlp.v2.DataProfileFindingLocation</code>
 */
class DataProfileFindingLocation extends \Google\Protobuf\Internal\Message
{
    /**
     * Name of the container where the finding is located.
     * The top-level name is the source file name or table name. Names of some
     * common storage containers are formatted as follows:
     * * BigQuery tables:  `{project_id}:{dataset_id}.{table_id}`
     * * Cloud Storage files: `gs://{bucket}/{path}`
     *
     * Generated from protobuf field <code>string container_name = 1;</code>
     */
    protected $container_name = '';
    protected $location_extra_details;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $container_name
     *           Name of the container where the finding is located.
     *           The top-level name is the source file name or table name. Names of some
     *           common storage containers are formatted as follows:
     *           * BigQuery tables:  `{project_id}:{dataset_id}.{table_id}`
     *           * Cloud Storage files: `gs://{bucket}/{path}`
     *     @type \Google\Cloud\Dlp\V2\DataProfileFindingRecordLocation $data_profile_finding_record_location
     *           Location of a finding within a resource that produces a table data
     *           profile.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Google\Privacy\Dlp\V2\Dlp::initOnce();
        parent::__construct($data);
    }

    /**
     * Name of the container where the finding is located.
     * The top-level name is the source file name or table name. Names of some
     * common storage containers are formatted as follows:
     * * BigQuery tables:  `{project_id}:{dataset_id}.{table_id}`
     * * Cloud Storage files: `gs://{bucket}/{path}`
     *
     * Generated from protobuf field <code>string container_name = 1;</code>
     * @return string
     */
    public function getContainerName()
    {
        return $this->container_name;
    }

    /**
     * Name of the container where the finding is located.
     * The top-level name is the source file name or table name. Names of some
     * common storage containers are formatted as follows:
     * * BigQuery tables:  `{project_id}:{dataset_id}.{table_id}`
     * * Cloud Storage files: `gs://{bucket}/{path}`
     *
     * Generated from protobuf field <code>string container_name = 1;</code>
     * @param string $var
     * @return $this
     */
    public function setContainerName($var)
    {
        GPBUtil::checkString($var, True);
        $this->container_name = $var;

        return $this;
    }

    /**
     * Location of a finding within a resource that produces a table data
     * profile.
     *
     * Generated from protobuf field <code>.google.privacy.dlp.v2.DataProfileFindingRecordLocation data_profile_finding_record_location = 2;</code>
     * @return \Google\Cloud\Dlp\V2\DataProfileFindingRecordLocation|null
     */
    public function getDataProfileFindingRecordLocation()
    {
        return $this->readOneof(2);
    }

    public function hasDataProfileFindingRecordLocation()
    {
        return $this->hasOneof(2);
    }

    /**
     * Location of a finding within a resource that produces a table data
     * profile.
     *
     * Generated from protobuf field <code>.google.privacy.dlp.v2.DataProfileFindingRecordLocation data_profile_finding_record_location = 2;</code>
     * @param \Google\Cloud\Dlp\V2\DataProfileFindingRecordLocation $var
     * @return $this
     */
    public function setDataProfileFindingRecordLocation($var)
    {
        GPBUtil::checkMessage($var, \Google\Cloud\Dlp\V2\DataProfileFindingRecordLocation::class);
        $this->writeOneof(2, $var);

        return $this;
    }

    /**
     * @return string
     */
    public function getLocationExtraDetails()
    {
        return $this->whichOneof("location_extra_details");
    }

}

