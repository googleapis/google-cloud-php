<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/cloud/oracledatabase/v1/exascale_db_storage_vault.proto

namespace Google\Cloud\OracleDatabase\V1\ExascaleDbStorageVaultProperties;

use UnexpectedValueException;

/**
 * The shape attribute of the VM clusters attached to the
 * ExascaleDbStorageVault.
 *
 * Protobuf type <code>google.cloud.oracledatabase.v1.ExascaleDbStorageVaultProperties.ShapeAttribute</code>
 */
class ShapeAttribute
{
    /**
     * Default unspecified value.
     *
     * Generated from protobuf enum <code>SHAPE_ATTRIBUTE_UNSPECIFIED = 0;</code>
     */
    const SHAPE_ATTRIBUTE_UNSPECIFIED = 0;
    /**
     * Indicates that the resource is in smart storage.
     *
     * Generated from protobuf enum <code>SMART_STORAGE = 1;</code>
     */
    const SMART_STORAGE = 1;
    /**
     * Indicates that the resource is in block storage.
     *
     * Generated from protobuf enum <code>BLOCK_STORAGE = 2;</code>
     */
    const BLOCK_STORAGE = 2;

    private static $valueToName = [
        self::SHAPE_ATTRIBUTE_UNSPECIFIED => 'SHAPE_ATTRIBUTE_UNSPECIFIED',
        self::SMART_STORAGE => 'SMART_STORAGE',
        self::BLOCK_STORAGE => 'BLOCK_STORAGE',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(ShapeAttribute::class, \Google\Cloud\OracleDatabase\V1\ExascaleDbStorageVaultProperties_ShapeAttribute::class);

