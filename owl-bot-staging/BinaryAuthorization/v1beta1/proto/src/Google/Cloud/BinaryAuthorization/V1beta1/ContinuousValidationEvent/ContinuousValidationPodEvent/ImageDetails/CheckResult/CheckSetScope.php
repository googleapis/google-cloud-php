<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/cloud/binaryauthorization/v1beta1/continuous_validation_logging.proto

namespace Google\Cloud\BinaryAuthorization\V1beta1\ContinuousValidationEvent\ContinuousValidationPodEvent\ImageDetails\CheckResult;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * A scope specifier for check sets.
 *
 * Generated from protobuf message <code>google.cloud.binaryauthorization.v1beta1.ContinuousValidationEvent.ContinuousValidationPodEvent.ImageDetails.CheckResult.CheckSetScope</code>
 */
class CheckSetScope extends \Google\Protobuf\Internal\Message
{
    protected $scope;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $kubernetes_service_account
     *           Matches a single Kubernetes service account, e.g.
     *           'my-namespace:my-service-account'.
     *           `kubernetes_service_account` scope is always more specific than
     *           `kubernetes_namespace` scope for the same namespace.
     *     @type string $kubernetes_namespace
     *           Matches all Kubernetes service accounts in the provided
     *           namespace, unless a more specific `kubernetes_service_account`
     *           scope already matched.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Google\Cloud\Binaryauthorization\V1Beta1\ContinuousValidationLogging::initOnce();
        parent::__construct($data);
    }

    /**
     * Matches a single Kubernetes service account, e.g.
     * 'my-namespace:my-service-account'.
     * `kubernetes_service_account` scope is always more specific than
     * `kubernetes_namespace` scope for the same namespace.
     *
     * Generated from protobuf field <code>string kubernetes_service_account = 1;</code>
     * @return string
     */
    public function getKubernetesServiceAccount()
    {
        return $this->readOneof(1);
    }

    public function hasKubernetesServiceAccount()
    {
        return $this->hasOneof(1);
    }

    /**
     * Matches a single Kubernetes service account, e.g.
     * 'my-namespace:my-service-account'.
     * `kubernetes_service_account` scope is always more specific than
     * `kubernetes_namespace` scope for the same namespace.
     *
     * Generated from protobuf field <code>string kubernetes_service_account = 1;</code>
     * @param string $var
     * @return $this
     */
    public function setKubernetesServiceAccount($var)
    {
        GPBUtil::checkString($var, True);
        $this->writeOneof(1, $var);

        return $this;
    }

    /**
     * Matches all Kubernetes service accounts in the provided
     * namespace, unless a more specific `kubernetes_service_account`
     * scope already matched.
     *
     * Generated from protobuf field <code>string kubernetes_namespace = 2;</code>
     * @return string
     */
    public function getKubernetesNamespace()
    {
        return $this->readOneof(2);
    }

    public function hasKubernetesNamespace()
    {
        return $this->hasOneof(2);
    }

    /**
     * Matches all Kubernetes service accounts in the provided
     * namespace, unless a more specific `kubernetes_service_account`
     * scope already matched.
     *
     * Generated from protobuf field <code>string kubernetes_namespace = 2;</code>
     * @param string $var
     * @return $this
     */
    public function setKubernetesNamespace($var)
    {
        GPBUtil::checkString($var, True);
        $this->writeOneof(2, $var);

        return $this;
    }

    /**
     * @return string
     */
    public function getScope()
    {
        return $this->whichOneof("scope");
    }

}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(CheckSetScope::class, \Google\Cloud\BinaryAuthorization\V1beta1\ContinuousValidationEvent_ContinuousValidationPodEvent_ImageDetails_CheckResult_CheckSetScope::class);

