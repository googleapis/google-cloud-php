<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/cloud/parallelstore/v1beta/parallelstore.proto

namespace Google\Cloud\Parallelstore\V1beta;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Parallelstore as the source of a data transfer.
 *
 * Generated from protobuf message <code>google.cloud.parallelstore.v1beta.SourceParallelstore</code>
 */
class SourceParallelstore extends \Google\Protobuf\Internal\Message
{
    /**
     * Optional. Root directory path to the Paralellstore filesystem, starting
     * with `/`. Defaults to `/` if unset.
     *
     * Generated from protobuf field <code>string path = 1 [(.google.api.field_behavior) = OPTIONAL];</code>
     */
    protected $path = '';

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $path
     *           Optional. Root directory path to the Paralellstore filesystem, starting
     *           with `/`. Defaults to `/` if unset.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Google\Cloud\Parallelstore\V1Beta\Parallelstore::initOnce();
        parent::__construct($data);
    }

    /**
     * Optional. Root directory path to the Paralellstore filesystem, starting
     * with `/`. Defaults to `/` if unset.
     *
     * Generated from protobuf field <code>string path = 1 [(.google.api.field_behavior) = OPTIONAL];</code>
     * @return string
     */
    public function getPath()
    {
        return $this->path;
    }

    /**
     * Optional. Root directory path to the Paralellstore filesystem, starting
     * with `/`. Defaults to `/` if unset.
     *
     * Generated from protobuf field <code>string path = 1 [(.google.api.field_behavior) = OPTIONAL];</code>
     * @param string $var
     * @return $this
     */
    public function setPath($var)
    {
        GPBUtil::checkString($var, True);
        $this->path = $var;

        return $this;
    }

}

