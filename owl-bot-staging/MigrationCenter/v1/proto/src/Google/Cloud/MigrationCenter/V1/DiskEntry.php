<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/cloud/migrationcenter/v1/migrationcenter.proto

namespace Google\Cloud\MigrationCenter\V1;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Single disk entry.
 *
 * Generated from protobuf message <code>google.cloud.migrationcenter.v1.DiskEntry</code>
 */
class DiskEntry extends \Google\Protobuf\Internal\Message
{
    /**
     * Disk capacity.
     *
     * Generated from protobuf field <code>int64 capacity_bytes = 1;</code>
     */
    protected $capacity_bytes = 0;
    /**
     * Disk free space.
     *
     * Generated from protobuf field <code>int64 free_bytes = 2;</code>
     */
    protected $free_bytes = 0;
    /**
     * Disk label.
     *
     * Generated from protobuf field <code>string disk_label = 3;</code>
     */
    protected $disk_label = '';
    /**
     * Disk label type (e.g. BIOS/GPT)
     *
     * Generated from protobuf field <code>string disk_label_type = 4;</code>
     */
    protected $disk_label_type = '';
    /**
     * Disks interface type.
     *
     * Generated from protobuf field <code>.google.cloud.migrationcenter.v1.DiskEntry.InterfaceType interface_type = 5;</code>
     */
    protected $interface_type = 0;
    /**
     * Partition layout.
     *
     * Generated from protobuf field <code>.google.cloud.migrationcenter.v1.DiskPartitionList partitions = 6;</code>
     */
    protected $partitions = null;
    /**
     * Disk hardware address (e.g. 0:1 for SCSI).
     *
     * Generated from protobuf field <code>string hw_address = 7;</code>
     */
    protected $hw_address = '';
    protected $platform_specific;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type int|string $capacity_bytes
     *           Disk capacity.
     *     @type int|string $free_bytes
     *           Disk free space.
     *     @type string $disk_label
     *           Disk label.
     *     @type string $disk_label_type
     *           Disk label type (e.g. BIOS/GPT)
     *     @type int $interface_type
     *           Disks interface type.
     *     @type \Google\Cloud\MigrationCenter\V1\DiskPartitionList $partitions
     *           Partition layout.
     *     @type string $hw_address
     *           Disk hardware address (e.g. 0:1 for SCSI).
     *     @type \Google\Cloud\MigrationCenter\V1\VmwareDiskConfig $vmware
     *           VMware disk details.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Google\Cloud\Migrationcenter\V1\Migrationcenter::initOnce();
        parent::__construct($data);
    }

    /**
     * Disk capacity.
     *
     * Generated from protobuf field <code>int64 capacity_bytes = 1;</code>
     * @return int|string
     */
    public function getCapacityBytes()
    {
        return $this->capacity_bytes;
    }

    /**
     * Disk capacity.
     *
     * Generated from protobuf field <code>int64 capacity_bytes = 1;</code>
     * @param int|string $var
     * @return $this
     */
    public function setCapacityBytes($var)
    {
        GPBUtil::checkInt64($var);
        $this->capacity_bytes = $var;

        return $this;
    }

    /**
     * Disk free space.
     *
     * Generated from protobuf field <code>int64 free_bytes = 2;</code>
     * @return int|string
     */
    public function getFreeBytes()
    {
        return $this->free_bytes;
    }

    /**
     * Disk free space.
     *
     * Generated from protobuf field <code>int64 free_bytes = 2;</code>
     * @param int|string $var
     * @return $this
     */
    public function setFreeBytes($var)
    {
        GPBUtil::checkInt64($var);
        $this->free_bytes = $var;

        return $this;
    }

    /**
     * Disk label.
     *
     * Generated from protobuf field <code>string disk_label = 3;</code>
     * @return string
     */
    public function getDiskLabel()
    {
        return $this->disk_label;
    }

    /**
     * Disk label.
     *
     * Generated from protobuf field <code>string disk_label = 3;</code>
     * @param string $var
     * @return $this
     */
    public function setDiskLabel($var)
    {
        GPBUtil::checkString($var, True);
        $this->disk_label = $var;

        return $this;
    }

    /**
     * Disk label type (e.g. BIOS/GPT)
     *
     * Generated from protobuf field <code>string disk_label_type = 4;</code>
     * @return string
     */
    public function getDiskLabelType()
    {
        return $this->disk_label_type;
    }

    /**
     * Disk label type (e.g. BIOS/GPT)
     *
     * Generated from protobuf field <code>string disk_label_type = 4;</code>
     * @param string $var
     * @return $this
     */
    public function setDiskLabelType($var)
    {
        GPBUtil::checkString($var, True);
        $this->disk_label_type = $var;

        return $this;
    }

    /**
     * Disks interface type.
     *
     * Generated from protobuf field <code>.google.cloud.migrationcenter.v1.DiskEntry.InterfaceType interface_type = 5;</code>
     * @return int
     */
    public function getInterfaceType()
    {
        return $this->interface_type;
    }

    /**
     * Disks interface type.
     *
     * Generated from protobuf field <code>.google.cloud.migrationcenter.v1.DiskEntry.InterfaceType interface_type = 5;</code>
     * @param int $var
     * @return $this
     */
    public function setInterfaceType($var)
    {
        GPBUtil::checkEnum($var, \Google\Cloud\MigrationCenter\V1\DiskEntry\InterfaceType::class);
        $this->interface_type = $var;

        return $this;
    }

    /**
     * Partition layout.
     *
     * Generated from protobuf field <code>.google.cloud.migrationcenter.v1.DiskPartitionList partitions = 6;</code>
     * @return \Google\Cloud\MigrationCenter\V1\DiskPartitionList|null
     */
    public function getPartitions()
    {
        return $this->partitions;
    }

    public function hasPartitions()
    {
        return isset($this->partitions);
    }

    public function clearPartitions()
    {
        unset($this->partitions);
    }

    /**
     * Partition layout.
     *
     * Generated from protobuf field <code>.google.cloud.migrationcenter.v1.DiskPartitionList partitions = 6;</code>
     * @param \Google\Cloud\MigrationCenter\V1\DiskPartitionList $var
     * @return $this
     */
    public function setPartitions($var)
    {
        GPBUtil::checkMessage($var, \Google\Cloud\MigrationCenter\V1\DiskPartitionList::class);
        $this->partitions = $var;

        return $this;
    }

    /**
     * Disk hardware address (e.g. 0:1 for SCSI).
     *
     * Generated from protobuf field <code>string hw_address = 7;</code>
     * @return string
     */
    public function getHwAddress()
    {
        return $this->hw_address;
    }

    /**
     * Disk hardware address (e.g. 0:1 for SCSI).
     *
     * Generated from protobuf field <code>string hw_address = 7;</code>
     * @param string $var
     * @return $this
     */
    public function setHwAddress($var)
    {
        GPBUtil::checkString($var, True);
        $this->hw_address = $var;

        return $this;
    }

    /**
     * VMware disk details.
     *
     * Generated from protobuf field <code>.google.cloud.migrationcenter.v1.VmwareDiskConfig vmware = 20;</code>
     * @return \Google\Cloud\MigrationCenter\V1\VmwareDiskConfig|null
     */
    public function getVmware()
    {
        return $this->readOneof(20);
    }

    public function hasVmware()
    {
        return $this->hasOneof(20);
    }

    /**
     * VMware disk details.
     *
     * Generated from protobuf field <code>.google.cloud.migrationcenter.v1.VmwareDiskConfig vmware = 20;</code>
     * @param \Google\Cloud\MigrationCenter\V1\VmwareDiskConfig $var
     * @return $this
     */
    public function setVmware($var)
    {
        GPBUtil::checkMessage($var, \Google\Cloud\MigrationCenter\V1\VmwareDiskConfig::class);
        $this->writeOneof(20, $var);

        return $this;
    }

    /**
     * @return string
     */
    public function getPlatformSpecific()
    {
        return $this->whichOneof("platform_specific");
    }

}

