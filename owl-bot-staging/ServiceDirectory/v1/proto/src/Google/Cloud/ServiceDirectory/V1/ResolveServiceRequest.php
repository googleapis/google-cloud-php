<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/cloud/servicedirectory/v1/lookup_service.proto

namespace Google\Cloud\ServiceDirectory\V1;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * The request message for
 * [LookupService.ResolveService][google.cloud.servicedirectory.v1.LookupService.ResolveService].
 * Looks up a service by its name, returns the service and its endpoints.
 *
 * Generated from protobuf message <code>google.cloud.servicedirectory.v1.ResolveServiceRequest</code>
 */
class ResolveServiceRequest extends \Google\Protobuf\Internal\Message
{
    /**
     * Required. The name of the service to resolve.
     *
     * Generated from protobuf field <code>string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {</code>
     */
    protected $name = '';
    /**
     * Optional. The maximum number of endpoints to return. Defaults to 25.
     * Maximum is 100. If a value less than one is specified, the Default is used.
     * If a value greater than the Maximum is specified, the Maximum is used.
     *
     * Generated from protobuf field <code>int32 max_endpoints = 2 [(.google.api.field_behavior) = OPTIONAL];</code>
     */
    protected $max_endpoints = 0;
    /**
     * Optional. The filter applied to the endpoints of the resolved service.
     * General filter string syntax:
     * <field> <operator> <value> (<logical connector>)
     * <field> can be "name" or "metadata.<key>" for map field.
     * <operator> can be "<, >, <=, >=, !=, =, :". Of which ":" means HAS and is
     * roughly the same as "=".
     * <value> must be the same data type as the field.
     * <logical connector> can be "AND, OR, NOT".
     * Examples of valid filters:
     * * "metadata.owner" returns Endpoints that have a label with the
     *   key "owner", this is the same as "metadata:owner"
     * * "metadata.protocol=gRPC" returns Endpoints that have key/value
     *   "protocol=gRPC"
     * * "metadata.owner!=sd AND metadata.foo=bar" returns
     *   Endpoints that have "owner" field in metadata with a value that is not
     *   "sd" AND have the key/value foo=bar.
     *
     * Generated from protobuf field <code>string endpoint_filter = 3 [(.google.api.field_behavior) = OPTIONAL];</code>
     */
    protected $endpoint_filter = '';

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $name
     *           Required. The name of the service to resolve.
     *     @type int $max_endpoints
     *           Optional. The maximum number of endpoints to return. Defaults to 25.
     *           Maximum is 100. If a value less than one is specified, the Default is used.
     *           If a value greater than the Maximum is specified, the Maximum is used.
     *     @type string $endpoint_filter
     *           Optional. The filter applied to the endpoints of the resolved service.
     *           General filter string syntax:
     *           <field> <operator> <value> (<logical connector>)
     *           <field> can be "name" or "metadata.<key>" for map field.
     *           <operator> can be "<, >, <=, >=, !=, =, :". Of which ":" means HAS and is
     *           roughly the same as "=".
     *           <value> must be the same data type as the field.
     *           <logical connector> can be "AND, OR, NOT".
     *           Examples of valid filters:
     *           * "metadata.owner" returns Endpoints that have a label with the
     *             key "owner", this is the same as "metadata:owner"
     *           * "metadata.protocol=gRPC" returns Endpoints that have key/value
     *             "protocol=gRPC"
     *           * "metadata.owner!=sd AND metadata.foo=bar" returns
     *             Endpoints that have "owner" field in metadata with a value that is not
     *             "sd" AND have the key/value foo=bar.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Google\Cloud\Servicedirectory\V1\LookupService::initOnce();
        parent::__construct($data);
    }

    /**
     * Required. The name of the service to resolve.
     *
     * Generated from protobuf field <code>string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {</code>
     * @return string
     */
    public function getName()
    {
        return $this->name;
    }

    /**
     * Required. The name of the service to resolve.
     *
     * Generated from protobuf field <code>string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {</code>
     * @param string $var
     * @return $this
     */
    public function setName($var)
    {
        GPBUtil::checkString($var, True);
        $this->name = $var;

        return $this;
    }

    /**
     * Optional. The maximum number of endpoints to return. Defaults to 25.
     * Maximum is 100. If a value less than one is specified, the Default is used.
     * If a value greater than the Maximum is specified, the Maximum is used.
     *
     * Generated from protobuf field <code>int32 max_endpoints = 2 [(.google.api.field_behavior) = OPTIONAL];</code>
     * @return int
     */
    public function getMaxEndpoints()
    {
        return $this->max_endpoints;
    }

    /**
     * Optional. The maximum number of endpoints to return. Defaults to 25.
     * Maximum is 100. If a value less than one is specified, the Default is used.
     * If a value greater than the Maximum is specified, the Maximum is used.
     *
     * Generated from protobuf field <code>int32 max_endpoints = 2 [(.google.api.field_behavior) = OPTIONAL];</code>
     * @param int $var
     * @return $this
     */
    public function setMaxEndpoints($var)
    {
        GPBUtil::checkInt32($var);
        $this->max_endpoints = $var;

        return $this;
    }

    /**
     * Optional. The filter applied to the endpoints of the resolved service.
     * General filter string syntax:
     * <field> <operator> <value> (<logical connector>)
     * <field> can be "name" or "metadata.<key>" for map field.
     * <operator> can be "<, >, <=, >=, !=, =, :". Of which ":" means HAS and is
     * roughly the same as "=".
     * <value> must be the same data type as the field.
     * <logical connector> can be "AND, OR, NOT".
     * Examples of valid filters:
     * * "metadata.owner" returns Endpoints that have a label with the
     *   key "owner", this is the same as "metadata:owner"
     * * "metadata.protocol=gRPC" returns Endpoints that have key/value
     *   "protocol=gRPC"
     * * "metadata.owner!=sd AND metadata.foo=bar" returns
     *   Endpoints that have "owner" field in metadata with a value that is not
     *   "sd" AND have the key/value foo=bar.
     *
     * Generated from protobuf field <code>string endpoint_filter = 3 [(.google.api.field_behavior) = OPTIONAL];</code>
     * @return string
     */
    public function getEndpointFilter()
    {
        return $this->endpoint_filter;
    }

    /**
     * Optional. The filter applied to the endpoints of the resolved service.
     * General filter string syntax:
     * <field> <operator> <value> (<logical connector>)
     * <field> can be "name" or "metadata.<key>" for map field.
     * <operator> can be "<, >, <=, >=, !=, =, :". Of which ":" means HAS and is
     * roughly the same as "=".
     * <value> must be the same data type as the field.
     * <logical connector> can be "AND, OR, NOT".
     * Examples of valid filters:
     * * "metadata.owner" returns Endpoints that have a label with the
     *   key "owner", this is the same as "metadata:owner"
     * * "metadata.protocol=gRPC" returns Endpoints that have key/value
     *   "protocol=gRPC"
     * * "metadata.owner!=sd AND metadata.foo=bar" returns
     *   Endpoints that have "owner" field in metadata with a value that is not
     *   "sd" AND have the key/value foo=bar.
     *
     * Generated from protobuf field <code>string endpoint_filter = 3 [(.google.api.field_behavior) = OPTIONAL];</code>
     * @param string $var
     * @return $this
     */
    public function setEndpointFilter($var)
    {
        GPBUtil::checkString($var, True);
        $this->endpoint_filter = $var;

        return $this;
    }

}

