<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/maps/fleetengine/v1/fleetengine.proto

namespace Google\Maps\FleetEngine\V1;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Describes a vehicle attribute as a key-value pair. The "key:value" string
 * length cannot exceed 256 characters.
 *
 * Generated from protobuf message <code>maps.fleetengine.v1.VehicleAttribute</code>
 */
class VehicleAttribute extends \Google\Protobuf\Internal\Message
{
    /**
     * The attribute's key. Keys may not contain the colon character (:).
     *
     * Generated from protobuf field <code>string key = 1;</code>
     */
    protected $key = '';
    /**
     * The attribute's value.
     *
     * Generated from protobuf field <code>string value = 2;</code>
     */
    protected $value = '';
    protected $vehicle_attribute_value;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $key
     *           The attribute's key. Keys may not contain the colon character (:).
     *     @type string $value
     *           The attribute's value.
     *     @type string $string_value
     *           String typed attribute value.
     *           Note: This is identical to the `value` field which will eventually be
     *           deprecated. For create or update methods, either field can be used, but
     *           it's strongly recommended to use `string_value`. If both `string_value`
     *           and `value` are set, they must be identical or an error will be thrown.
     *           Both fields are populated in responses.
     *     @type bool $bool_value
     *           Boolean typed attribute value.
     *     @type float $number_value
     *           Double typed attribute value.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Google\Maps\Fleetengine\V1\Fleetengine::initOnce();
        parent::__construct($data);
    }

    /**
     * The attribute's key. Keys may not contain the colon character (:).
     *
     * Generated from protobuf field <code>string key = 1;</code>
     * @return string
     */
    public function getKey()
    {
        return $this->key;
    }

    /**
     * The attribute's key. Keys may not contain the colon character (:).
     *
     * Generated from protobuf field <code>string key = 1;</code>
     * @param string $var
     * @return $this
     */
    public function setKey($var)
    {
        GPBUtil::checkString($var, True);
        $this->key = $var;

        return $this;
    }

    /**
     * The attribute's value.
     *
     * Generated from protobuf field <code>string value = 2;</code>
     * @return string
     */
    public function getValue()
    {
        return $this->value;
    }

    /**
     * The attribute's value.
     *
     * Generated from protobuf field <code>string value = 2;</code>
     * @param string $var
     * @return $this
     */
    public function setValue($var)
    {
        GPBUtil::checkString($var, True);
        $this->value = $var;

        return $this;
    }

    /**
     * String typed attribute value.
     * Note: This is identical to the `value` field which will eventually be
     * deprecated. For create or update methods, either field can be used, but
     * it's strongly recommended to use `string_value`. If both `string_value`
     * and `value` are set, they must be identical or an error will be thrown.
     * Both fields are populated in responses.
     *
     * Generated from protobuf field <code>string string_value = 3;</code>
     * @return string
     */
    public function getStringValue()
    {
        return $this->readOneof(3);
    }

    public function hasStringValue()
    {
        return $this->hasOneof(3);
    }

    /**
     * String typed attribute value.
     * Note: This is identical to the `value` field which will eventually be
     * deprecated. For create or update methods, either field can be used, but
     * it's strongly recommended to use `string_value`. If both `string_value`
     * and `value` are set, they must be identical or an error will be thrown.
     * Both fields are populated in responses.
     *
     * Generated from protobuf field <code>string string_value = 3;</code>
     * @param string $var
     * @return $this
     */
    public function setStringValue($var)
    {
        GPBUtil::checkString($var, True);
        $this->writeOneof(3, $var);

        return $this;
    }

    /**
     * Boolean typed attribute value.
     *
     * Generated from protobuf field <code>bool bool_value = 4;</code>
     * @return bool
     */
    public function getBoolValue()
    {
        return $this->readOneof(4);
    }

    public function hasBoolValue()
    {
        return $this->hasOneof(4);
    }

    /**
     * Boolean typed attribute value.
     *
     * Generated from protobuf field <code>bool bool_value = 4;</code>
     * @param bool $var
     * @return $this
     */
    public function setBoolValue($var)
    {
        GPBUtil::checkBool($var);
        $this->writeOneof(4, $var);

        return $this;
    }

    /**
     * Double typed attribute value.
     *
     * Generated from protobuf field <code>double number_value = 5;</code>
     * @return float
     */
    public function getNumberValue()
    {
        return $this->readOneof(5);
    }

    public function hasNumberValue()
    {
        return $this->hasOneof(5);
    }

    /**
     * Double typed attribute value.
     *
     * Generated from protobuf field <code>double number_value = 5;</code>
     * @param float $var
     * @return $this
     */
    public function setNumberValue($var)
    {
        GPBUtil::checkDouble($var);
        $this->writeOneof(5, $var);

        return $this;
    }

    /**
     * @return string
     */
    public function getVehicleAttributeValue()
    {
        return $this->whichOneof("vehicle_attribute_value");
    }

}

