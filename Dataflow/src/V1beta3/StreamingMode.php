<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/dataflow/v1beta3/environment.proto

namespace Google\Cloud\Dataflow\V1beta3;

use UnexpectedValueException;

/**
 * Specifies the Streaming Engine message processing guarantees. Reduces cost
 * and latency but might result in duplicate messages written to storage.
 * Designed to run simple mapping streaming ETL jobs at the lowest cost.
 * For example, Change Data Capture (CDC) to BigQuery is a canonical use
 * case. For more information, see
 * [Set the pipeline streaming
 * mode](https://cloud.google.com/dataflow/docs/guides/streaming-modes).
 *
 * Protobuf type <code>google.dataflow.v1beta3.StreamingMode</code>
 */
class StreamingMode
{
    /**
     * Run in the default mode.
     *
     * Generated from protobuf enum <code>STREAMING_MODE_UNSPECIFIED = 0;</code>
     */
    const STREAMING_MODE_UNSPECIFIED = 0;
    /**
     * In this mode, message deduplication is performed against persistent state
     * to make sure each message is processed and committed to storage exactly
     * once.
     *
     * Generated from protobuf enum <code>STREAMING_MODE_EXACTLY_ONCE = 1;</code>
     */
    const STREAMING_MODE_EXACTLY_ONCE = 1;
    /**
     * Message deduplication is not performed. Messages might be processed
     * multiple times, and the results are applied multiple times.
     * Note: Setting this value also enables Streaming Engine and
     * Streaming Engine resource-based billing.
     *
     * Generated from protobuf enum <code>STREAMING_MODE_AT_LEAST_ONCE = 2;</code>
     */
    const STREAMING_MODE_AT_LEAST_ONCE = 2;

    private static $valueToName = [
        self::STREAMING_MODE_UNSPECIFIED => 'STREAMING_MODE_UNSPECIFIED',
        self::STREAMING_MODE_EXACTLY_ONCE => 'STREAMING_MODE_EXACTLY_ONCE',
        self::STREAMING_MODE_AT_LEAST_ONCE => 'STREAMING_MODE_AT_LEAST_ONCE',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

