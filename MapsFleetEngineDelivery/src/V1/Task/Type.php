<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/maps/fleetengine/delivery/v1/tasks.proto

namespace Google\Maps\FleetEngine\Delivery\V1\Task;

use UnexpectedValueException;

/**
 * The type of Task.
 *
 * Protobuf type <code>maps.fleetengine.delivery.v1.Task.Type</code>
 */
class Type
{
    /**
     * Default, the Task type is unknown.
     *
     * Generated from protobuf enum <code>TYPE_UNSPECIFIED = 0;</code>
     */
    const TYPE_UNSPECIFIED = 0;
    /**
     * A pickup Task is the action taken for picking up a shipment from a
     * customer. Depot or feeder vehicle pickups should use the `SCHEDULED_STOP`
     * type.
     *
     * Generated from protobuf enum <code>PICKUP = 1;</code>
     */
    const PICKUP = 1;
    /**
     * A delivery Task is the action taken for delivering a shipment to an end
     * customer. Depot or feeder vehicle dropoffs should use the
     * `SCHEDULED_STOP` type.
     *
     * Generated from protobuf enum <code>DELIVERY = 2;</code>
     */
    const DELIVERY = 2;
    /**
     * A scheduled stop Task is used for planning purposes. For example, it
     * could represent picking up or dropping off shipments from feeder vehicles
     * or depots. It shouldn't be used for any shipments that are picked up or
     * dropped off from an end customer.
     *
     * Generated from protobuf enum <code>SCHEDULED_STOP = 3;</code>
     */
    const SCHEDULED_STOP = 3;
    /**
     * A Task that means the Vehicle is not available for service. For example,
     * this can happen when the driver takes a break, or when the vehicle
     * is being refueled.
     *
     * Generated from protobuf enum <code>UNAVAILABLE = 4;</code>
     */
    const UNAVAILABLE = 4;

    private static $valueToName = [
        self::TYPE_UNSPECIFIED => 'TYPE_UNSPECIFIED',
        self::PICKUP => 'PICKUP',
        self::DELIVERY => 'DELIVERY',
        self::SCHEDULED_STOP => 'SCHEDULED_STOP',
        self::UNAVAILABLE => 'UNAVAILABLE',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}


