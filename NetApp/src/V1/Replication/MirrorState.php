<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/cloud/netapp/v1/replication.proto

namespace Google\Cloud\NetApp\V1\Replication;

use UnexpectedValueException;

/**
 * Mirroring states.
 * No new value is expected to be added in future.
 *
 * Protobuf type <code>google.cloud.netapp.v1.Replication.MirrorState</code>
 */
class MirrorState
{
    /**
     * Unspecified MirrorState
     *
     * Generated from protobuf enum <code>MIRROR_STATE_UNSPECIFIED = 0;</code>
     */
    const MIRROR_STATE_UNSPECIFIED = 0;
    /**
     * Destination volume is being prepared.
     *
     * Generated from protobuf enum <code>PREPARING = 1;</code>
     */
    const PREPARING = 1;
    /**
     * Destination volume has been initialized and is ready to receive
     * replication transfers.
     *
     * Generated from protobuf enum <code>MIRRORED = 2;</code>
     */
    const MIRRORED = 2;
    /**
     * Destination volume is not receiving replication transfers.
     *
     * Generated from protobuf enum <code>STOPPED = 3;</code>
     */
    const STOPPED = 3;
    /**
     * Replication is in progress.
     *
     * Generated from protobuf enum <code>TRANSFERRING = 4;</code>
     */
    const TRANSFERRING = 4;

    private static $valueToName = [
        self::MIRROR_STATE_UNSPECIFIED => 'MIRROR_STATE_UNSPECIFIED',
        self::PREPARING => 'PREPARING',
        self::MIRRORED => 'MIRRORED',
        self::STOPPED => 'STOPPED',
        self::TRANSFERRING => 'TRANSFERRING',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}


