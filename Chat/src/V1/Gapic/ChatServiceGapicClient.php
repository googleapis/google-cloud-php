<?php
/*
 * Copyright 2024 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * GENERATED CODE WARNING
 * Generated by gapic-generator-php from the file
 * https://github.com/googleapis/googleapis/blob/master/google/chat/v1/chat_service.proto
 * Updates to the above are reflected here through a refresh process.
 */

namespace Google\Chat\V1\Gapic;

use Google\ApiCore\ApiException;
use Google\ApiCore\CredentialsWrapper;
use Google\ApiCore\GapicClientTrait;
use Google\ApiCore\PathTemplate;
use Google\ApiCore\RequestParamsHeaderDescriptor;
use Google\ApiCore\RetrySettings;
use Google\ApiCore\Transport\TransportInterface;
use Google\ApiCore\ValidationException;
use Google\Auth\FetchAuthTokenInterface;
use Google\Chat\V1\Attachment;
use Google\Chat\V1\CompleteImportSpaceRequest;
use Google\Chat\V1\CompleteImportSpaceResponse;
use Google\Chat\V1\CreateMembershipRequest;
use Google\Chat\V1\CreateMessageRequest;
use Google\Chat\V1\CreateReactionRequest;
use Google\Chat\V1\CreateSpaceRequest;
use Google\Chat\V1\DeleteMembershipRequest;
use Google\Chat\V1\DeleteMessageRequest;
use Google\Chat\V1\DeleteReactionRequest;
use Google\Chat\V1\DeleteSpaceRequest;
use Google\Chat\V1\FindDirectMessageRequest;
use Google\Chat\V1\GetAttachmentRequest;
use Google\Chat\V1\GetMembershipRequest;
use Google\Chat\V1\GetMessageRequest;
use Google\Chat\V1\GetSpaceRequest;
use Google\Chat\V1\ListMembershipsRequest;
use Google\Chat\V1\ListMembershipsResponse;
use Google\Chat\V1\ListMessagesRequest;
use Google\Chat\V1\ListMessagesResponse;
use Google\Chat\V1\ListReactionsRequest;
use Google\Chat\V1\ListReactionsResponse;
use Google\Chat\V1\ListSpacesRequest;
use Google\Chat\V1\ListSpacesResponse;
use Google\Chat\V1\Membership;
use Google\Chat\V1\Message;
use Google\Chat\V1\Reaction;
use Google\Chat\V1\SetUpSpaceRequest;
use Google\Chat\V1\Space;
use Google\Chat\V1\UpdateMessageRequest;
use Google\Chat\V1\UpdateSpaceRequest;
use Google\Chat\V1\UploadAttachmentRequest;
use Google\Chat\V1\UploadAttachmentResponse;
use Google\Protobuf\FieldMask;
use Google\Protobuf\GPBEmpty;

/**
 * Service Description: Enables developers to build Chat apps and
 * integrations on Google Chat Platform.
 *
 * This class provides the ability to make remote calls to the backing service through method
 * calls that map to API methods. Sample code to get started:
 *
 * ```
 * $chatServiceClient = new ChatServiceClient();
 * try {
 *     $formattedName = $chatServiceClient->spaceName('[SPACE]');
 *     $response = $chatServiceClient->completeImportSpace($formattedName);
 * } finally {
 *     $chatServiceClient->close();
 * }
 * ```
 *
 * Many parameters require resource names to be formatted in a particular way. To
 * assist with these names, this class includes a format method for each type of
 * name, and additionally a parseName method to extract the individual identifiers
 * contained within formatted names that are returned by the API.
 *
 * @deprecated This class will be removed in the next major version update.
 */
class ChatServiceGapicClient
{
    use GapicClientTrait;

    /** The name of the service. */
    const SERVICE_NAME = 'google.chat.v1.ChatService';

    /**
     * The default address of the service.
     *
     * @deprecated SERVICE_ADDRESS_TEMPLATE should be used instead.
     */
    const SERVICE_ADDRESS = 'chat.googleapis.com';

    /** The address template of the service. */
    private const SERVICE_ADDRESS_TEMPLATE = 'chat.UNIVERSE_DOMAIN';

    /** The default port of the service. */
    const DEFAULT_SERVICE_PORT = 443;

    /** The name of the code generator, to be included in the agent header. */
    const CODEGEN_NAME = 'gapic';

    /** The default scopes required by the service. */
    public static $serviceScopes = [
        'https://www.googleapis.com/auth/chat.bot',
        'https://www.googleapis.com/auth/chat.delete',
        'https://www.googleapis.com/auth/chat.import',
        'https://www.googleapis.com/auth/chat.memberships',
        'https://www.googleapis.com/auth/chat.memberships.app',
        'https://www.googleapis.com/auth/chat.memberships.readonly',
        'https://www.googleapis.com/auth/chat.messages',
        'https://www.googleapis.com/auth/chat.messages.create',
        'https://www.googleapis.com/auth/chat.messages.reactions',
        'https://www.googleapis.com/auth/chat.messages.reactions.create',
        'https://www.googleapis.com/auth/chat.messages.reactions.readonly',
        'https://www.googleapis.com/auth/chat.messages.readonly',
        'https://www.googleapis.com/auth/chat.spaces',
        'https://www.googleapis.com/auth/chat.spaces.create',
        'https://www.googleapis.com/auth/chat.spaces.readonly',
    ];

    private static $attachmentNameTemplate;

    private static $membershipNameTemplate;

    private static $messageNameTemplate;

    private static $quotedMessageMetadataNameTemplate;

    private static $reactionNameTemplate;

    private static $spaceNameTemplate;

    private static $threadNameTemplate;

    private static $pathTemplateMap;

    private static function getClientDefaults()
    {
        return [
            'serviceName' => self::SERVICE_NAME,
            'apiEndpoint' => self::SERVICE_ADDRESS . ':' . self::DEFAULT_SERVICE_PORT,
            'clientConfig' => __DIR__ . '/../resources/chat_service_client_config.json',
            'descriptorsConfigPath' => __DIR__ . '/../resources/chat_service_descriptor_config.php',
            'gcpApiConfigPath' => __DIR__ . '/../resources/chat_service_grpc_config.json',
            'credentialsConfig' => [
                'defaultScopes' => self::$serviceScopes,
            ],
            'transportConfig' => [
                'rest' => [
                    'restClientConfigPath' => __DIR__ . '/../resources/chat_service_rest_client_config.php',
                ],
            ],
        ];
    }

    private static function getAttachmentNameTemplate()
    {
        if (self::$attachmentNameTemplate == null) {
            self::$attachmentNameTemplate = new PathTemplate('spaces/{space}/messages/{message}/attachments/{attachment}');
        }

        return self::$attachmentNameTemplate;
    }

    private static function getMembershipNameTemplate()
    {
        if (self::$membershipNameTemplate == null) {
            self::$membershipNameTemplate = new PathTemplate('spaces/{space}/members/{member}');
        }

        return self::$membershipNameTemplate;
    }

    private static function getMessageNameTemplate()
    {
        if (self::$messageNameTemplate == null) {
            self::$messageNameTemplate = new PathTemplate('spaces/{space}/messages/{message}');
        }

        return self::$messageNameTemplate;
    }

    private static function getQuotedMessageMetadataNameTemplate()
    {
        if (self::$quotedMessageMetadataNameTemplate == null) {
            self::$quotedMessageMetadataNameTemplate = new PathTemplate('spaces/{space}/messages/{message}/quotedMessageMetadata/{quoted_message_metadata}');
        }

        return self::$quotedMessageMetadataNameTemplate;
    }

    private static function getReactionNameTemplate()
    {
        if (self::$reactionNameTemplate == null) {
            self::$reactionNameTemplate = new PathTemplate('spaces/{space}/messages/{message}/reactions/{reaction}');
        }

        return self::$reactionNameTemplate;
    }

    private static function getSpaceNameTemplate()
    {
        if (self::$spaceNameTemplate == null) {
            self::$spaceNameTemplate = new PathTemplate('spaces/{space}');
        }

        return self::$spaceNameTemplate;
    }

    private static function getThreadNameTemplate()
    {
        if (self::$threadNameTemplate == null) {
            self::$threadNameTemplate = new PathTemplate('spaces/{space}/threads/{thread}');
        }

        return self::$threadNameTemplate;
    }

    private static function getPathTemplateMap()
    {
        if (self::$pathTemplateMap == null) {
            self::$pathTemplateMap = [
                'attachment' => self::getAttachmentNameTemplate(),
                'membership' => self::getMembershipNameTemplate(),
                'message' => self::getMessageNameTemplate(),
                'quotedMessageMetadata' => self::getQuotedMessageMetadataNameTemplate(),
                'reaction' => self::getReactionNameTemplate(),
                'space' => self::getSpaceNameTemplate(),
                'thread' => self::getThreadNameTemplate(),
            ];
        }

        return self::$pathTemplateMap;
    }

    /**
     * Formats a string containing the fully-qualified path to represent a attachment
     * resource.
     *
     * @param string $space
     * @param string $message
     * @param string $attachment
     *
     * @return string The formatted attachment resource.
     */
    public static function attachmentName($space, $message, $attachment)
    {
        return self::getAttachmentNameTemplate()->render([
            'space' => $space,
            'message' => $message,
            'attachment' => $attachment,
        ]);
    }

    /**
     * Formats a string containing the fully-qualified path to represent a membership
     * resource.
     *
     * @param string $space
     * @param string $member
     *
     * @return string The formatted membership resource.
     */
    public static function membershipName($space, $member)
    {
        return self::getMembershipNameTemplate()->render([
            'space' => $space,
            'member' => $member,
        ]);
    }

    /**
     * Formats a string containing the fully-qualified path to represent a message
     * resource.
     *
     * @param string $space
     * @param string $message
     *
     * @return string The formatted message resource.
     */
    public static function messageName($space, $message)
    {
        return self::getMessageNameTemplate()->render([
            'space' => $space,
            'message' => $message,
        ]);
    }

    /**
     * Formats a string containing the fully-qualified path to represent a
     * quoted_message_metadata resource.
     *
     * @param string $space
     * @param string $message
     * @param string $quotedMessageMetadata
     *
     * @return string The formatted quoted_message_metadata resource.
     */
    public static function quotedMessageMetadataName($space, $message, $quotedMessageMetadata)
    {
        return self::getQuotedMessageMetadataNameTemplate()->render([
            'space' => $space,
            'message' => $message,
            'quoted_message_metadata' => $quotedMessageMetadata,
        ]);
    }

    /**
     * Formats a string containing the fully-qualified path to represent a reaction
     * resource.
     *
     * @param string $space
     * @param string $message
     * @param string $reaction
     *
     * @return string The formatted reaction resource.
     */
    public static function reactionName($space, $message, $reaction)
    {
        return self::getReactionNameTemplate()->render([
            'space' => $space,
            'message' => $message,
            'reaction' => $reaction,
        ]);
    }

    /**
     * Formats a string containing the fully-qualified path to represent a space
     * resource.
     *
     * @param string $space
     *
     * @return string The formatted space resource.
     */
    public static function spaceName($space)
    {
        return self::getSpaceNameTemplate()->render([
            'space' => $space,
        ]);
    }

    /**
     * Formats a string containing the fully-qualified path to represent a thread
     * resource.
     *
     * @param string $space
     * @param string $thread
     *
     * @return string The formatted thread resource.
     */
    public static function threadName($space, $thread)
    {
        return self::getThreadNameTemplate()->render([
            'space' => $space,
            'thread' => $thread,
        ]);
    }

    /**
     * Parses a formatted name string and returns an associative array of the components in the name.
     * The following name formats are supported:
     * Template: Pattern
     * - attachment: spaces/{space}/messages/{message}/attachments/{attachment}
     * - membership: spaces/{space}/members/{member}
     * - message: spaces/{space}/messages/{message}
     * - quotedMessageMetadata: spaces/{space}/messages/{message}/quotedMessageMetadata/{quoted_message_metadata}
     * - reaction: spaces/{space}/messages/{message}/reactions/{reaction}
     * - space: spaces/{space}
     * - thread: spaces/{space}/threads/{thread}
     *
     * The optional $template argument can be supplied to specify a particular pattern,
     * and must match one of the templates listed above. If no $template argument is
     * provided, or if the $template argument does not match one of the templates
     * listed, then parseName will check each of the supported templates, and return
     * the first match.
     *
     * @param string $formattedName The formatted name string
     * @param string $template      Optional name of template to match
     *
     * @return array An associative array from name component IDs to component values.
     *
     * @throws ValidationException If $formattedName could not be matched.
     */
    public static function parseName($formattedName, $template = null)
    {
        $templateMap = self::getPathTemplateMap();
        if ($template) {
            if (!isset($templateMap[$template])) {
                throw new ValidationException("Template name $template does not exist");
            }

            return $templateMap[$template]->match($formattedName);
        }

        foreach ($templateMap as $templateName => $pathTemplate) {
            try {
                return $pathTemplate->match($formattedName);
            } catch (ValidationException $ex) {
                // Swallow the exception to continue trying other path templates
            }
        }

        throw new ValidationException("Input did not match any known format. Input: $formattedName");
    }

    /**
     * Constructor.
     *
     * @param array $options {
     *     Optional. Options for configuring the service API wrapper.
     *
     *     @type string $apiEndpoint
     *           The address of the API remote host. May optionally include the port, formatted
     *           as "<uri>:<port>". Default 'chat.googleapis.com:443'.
     *     @type string|array|FetchAuthTokenInterface|CredentialsWrapper $credentials
     *           The credentials to be used by the client to authorize API calls. This option
     *           accepts either a path to a credentials file, or a decoded credentials file as a
     *           PHP array.
     *           *Advanced usage*: In addition, this option can also accept a pre-constructed
     *           {@see \Google\Auth\FetchAuthTokenInterface} object or
     *           {@see \Google\ApiCore\CredentialsWrapper} object. Note that when one of these
     *           objects are provided, any settings in $credentialsConfig will be ignored.
     *     @type array $credentialsConfig
     *           Options used to configure credentials, including auth token caching, for the
     *           client. For a full list of supporting configuration options, see
     *           {@see \Google\ApiCore\CredentialsWrapper::build()} .
     *     @type bool $disableRetries
     *           Determines whether or not retries defined by the client configuration should be
     *           disabled. Defaults to `false`.
     *     @type string|array $clientConfig
     *           Client method configuration, including retry settings. This option can be either
     *           a path to a JSON file, or a PHP array containing the decoded JSON data. By
     *           default this settings points to the default client config file, which is
     *           provided in the resources folder.
     *     @type string|TransportInterface $transport
     *           The transport used for executing network requests. May be either the string
     *           `rest` or `grpc`. Defaults to `grpc` if gRPC support is detected on the system.
     *           *Advanced usage*: Additionally, it is possible to pass in an already
     *           instantiated {@see \Google\ApiCore\Transport\TransportInterface} object. Note
     *           that when this object is provided, any settings in $transportConfig, and any
     *           $apiEndpoint setting, will be ignored.
     *     @type array $transportConfig
     *           Configuration options that will be used to construct the transport. Options for
     *           each supported transport type should be passed in a key for that transport. For
     *           example:
     *           $transportConfig = [
     *               'grpc' => [...],
     *               'rest' => [...],
     *           ];
     *           See the {@see \Google\ApiCore\Transport\GrpcTransport::build()} and
     *           {@see \Google\ApiCore\Transport\RestTransport::build()} methods for the
     *           supported options.
     *     @type callable $clientCertSource
     *           A callable which returns the client cert as a string. This can be used to
     *           provide a certificate and private key to the transport layer for mTLS.
     * }
     *
     * @throws ValidationException
     */
    public function __construct(array $options = [])
    {
        $clientOptions = $this->buildClientOptions($options);
        $this->setClientOptions($clientOptions);
    }

    /**
     * Completes the
     * [import process](https://developers.google.com/chat/api/guides/import-data)
     * for the specified space and makes it visible to users.
     * Requires app authentication and domain-wide delegation. For more
     * information, see [Authorize Google Chat apps to import
     * data](https://developers.google.com/chat/api/guides/authorize-import).
     *
     * Sample code:
     * ```
     * $chatServiceClient = new ChatServiceClient();
     * try {
     *     $formattedName = $chatServiceClient->spaceName('[SPACE]');
     *     $response = $chatServiceClient->completeImportSpace($formattedName);
     * } finally {
     *     $chatServiceClient->close();
     * }
     * ```
     *
     * @param string $name         Required. Resource name of the import mode space.
     *
     *                             Format: `spaces/{space}`
     * @param array  $optionalArgs {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return \Google\Chat\V1\CompleteImportSpaceResponse
     *
     * @throws ApiException if the remote call fails
     */
    public function completeImportSpace($name, array $optionalArgs = [])
    {
        $request = new CompleteImportSpaceRequest();
        $requestParamHeaders = [];
        $request->setName($name);
        $requestParamHeaders['name'] = $name;
        $requestParams = new RequestParamsHeaderDescriptor($requestParamHeaders);
        $optionalArgs['headers'] = isset($optionalArgs['headers']) ? array_merge($requestParams->getHeader(), $optionalArgs['headers']) : $requestParams->getHeader();
        return $this->startCall('CompleteImportSpace', CompleteImportSpaceResponse::class, $optionalArgs, $request)->wait();
    }

    /**
     * Creates a human membership or app membership for the calling app. Creating
     * memberships for other apps isn't supported. For an example, see
     * [ Create a
     * membership](https://developers.google.com/chat/api/guides/v1/members/create).
     * When creating a membership, if the specified member has their auto-accept
     * policy turned off, then they're invited, and must accept the space
     * invitation before joining. Otherwise, creating a membership adds the member
     * directly to the specified space. Requires [user
     * authentication](https://developers.google.com/chat/api/guides/auth/users).
     *
     * To specify the member to add, set the `membership.member.name` in the
     * `CreateMembershipRequest`:
     *
     * - To add the calling app to a space or a direct message between two human
     * users, use `users/app`. Unable to add other
     * apps to the space.
     *
     * - To add a human user, use `users/{user}`, where `{user}` can be the email
     * address for the user. For users in the same Workspace organization `{user}`
     * can also be the `id` for the person from the People API, or the `id` for
     * the user in the Directory API. For example, if the People API Person
     * profile ID for `user&#64;example.com` is `123456789`, you can add the user to
     * the space by setting the `membership.member.name` to
     * `users/user&#64;example.com` or `users/123456789`.
     *
     * Sample code:
     * ```
     * $chatServiceClient = new ChatServiceClient();
     * try {
     *     $formattedParent = $chatServiceClient->spaceName('[SPACE]');
     *     $membership = new Membership();
     *     $response = $chatServiceClient->createMembership($formattedParent, $membership);
     * } finally {
     *     $chatServiceClient->close();
     * }
     * ```
     *
     * @param string     $parent       Required. The resource name of the space for which to create the
     *                                 membership.
     *
     *                                 Format: spaces/{space}
     * @param Membership $membership   Required. The membership relation to create.
     *                                 The `memberType` field must contain a user with the `user.name` and
     *                                 `user.type` fields populated. The server will assign a resource name
     *                                 and overwrite anything specified.
     *                                 When a Chat app creates a membership relation for a human user, it must use
     *                                 the `chat.memberships` scope, set `user.type` to `HUMAN`, and set
     *                                 `user.name` with format `users/{user}`, where `{user}` can be the email
     *                                 address for the user. For users in the same Workspace organization `{user}`
     *                                 can also be the `id` of the
     *                                 [person](https://developers.google.com/people/api/rest/v1/people) from the
     *                                 People API, or the `id` for the user in the Directory API. For example, if
     *                                 the People API Person profile ID for `user&#64;example.com` is `123456789`, you
     *                                 can add the user to the space by setting the `membership.member.name` to
     *                                 `users/user&#64;example.com` or `users/123456789`. When a Chat app creates a
     *                                 membership relation for itself, it must use the `chat.memberships.app`
     *                                 scope, set `user.type` to `BOT`, and set `user.name` to `users/app`.
     * @param array      $optionalArgs {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return \Google\Chat\V1\Membership
     *
     * @throws ApiException if the remote call fails
     */
    public function createMembership($parent, $membership, array $optionalArgs = [])
    {
        $request = new CreateMembershipRequest();
        $requestParamHeaders = [];
        $request->setParent($parent);
        $request->setMembership($membership);
        $requestParamHeaders['parent'] = $parent;
        $requestParams = new RequestParamsHeaderDescriptor($requestParamHeaders);
        $optionalArgs['headers'] = isset($optionalArgs['headers']) ? array_merge($requestParams->getHeader(), $optionalArgs['headers']) : $requestParams->getHeader();
        return $this->startCall('CreateMembership', Membership::class, $optionalArgs, $request)->wait();
    }

    /**
     * Creates a message in a Google Chat space. For an example, see [Create a
     * message](https://developers.google.com/chat/api/guides/v1/messages/create).
     *
     * Calling this method requires
     * [authentication](https://developers.google.com/chat/api/guides/auth) and
     * supports the following authentication types:
     *
     * - For text messages, user authentication or app authentication are
     * supported.
     * - For card messages, only app authentication is supported. (Only Chat apps
     * can create card messages.)
     *
     * Sample code:
     * ```
     * $chatServiceClient = new ChatServiceClient();
     * try {
     *     $formattedParent = $chatServiceClient->spaceName('[SPACE]');
     *     $message = new Message();
     *     $response = $chatServiceClient->createMessage($formattedParent, $message);
     * } finally {
     *     $chatServiceClient->close();
     * }
     * ```
     *
     * @param string  $parent       Required. The resource name of the space in which to create a message.
     *
     *                              Format: `spaces/{space}`
     * @param Message $message      Required. Message body.
     * @param array   $optionalArgs {
     *     Optional.
     *
     *     @type string $threadKey
     *           Optional. Deprecated: Use
     *           [thread.thread_key][google.chat.v1.Thread.thread_key] instead. ID for the
     *           thread. Supports up to 4000 characters. To start or add to a thread, create
     *           a message and specify a `threadKey` or the
     *           [thread.name][google.chat.v1.Thread.name]. For example usage, see [Start or
     *           reply to a message
     *           thread](https://developers.google.com/chat/api/guides/v1/messages/create#create-message-thread).
     *     @type string $requestId
     *           Optional. A unique request ID for this message. Specifying an existing
     *           request ID returns the message created with that ID instead of creating a
     *           new message.
     *     @type int $messageReplyOption
     *           Optional. Specifies whether a message starts a thread or replies to one.
     *           Only supported in named spaces.
     *           For allowed values, use constants defined on {@see \Google\Chat\V1\CreateMessageRequest\MessageReplyOption}
     *     @type string $messageId
     *           Optional. A custom ID for a message. Lets Chat apps get, update, or delete
     *           a message without needing to store the system-assigned ID in the message's
     *           resource name (represented in the message `name` field).
     *
     *           The value for this field must meet the following requirements:
     *
     *           * Begins with `client-`. For example, `client-custom-name` is a valid
     *           custom ID, but `custom-name` is not.
     *           * Contains up to 63 characters and only lowercase letters, numbers, and
     *           hyphens.
     *           * Is unique within a space. A Chat app can't use the same custom ID for
     *           different messages.
     *
     *           For details, see [Name a
     *           message](https://developers.google.com/chat/api/guides/v1/messages/create#name_a_created_message).
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return \Google\Chat\V1\Message
     *
     * @throws ApiException if the remote call fails
     */
    public function createMessage($parent, $message, array $optionalArgs = [])
    {
        $request = new CreateMessageRequest();
        $requestParamHeaders = [];
        $request->setParent($parent);
        $request->setMessage($message);
        $requestParamHeaders['parent'] = $parent;
        if (isset($optionalArgs['threadKey'])) {
            $request->setThreadKey($optionalArgs['threadKey']);
        }

        if (isset($optionalArgs['requestId'])) {
            $request->setRequestId($optionalArgs['requestId']);
        }

        if (isset($optionalArgs['messageReplyOption'])) {
            $request->setMessageReplyOption($optionalArgs['messageReplyOption']);
        }

        if (isset($optionalArgs['messageId'])) {
            $request->setMessageId($optionalArgs['messageId']);
        }

        $requestParams = new RequestParamsHeaderDescriptor($requestParamHeaders);
        $optionalArgs['headers'] = isset($optionalArgs['headers']) ? array_merge($requestParams->getHeader(), $optionalArgs['headers']) : $requestParams->getHeader();
        return $this->startCall('CreateMessage', Message::class, $optionalArgs, $request)->wait();
    }

    /**
     * Creates a reaction and adds it to a message. For an example, see
     * [Create a
     * reaction](https://developers.google.com/chat/api/guides/v1/reactions/create).
     * Requires [user
     * authentication](https://developers.google.com/chat/api/guides/auth/users).
     * Only unicode emoji are supported.
     *
     * Sample code:
     * ```
     * $chatServiceClient = new ChatServiceClient();
     * try {
     *     $formattedParent = $chatServiceClient->messageName('[SPACE]', '[MESSAGE]');
     *     $reaction = new Reaction();
     *     $response = $chatServiceClient->createReaction($formattedParent, $reaction);
     * } finally {
     *     $chatServiceClient->close();
     * }
     * ```
     *
     * @param string   $parent       Required. The message where the reaction is created.
     *
     *                               Format: `spaces/{space}/messages/{message}`
     * @param Reaction $reaction     Required. The reaction to create.
     * @param array    $optionalArgs {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return \Google\Chat\V1\Reaction
     *
     * @throws ApiException if the remote call fails
     */
    public function createReaction($parent, $reaction, array $optionalArgs = [])
    {
        $request = new CreateReactionRequest();
        $requestParamHeaders = [];
        $request->setParent($parent);
        $request->setReaction($reaction);
        $requestParamHeaders['parent'] = $parent;
        $requestParams = new RequestParamsHeaderDescriptor($requestParamHeaders);
        $optionalArgs['headers'] = isset($optionalArgs['headers']) ? array_merge($requestParams->getHeader(), $optionalArgs['headers']) : $requestParams->getHeader();
        return $this->startCall('CreateReaction', Reaction::class, $optionalArgs, $request)->wait();
    }

    /**
     * Creates a named space. Spaces grouped by topics aren't supported. For an
     * example, see [Create a
     * space](https://developers.google.com/chat/api/guides/v1/spaces/create).
     *
     * If you receive the error message `ALREADY_EXISTS` when creating
     * a space, try a different `displayName`. An existing space within
     * the Google Workspace organization might already use this display name.
     *
     * Requires [user
     * authentication](https://developers.google.com/chat/api/guides/auth/users).
     *
     * Sample code:
     * ```
     * $chatServiceClient = new ChatServiceClient();
     * try {
     *     $space = new Space();
     *     $response = $chatServiceClient->createSpace($space);
     * } finally {
     *     $chatServiceClient->close();
     * }
     * ```
     *
     * @param Space $space        Required. The `displayName` and `spaceType` fields must be populated.  Only
     *                            `SpaceType.SPACE` is supported.
     *
     *                            If you receive the error message `ALREADY_EXISTS` when creating a space,
     *                            try a different `displayName`. An existing space within the Google
     *                            Workspace organization might already use this display name.
     *
     *                            The space `name` is assigned on the server so anything specified in this
     *                            field will be ignored.
     * @param array $optionalArgs {
     *     Optional.
     *
     *     @type string $requestId
     *           Optional. A unique identifier for this request.
     *           A random UUID is recommended.
     *           Specifying an existing request ID returns the space created with that ID
     *           instead of creating a new space.
     *           Specifying an existing request ID from the same Chat app with a different
     *           authenticated user returns an error.
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return \Google\Chat\V1\Space
     *
     * @throws ApiException if the remote call fails
     */
    public function createSpace($space, array $optionalArgs = [])
    {
        $request = new CreateSpaceRequest();
        $request->setSpace($space);
        if (isset($optionalArgs['requestId'])) {
            $request->setRequestId($optionalArgs['requestId']);
        }

        return $this->startCall('CreateSpace', Space::class, $optionalArgs, $request)->wait();
    }

    /**
     * Deletes a membership. For an example, see
     * [Delete a
     * membership](https://developers.google.com/chat/api/guides/v1/members/delete).
     *
     * Requires [user
     * authentication](https://developers.google.com/chat/api/guides/auth/users).
     *
     * Sample code:
     * ```
     * $chatServiceClient = new ChatServiceClient();
     * try {
     *     $formattedName = $chatServiceClient->membershipName('[SPACE]', '[MEMBER]');
     *     $response = $chatServiceClient->deleteMembership($formattedName);
     * } finally {
     *     $chatServiceClient->close();
     * }
     * ```
     *
     * @param string $name         Required. Resource name of the membership to delete. Chat apps can delete
     *                             human users' or their own memberships. Chat apps can't delete other apps'
     *                             memberships.
     *
     *                             When deleting a human membership, requires the `chat.memberships` scope and
     *                             `spaces/{space}/members/{member}` format. You can use the email as an
     *                             alias for `{member}`. For example,
     *                             `spaces/{space}/members/example&#64;gmail.com` where `example&#64;gmail.com` is the
     *                             email of the Google Chat user.
     *
     *                             When deleting an app membership, requires the `chat.memberships.app` scope
     *                             and `spaces/{space}/members/app` format.
     *
     *                             Format: `spaces/{space}/members/{member}` or `spaces/{space}/members/app`.
     * @param array  $optionalArgs {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return \Google\Chat\V1\Membership
     *
     * @throws ApiException if the remote call fails
     */
    public function deleteMembership($name, array $optionalArgs = [])
    {
        $request = new DeleteMembershipRequest();
        $requestParamHeaders = [];
        $request->setName($name);
        $requestParamHeaders['name'] = $name;
        $requestParams = new RequestParamsHeaderDescriptor($requestParamHeaders);
        $optionalArgs['headers'] = isset($optionalArgs['headers']) ? array_merge($requestParams->getHeader(), $optionalArgs['headers']) : $requestParams->getHeader();
        return $this->startCall('DeleteMembership', Membership::class, $optionalArgs, $request)->wait();
    }

    /**
     * Deletes a message.
     * For an example, see [Delete a
     * message](https://developers.google.com/chat/api/guides/v1/messages/delete).
     *
     * Requires
     * [authentication](https://developers.google.com/chat/api/guides/auth).
     * Supports
     * [app
     * authentication](https://developers.google.com/chat/api/guides/auth/service-accounts)
     * and [user
     * authentication](https://developers.google.com/chat/api/guides/auth/users).
     * When using app authentication, requests can only delete messages
     * created by the calling Chat app.
     *
     * Sample code:
     * ```
     * $chatServiceClient = new ChatServiceClient();
     * try {
     *     $formattedName = $chatServiceClient->messageName('[SPACE]', '[MESSAGE]');
     *     $chatServiceClient->deleteMessage($formattedName);
     * } finally {
     *     $chatServiceClient->close();
     * }
     * ```
     *
     * @param string $name         Required. Resource name of the message.
     *
     *                             Format: `spaces/{space}/messages/{message}`
     *
     *                             If you've set a custom ID for your message, you can use the value from the
     *                             `clientAssignedMessageId` field for `{message}`. For details, see [Name a
     *                             message]
     *                             (https://developers.google.com/chat/api/guides/v1/messages/create#name_a_created_message).
     * @param array  $optionalArgs {
     *     Optional.
     *
     *     @type bool $force
     *           When `true`, deleting a message also deletes its threaded replies. When
     *           `false`, if a message has threaded replies, deletion fails.
     *
     *           Only applies when [authenticating as a
     *           user](https://developers.google.com/chat/api/guides/auth/users). Has no
     *           effect when [authenticating as a Chat app]
     *           (https://developers.google.com/chat/api/guides/auth/service-accounts).
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @throws ApiException if the remote call fails
     */
    public function deleteMessage($name, array $optionalArgs = [])
    {
        $request = new DeleteMessageRequest();
        $requestParamHeaders = [];
        $request->setName($name);
        $requestParamHeaders['name'] = $name;
        if (isset($optionalArgs['force'])) {
            $request->setForce($optionalArgs['force']);
        }

        $requestParams = new RequestParamsHeaderDescriptor($requestParamHeaders);
        $optionalArgs['headers'] = isset($optionalArgs['headers']) ? array_merge($requestParams->getHeader(), $optionalArgs['headers']) : $requestParams->getHeader();
        return $this->startCall('DeleteMessage', GPBEmpty::class, $optionalArgs, $request)->wait();
    }

    /**
     * Deletes a reaction to a message. For an example, see
     * [Delete a
     * reaction](https://developers.google.com/chat/api/guides/v1/reactions/delete).
     * Requires [user
     * authentication](https://developers.google.com/chat/api/guides/auth/users).
     *
     * Sample code:
     * ```
     * $chatServiceClient = new ChatServiceClient();
     * try {
     *     $formattedName = $chatServiceClient->reactionName('[SPACE]', '[MESSAGE]', '[REACTION]');
     *     $chatServiceClient->deleteReaction($formattedName);
     * } finally {
     *     $chatServiceClient->close();
     * }
     * ```
     *
     * @param string $name         Required. Name of the reaction to delete.
     *
     *                             Format: `spaces/{space}/messages/{message}/reactions/{reaction}`
     * @param array  $optionalArgs {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @throws ApiException if the remote call fails
     */
    public function deleteReaction($name, array $optionalArgs = [])
    {
        $request = new DeleteReactionRequest();
        $requestParamHeaders = [];
        $request->setName($name);
        $requestParamHeaders['name'] = $name;
        $requestParams = new RequestParamsHeaderDescriptor($requestParamHeaders);
        $optionalArgs['headers'] = isset($optionalArgs['headers']) ? array_merge($requestParams->getHeader(), $optionalArgs['headers']) : $requestParams->getHeader();
        return $this->startCall('DeleteReaction', GPBEmpty::class, $optionalArgs, $request)->wait();
    }

    /**
     * Deletes a named space. Always performs a cascading delete, which means
     * that the space's child resources—like messages posted in the space and
     * memberships in the space—are also deleted. For an example, see
     * [Delete a
     * space](https://developers.google.com/chat/api/guides/v1/spaces/delete).
     * Requires [user
     * authentication](https://developers.google.com/chat/api/guides/auth/users)
     * from a user who has permission to delete the space.
     *
     * Sample code:
     * ```
     * $chatServiceClient = new ChatServiceClient();
     * try {
     *     $formattedName = $chatServiceClient->spaceName('[SPACE]');
     *     $chatServiceClient->deleteSpace($formattedName);
     * } finally {
     *     $chatServiceClient->close();
     * }
     * ```
     *
     * @param string $name         Required. Resource name of the space to delete.
     *
     *                             Format: `spaces/{space}`
     * @param array  $optionalArgs {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @throws ApiException if the remote call fails
     */
    public function deleteSpace($name, array $optionalArgs = [])
    {
        $request = new DeleteSpaceRequest();
        $requestParamHeaders = [];
        $request->setName($name);
        $requestParamHeaders['name'] = $name;
        $requestParams = new RequestParamsHeaderDescriptor($requestParamHeaders);
        $optionalArgs['headers'] = isset($optionalArgs['headers']) ? array_merge($requestParams->getHeader(), $optionalArgs['headers']) : $requestParams->getHeader();
        return $this->startCall('DeleteSpace', GPBEmpty::class, $optionalArgs, $request)->wait();
    }

    /**
     * Returns the existing direct message with the specified user. If no direct
     * message space is found, returns a `404 NOT_FOUND` error. For an example,
     * see
     * [Find a direct message](/chat/api/guides/v1/spaces/find-direct-message).
     *
     * With [user
     * authentication](https://developers.google.com/chat/api/guides/auth/users),
     * returns the direct message space between the specified user and the
     * authenticated user.
     *
     * With [app
     * authentication](https://developers.google.com/chat/api/guides/auth/service-accounts),
     * returns the direct message space between the specified user and the calling
     * Chat app.
     *
     * Requires [user
     * authentication](https://developers.google.com/chat/api/guides/auth/users)
     * or [app
     * authentication](https://developers.google.com/chat/api/guides/auth/service-accounts).
     *
     * Sample code:
     * ```
     * $chatServiceClient = new ChatServiceClient();
     * try {
     *     $name = 'name';
     *     $response = $chatServiceClient->findDirectMessage($name);
     * } finally {
     *     $chatServiceClient->close();
     * }
     * ```
     *
     * @param string $name         Required. Resource name of the user to find direct message with.
     *
     *                             Format: `users/{user}`, where `{user}` is either the `id` for the
     *                             [person](https://developers.google.com/people/api/rest/v1/people) from the
     *                             People API, or the `id` for the
     *                             [user](https://developers.google.com/admin-sdk/directory/reference/rest/v1/users)
     *                             in the Directory API. For example, if the People API profile ID is
     *                             `123456789`, you can find a direct message with that person by using
     *                             `users/123456789` as the `name`. When [authenticated as a
     *                             user](https://developers.google.com/chat/api/guides/auth/users), you can
     *                             use the email as an alias for `{user}`. For example,
     *                             `users/example&#64;gmail.com` where `example&#64;gmail.com` is the email of the
     *                             Google Chat user.
     * @param array  $optionalArgs {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return \Google\Chat\V1\Space
     *
     * @throws ApiException if the remote call fails
     */
    public function findDirectMessage($name, array $optionalArgs = [])
    {
        $request = new FindDirectMessageRequest();
        $request->setName($name);
        return $this->startCall('FindDirectMessage', Space::class, $optionalArgs, $request)->wait();
    }

    /**
     * Gets the metadata of a message attachment. The attachment data is fetched
     * using the [media
     * API](https://developers.google.com/chat/api/reference/rest/v1/media/download).
     * For an example, see
     * [Get a message
     * attachment](https://developers.google.com/chat/api/guides/v1/media-and-attachments/get).
     * Requires [app
     * authentication](https://developers.google.com/chat/api/guides/auth/service-accounts).
     *
     * Sample code:
     * ```
     * $chatServiceClient = new ChatServiceClient();
     * try {
     *     $formattedName = $chatServiceClient->attachmentName('[SPACE]', '[MESSAGE]', '[ATTACHMENT]');
     *     $response = $chatServiceClient->getAttachment($formattedName);
     * } finally {
     *     $chatServiceClient->close();
     * }
     * ```
     *
     * @param string $name         Required. Resource name of the attachment, in the form
     *                             `spaces/&#42;/messages/&#42;/attachments/*`.
     * @param array  $optionalArgs {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return \Google\Chat\V1\Attachment
     *
     * @throws ApiException if the remote call fails
     */
    public function getAttachment($name, array $optionalArgs = [])
    {
        $request = new GetAttachmentRequest();
        $requestParamHeaders = [];
        $request->setName($name);
        $requestParamHeaders['name'] = $name;
        $requestParams = new RequestParamsHeaderDescriptor($requestParamHeaders);
        $optionalArgs['headers'] = isset($optionalArgs['headers']) ? array_merge($requestParams->getHeader(), $optionalArgs['headers']) : $requestParams->getHeader();
        return $this->startCall('GetAttachment', Attachment::class, $optionalArgs, $request)->wait();
    }

    /**
     * Returns details about a membership. For an example, see
     * [Get a
     * membership](https://developers.google.com/chat/api/guides/v1/members/get).
     *
     * Requires
     * [authentication](https://developers.google.com/chat/api/guides/auth).
     * Supports
     * [app
     * authentication](https://developers.google.com/chat/api/guides/auth/service-accounts)
     * and [user
     * authentication](https://developers.google.com/chat/api/guides/auth/users).
     *
     * Sample code:
     * ```
     * $chatServiceClient = new ChatServiceClient();
     * try {
     *     $formattedName = $chatServiceClient->membershipName('[SPACE]', '[MEMBER]');
     *     $response = $chatServiceClient->getMembership($formattedName);
     * } finally {
     *     $chatServiceClient->close();
     * }
     * ```
     *
     * @param string $name         Required. Resource name of the membership to retrieve.
     *
     *                             To get the app's own membership, you can optionally use
     *                             `spaces/{space}/members/app`.
     *
     *                             Format: `spaces/{space}/members/{member}` or `spaces/{space}/members/app`
     *
     *                             When [authenticated as a
     *                             user](https://developers.google.com/chat/api/guides/auth/users), you can
     *                             use the user's email as an alias for `{member}`. For example,
     *                             `spaces/{space}/members/example&#64;gmail.com` where `example&#64;gmail.com` is the
     *                             email of the Google Chat user.
     * @param array  $optionalArgs {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return \Google\Chat\V1\Membership
     *
     * @throws ApiException if the remote call fails
     */
    public function getMembership($name, array $optionalArgs = [])
    {
        $request = new GetMembershipRequest();
        $requestParamHeaders = [];
        $request->setName($name);
        $requestParamHeaders['name'] = $name;
        $requestParams = new RequestParamsHeaderDescriptor($requestParamHeaders);
        $optionalArgs['headers'] = isset($optionalArgs['headers']) ? array_merge($requestParams->getHeader(), $optionalArgs['headers']) : $requestParams->getHeader();
        return $this->startCall('GetMembership', Membership::class, $optionalArgs, $request)->wait();
    }

    /**
     * Returns details about a message.
     * For an example, see [Read a
     * message](https://developers.google.com/chat/api/guides/v1/messages/get).
     *
     * Requires
     * [authentication](https://developers.google.com/chat/api/guides/auth).
     * Supports
     * [app
     * authentication](https://developers.google.com/chat/api/guides/auth/service-accounts)
     * and [user
     * authentication](https://developers.google.com/chat/api/guides/auth/users).
     *
     * Note: Might return a message from a blocked member or space.
     *
     * Sample code:
     * ```
     * $chatServiceClient = new ChatServiceClient();
     * try {
     *     $formattedName = $chatServiceClient->messageName('[SPACE]', '[MESSAGE]');
     *     $response = $chatServiceClient->getMessage($formattedName);
     * } finally {
     *     $chatServiceClient->close();
     * }
     * ```
     *
     * @param string $name         Required. Resource name of the message.
     *
     *                             Format: `spaces/{space}/messages/{message}`
     *
     *                             If you've set a custom ID for your message, you can use the value from the
     *                             `clientAssignedMessageId` field for `{message}`. For details, see [Name a
     *                             message]
     *                             (https://developers.google.com/chat/api/guides/v1/messages/create#name_a_created_message).
     * @param array  $optionalArgs {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return \Google\Chat\V1\Message
     *
     * @throws ApiException if the remote call fails
     */
    public function getMessage($name, array $optionalArgs = [])
    {
        $request = new GetMessageRequest();
        $requestParamHeaders = [];
        $request->setName($name);
        $requestParamHeaders['name'] = $name;
        $requestParams = new RequestParamsHeaderDescriptor($requestParamHeaders);
        $optionalArgs['headers'] = isset($optionalArgs['headers']) ? array_merge($requestParams->getHeader(), $optionalArgs['headers']) : $requestParams->getHeader();
        return $this->startCall('GetMessage', Message::class, $optionalArgs, $request)->wait();
    }

    /**
     * Returns details about a space. For an example, see
     * [Get a space](https://developers.google.com/chat/api/guides/v1/spaces/get).
     *
     * Requires
     * [authentication](https://developers.google.com/chat/api/guides/auth).
     * Supports
     * [app
     * authentication](https://developers.google.com/chat/api/guides/auth/service-accounts)
     * and [user
     * authentication](https://developers.google.com/chat/api/guides/auth/users).
     *
     * Sample code:
     * ```
     * $chatServiceClient = new ChatServiceClient();
     * try {
     *     $formattedName = $chatServiceClient->spaceName('[SPACE]');
     *     $response = $chatServiceClient->getSpace($formattedName);
     * } finally {
     *     $chatServiceClient->close();
     * }
     * ```
     *
     * @param string $name         Required. Resource name of the space, in the form "spaces/*".
     *
     *                             Format: `spaces/{space}`
     * @param array  $optionalArgs {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return \Google\Chat\V1\Space
     *
     * @throws ApiException if the remote call fails
     */
    public function getSpace($name, array $optionalArgs = [])
    {
        $request = new GetSpaceRequest();
        $requestParamHeaders = [];
        $request->setName($name);
        $requestParamHeaders['name'] = $name;
        $requestParams = new RequestParamsHeaderDescriptor($requestParamHeaders);
        $optionalArgs['headers'] = isset($optionalArgs['headers']) ? array_merge($requestParams->getHeader(), $optionalArgs['headers']) : $requestParams->getHeader();
        return $this->startCall('GetSpace', Space::class, $optionalArgs, $request)->wait();
    }

    /**
     * Lists memberships in a space. For an example, see [List
     * memberships](https://developers.google.com/chat/api/guides/v1/members/list).
     * Listing memberships with
     * [app
     * authentication](https://developers.google.com/chat/api/guides/auth/service-accounts)
     * lists memberships in spaces that the Chat app has
     * access to, but excludes Chat app memberships,
     * including its own. Listing memberships with
     * [User
     * authentication](https://developers.google.com/chat/api/guides/auth/users)
     * lists memberships in spaces that the authenticated user has access to.
     *
     * Requires
     * [authentication](https://developers.google.com/chat/api/guides/auth).
     * Supports
     * [app
     * authentication](https://developers.google.com/chat/api/guides/auth/service-accounts)
     * and [user
     * authentication](https://developers.google.com/chat/api/guides/auth/users).
     *
     * Sample code:
     * ```
     * $chatServiceClient = new ChatServiceClient();
     * try {
     *     $formattedParent = $chatServiceClient->spaceName('[SPACE]');
     *     // Iterate over pages of elements
     *     $pagedResponse = $chatServiceClient->listMemberships($formattedParent);
     *     foreach ($pagedResponse->iteratePages() as $page) {
     *         foreach ($page as $element) {
     *             // doSomethingWith($element);
     *         }
     *     }
     *     // Alternatively:
     *     // Iterate through all elements
     *     $pagedResponse = $chatServiceClient->listMemberships($formattedParent);
     *     foreach ($pagedResponse->iterateAllElements() as $element) {
     *         // doSomethingWith($element);
     *     }
     * } finally {
     *     $chatServiceClient->close();
     * }
     * ```
     *
     * @param string $parent       Required. The resource name of the space for which to fetch a membership
     *                             list.
     *
     *                             Format: spaces/{space}
     * @param array  $optionalArgs {
     *     Optional.
     *
     *     @type int $pageSize
     *           The maximum number of resources contained in the underlying API
     *           response. The API may return fewer values in a page, even if
     *           there are additional values to be retrieved.
     *     @type string $pageToken
     *           A page token is used to specify a page of values to be returned.
     *           If no page token is specified (the default), the first page
     *           of values will be returned. Any page token used here must have
     *           been generated by a previous call to the API.
     *     @type string $filter
     *           Optional. A query filter.
     *
     *           You can filter memberships by a member's role
     *           ([`role`](https://developers.google.com/chat/api/reference/rest/v1/spaces.members#membershiprole))
     *           and type
     *           ([`member.type`](https://developers.google.com/chat/api/reference/rest/v1/User#type)).
     *
     *           To filter by role, set `role` to `ROLE_MEMBER` or `ROLE_MANAGER`.
     *
     *           To filter by type, set `member.type` to `HUMAN` or `BOT`.
     *
     *           To filter by both role and type, use the `AND` operator. To filter by
     *           either role or type, use the `OR` operator.
     *
     *           For example, the following queries are valid:
     *
     *           ```
     *           role = "ROLE_MANAGER" OR role = "ROLE_MEMBER"
     *           member.type = "HUMAN" AND role = "ROLE_MANAGER"
     *           ```
     *
     *           The following queries are invalid:
     *
     *           ```
     *           member.type = "HUMAN" AND member.type = "BOT"
     *           role = "ROLE_MANAGER" AND role = "ROLE_MEMBER"
     *           ```
     *
     *           Invalid queries are rejected by the server with an `INVALID_ARGUMENT`
     *           error.
     *     @type bool $showGroups
     *           Optional. When `true`, also returns memberships associated with a
     *           [Google Group][google.chat.v1.Membership.group_member], in
     *           addition to other types of memberships. If a
     *           [filter][google.chat.v1.ListMembershipsRequest.filter] is set,
     *           [Google Group][google.chat.v1.Membership.group_member]
     *           memberships that don't match the filter criteria aren't returned.
     *     @type bool $showInvited
     *           Optional. When `true`, also returns memberships associated with
     *           [invited][google.chat.v1.Membership.MembershipState.INVITED] members, in
     *           addition to other types of memberships. If a
     *           filter is set,
     *           [invited][google.chat.v1.Membership.MembershipState.INVITED] memberships
     *           that don't match the filter criteria aren't returned.
     *
     *           Currently requires [user
     *           authentication](https://developers.google.com/chat/api/guides/auth/users).
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return \Google\ApiCore\PagedListResponse
     *
     * @throws ApiException if the remote call fails
     */
    public function listMemberships($parent, array $optionalArgs = [])
    {
        $request = new ListMembershipsRequest();
        $requestParamHeaders = [];
        $request->setParent($parent);
        $requestParamHeaders['parent'] = $parent;
        if (isset($optionalArgs['pageSize'])) {
            $request->setPageSize($optionalArgs['pageSize']);
        }

        if (isset($optionalArgs['pageToken'])) {
            $request->setPageToken($optionalArgs['pageToken']);
        }

        if (isset($optionalArgs['filter'])) {
            $request->setFilter($optionalArgs['filter']);
        }

        if (isset($optionalArgs['showGroups'])) {
            $request->setShowGroups($optionalArgs['showGroups']);
        }

        if (isset($optionalArgs['showInvited'])) {
            $request->setShowInvited($optionalArgs['showInvited']);
        }

        $requestParams = new RequestParamsHeaderDescriptor($requestParamHeaders);
        $optionalArgs['headers'] = isset($optionalArgs['headers']) ? array_merge($requestParams->getHeader(), $optionalArgs['headers']) : $requestParams->getHeader();
        return $this->getPagedListResponse('ListMemberships', $optionalArgs, ListMembershipsResponse::class, $request);
    }

    /**
     * Lists messages in a space that the caller is a member of, including
     * messages from blocked members and spaces. For an example, see
     * [List messages](/chat/api/guides/v1/messages/list).
     * Requires [user
     * authentication](https://developers.google.com/chat/api/guides/auth/users).
     *
     * Sample code:
     * ```
     * $chatServiceClient = new ChatServiceClient();
     * try {
     *     $formattedParent = $chatServiceClient->spaceName('[SPACE]');
     *     // Iterate over pages of elements
     *     $pagedResponse = $chatServiceClient->listMessages($formattedParent);
     *     foreach ($pagedResponse->iteratePages() as $page) {
     *         foreach ($page as $element) {
     *             // doSomethingWith($element);
     *         }
     *     }
     *     // Alternatively:
     *     // Iterate through all elements
     *     $pagedResponse = $chatServiceClient->listMessages($formattedParent);
     *     foreach ($pagedResponse->iterateAllElements() as $element) {
     *         // doSomethingWith($element);
     *     }
     * } finally {
     *     $chatServiceClient->close();
     * }
     * ```
     *
     * @param string $parent       Required. The resource name of the space to list messages from.
     *
     *                             Format: `spaces/{space}`
     * @param array  $optionalArgs {
     *     Optional.
     *
     *     @type int $pageSize
     *           The maximum number of resources contained in the underlying API
     *           response. The API may return fewer values in a page, even if
     *           there are additional values to be retrieved.
     *     @type string $pageToken
     *           A page token is used to specify a page of values to be returned.
     *           If no page token is specified (the default), the first page
     *           of values will be returned. Any page token used here must have
     *           been generated by a previous call to the API.
     *     @type string $filter
     *           A query filter.
     *
     *           You can filter messages by date (`create_time`) and thread (`thread.name`).
     *
     *           To filter messages by the date they were created, specify the `create_time`
     *           with a timestamp in [RFC-3339](https://www.rfc-editor.org/rfc/rfc3339)
     *           format and double quotation marks. For example,
     *           `"2023-04-21T11:30:00-04:00"`. You can use the greater than operator `>` to
     *           list messages that were created after a timestamp, or the less than
     *           operator `<` to list messages that were created before a timestamp. To
     *           filter messages within a time interval, use the `AND` operator between two
     *           timestamps.
     *
     *           To filter by thread, specify the `thread.name`, formatted as
     *           `spaces/{space}/threads/{thread}`. You can only specify one
     *           `thread.name` per query.
     *
     *           To filter by both thread and date, use the `AND` operator in your query.
     *
     *           For example, the following queries are valid:
     *
     *           ```
     *           create_time > "2012-04-21T11:30:00-04:00"
     *
     *           create_time > "2012-04-21T11:30:00-04:00" AND
     *           thread.name = spaces/AAAAAAAAAAA/threads/123
     *
     *           create_time > "2012-04-21T11:30:00+00:00" AND
     *
     *           create_time < "2013-01-01T00:00:00+00:00" AND
     *           thread.name = spaces/AAAAAAAAAAA/threads/123
     *
     *           thread.name = spaces/AAAAAAAAAAA/threads/123
     *           ```
     *
     *           Invalid queries are rejected by the server with an `INVALID_ARGUMENT`
     *           error.
     *     @type string $orderBy
     *           Optional, if resuming from a previous query.
     *
     *           How the list of messages is ordered. Specify a value to order by an
     *           ordering operation. Valid ordering operation values are as follows:
     *
     *           - `ASC` for ascending.
     *
     *           - `DESC` for descending.
     *
     *           The default ordering is `create_time ASC`.
     *     @type bool $showDeleted
     *           Whether to include deleted messages. Deleted messages include deleted time
     *           and metadata about their deletion, but message content is unavailable.
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return \Google\ApiCore\PagedListResponse
     *
     * @throws ApiException if the remote call fails
     */
    public function listMessages($parent, array $optionalArgs = [])
    {
        $request = new ListMessagesRequest();
        $requestParamHeaders = [];
        $request->setParent($parent);
        $requestParamHeaders['parent'] = $parent;
        if (isset($optionalArgs['pageSize'])) {
            $request->setPageSize($optionalArgs['pageSize']);
        }

        if (isset($optionalArgs['pageToken'])) {
            $request->setPageToken($optionalArgs['pageToken']);
        }

        if (isset($optionalArgs['filter'])) {
            $request->setFilter($optionalArgs['filter']);
        }

        if (isset($optionalArgs['orderBy'])) {
            $request->setOrderBy($optionalArgs['orderBy']);
        }

        if (isset($optionalArgs['showDeleted'])) {
            $request->setShowDeleted($optionalArgs['showDeleted']);
        }

        $requestParams = new RequestParamsHeaderDescriptor($requestParamHeaders);
        $optionalArgs['headers'] = isset($optionalArgs['headers']) ? array_merge($requestParams->getHeader(), $optionalArgs['headers']) : $requestParams->getHeader();
        return $this->getPagedListResponse('ListMessages', $optionalArgs, ListMessagesResponse::class, $request);
    }

    /**
     * Lists reactions to a message. For an example, see
     * [List
     * reactions](https://developers.google.com/chat/api/guides/v1/reactions/list).
     * Requires [user
     * authentication](https://developers.google.com/chat/api/guides/auth/users).
     *
     * Sample code:
     * ```
     * $chatServiceClient = new ChatServiceClient();
     * try {
     *     $formattedParent = $chatServiceClient->messageName('[SPACE]', '[MESSAGE]');
     *     // Iterate over pages of elements
     *     $pagedResponse = $chatServiceClient->listReactions($formattedParent);
     *     foreach ($pagedResponse->iteratePages() as $page) {
     *         foreach ($page as $element) {
     *             // doSomethingWith($element);
     *         }
     *     }
     *     // Alternatively:
     *     // Iterate through all elements
     *     $pagedResponse = $chatServiceClient->listReactions($formattedParent);
     *     foreach ($pagedResponse->iterateAllElements() as $element) {
     *         // doSomethingWith($element);
     *     }
     * } finally {
     *     $chatServiceClient->close();
     * }
     * ```
     *
     * @param string $parent       Required. The message users reacted to.
     *
     *                             Format: `spaces/{space}/messages/{message}`
     * @param array  $optionalArgs {
     *     Optional.
     *
     *     @type int $pageSize
     *           The maximum number of resources contained in the underlying API
     *           response. The API may return fewer values in a page, even if
     *           there are additional values to be retrieved.
     *     @type string $pageToken
     *           A page token is used to specify a page of values to be returned.
     *           If no page token is specified (the default), the first page
     *           of values will be returned. Any page token used here must have
     *           been generated by a previous call to the API.
     *     @type string $filter
     *           Optional. A query filter.
     *
     *           You can filter reactions by
     *           [emoji](https://developers.google.com/chat/api/reference/rest/v1/Emoji)
     *           (either `emoji.unicode` or `emoji.custom_emoji.uid`) and
     *           [user](https://developers.google.com/chat/api/reference/rest/v1/User)
     *           (`user.name`).
     *
     *           To filter reactions for multiple emojis or users, join similar fields
     *           with the `OR` operator, such as `emoji.unicode = "🙂" OR emoji.unicode =
     *           "👍"` and `user.name = "users/AAAAAA" OR user.name = "users/BBBBBB"`.
     *
     *           To filter reactions by emoji and user, use the `AND` operator, such as
     *           `emoji.unicode = "🙂" AND user.name = "users/AAAAAA"`.
     *
     *           If your query uses both `AND` and `OR`, group them with parentheses.
     *
     *           For example, the following queries are valid:
     *
     *           ```
     *           user.name = "users/{user}"
     *           emoji.unicode = "🙂"
     *           emoji.custom_emoji.uid = "{uid}"
     *           emoji.unicode = "🙂" OR emoji.unicode = "👍"
     *           emoji.unicode = "🙂" OR emoji.custom_emoji.uid = "{uid}"
     *           emoji.unicode = "🙂" AND user.name = "users/{user}"
     *           (emoji.unicode = "🙂" OR emoji.custom_emoji.uid = "{uid}")
     *           AND user.name = "users/{user}"
     *           ```
     *
     *           The following queries are invalid:
     *
     *           ```
     *           emoji.unicode = "🙂" AND emoji.unicode = "👍"
     *           emoji.unicode = "🙂" AND emoji.custom_emoji.uid = "{uid}"
     *           emoji.unicode = "🙂" OR user.name = "users/{user}"
     *           emoji.unicode = "🙂" OR emoji.custom_emoji.uid = "{uid}" OR
     *           user.name = "users/{user}"
     *           emoji.unicode = "🙂" OR emoji.custom_emoji.uid = "{uid}"
     *           AND user.name = "users/{user}"
     *           ```
     *
     *           Invalid queries are rejected by the server with an `INVALID_ARGUMENT`
     *           error.
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return \Google\ApiCore\PagedListResponse
     *
     * @throws ApiException if the remote call fails
     */
    public function listReactions($parent, array $optionalArgs = [])
    {
        $request = new ListReactionsRequest();
        $requestParamHeaders = [];
        $request->setParent($parent);
        $requestParamHeaders['parent'] = $parent;
        if (isset($optionalArgs['pageSize'])) {
            $request->setPageSize($optionalArgs['pageSize']);
        }

        if (isset($optionalArgs['pageToken'])) {
            $request->setPageToken($optionalArgs['pageToken']);
        }

        if (isset($optionalArgs['filter'])) {
            $request->setFilter($optionalArgs['filter']);
        }

        $requestParams = new RequestParamsHeaderDescriptor($requestParamHeaders);
        $optionalArgs['headers'] = isset($optionalArgs['headers']) ? array_merge($requestParams->getHeader(), $optionalArgs['headers']) : $requestParams->getHeader();
        return $this->getPagedListResponse('ListReactions', $optionalArgs, ListReactionsResponse::class, $request);
    }

    /**
     * Lists spaces the caller is a member of. Group chats and DMs aren't listed
     * until the first message is sent. For an example, see
     * [List
     * spaces](https://developers.google.com/chat/api/guides/v1/spaces/list).
     *
     * Requires
     * [authentication](https://developers.google.com/chat/api/guides/auth).
     * Supports
     * [app
     * authentication](https://developers.google.com/chat/api/guides/auth/service-accounts)
     * and [user
     * authentication](https://developers.google.com/chat/api/guides/auth/users).
     *
     * Lists spaces visible to the caller or authenticated user. Group chats
     * and DMs aren't listed until the first message is sent.
     *
     * Sample code:
     * ```
     * $chatServiceClient = new ChatServiceClient();
     * try {
     *     // Iterate over pages of elements
     *     $pagedResponse = $chatServiceClient->listSpaces();
     *     foreach ($pagedResponse->iteratePages() as $page) {
     *         foreach ($page as $element) {
     *             // doSomethingWith($element);
     *         }
     *     }
     *     // Alternatively:
     *     // Iterate through all elements
     *     $pagedResponse = $chatServiceClient->listSpaces();
     *     foreach ($pagedResponse->iterateAllElements() as $element) {
     *         // doSomethingWith($element);
     *     }
     * } finally {
     *     $chatServiceClient->close();
     * }
     * ```
     *
     * @param array $optionalArgs {
     *     Optional.
     *
     *     @type int $pageSize
     *           The maximum number of resources contained in the underlying API
     *           response. The API may return fewer values in a page, even if
     *           there are additional values to be retrieved.
     *     @type string $pageToken
     *           A page token is used to specify a page of values to be returned.
     *           If no page token is specified (the default), the first page
     *           of values will be returned. Any page token used here must have
     *           been generated by a previous call to the API.
     *     @type string $filter
     *           Optional. A query filter.
     *
     *           You can filter spaces by the space type
     *           ([`space_type`](https://developers.google.com/chat/api/reference/rest/v1/spaces#spacetype)).
     *
     *           To filter by space type, you must specify valid enum value, such as
     *           `SPACE` or `GROUP_CHAT` (the `space_type` can't be
     *           `SPACE_TYPE_UNSPECIFIED`). To query for multiple space types, use the `OR`
     *           operator.
     *
     *           For example, the following queries are valid:
     *
     *           ```
     *           space_type = "SPACE"
     *           spaceType = "GROUP_CHAT" OR spaceType = "DIRECT_MESSAGE"
     *           ```
     *
     *           Invalid queries are rejected by the server with an `INVALID_ARGUMENT`
     *           error.
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return \Google\ApiCore\PagedListResponse
     *
     * @throws ApiException if the remote call fails
     */
    public function listSpaces(array $optionalArgs = [])
    {
        $request = new ListSpacesRequest();
        if (isset($optionalArgs['pageSize'])) {
            $request->setPageSize($optionalArgs['pageSize']);
        }

        if (isset($optionalArgs['pageToken'])) {
            $request->setPageToken($optionalArgs['pageToken']);
        }

        if (isset($optionalArgs['filter'])) {
            $request->setFilter($optionalArgs['filter']);
        }

        return $this->getPagedListResponse('ListSpaces', $optionalArgs, ListSpacesResponse::class, $request);
    }

    /**
     * Creates a space and adds specified users to it. The calling user is
     * automatically added to the space, and shouldn't be specified as a
     * membership in the request. For an example, see
     * [Set up a
     * space](https://developers.google.com/chat/api/guides/v1/spaces/set-up).
     *
     * To specify the human members to add, add memberships with the appropriate
     * `member.name` in the `SetUpSpaceRequest`. To add a human user, use
     * `users/{user}`, where `{user}` can be the email address for the user. For
     * users in the same Workspace organization `{user}` can also be the `id` for
     * the person from the People API, or the `id` for the user in the Directory
     * API. For example, if the People API Person profile ID for
     * `user&#64;example.com` is `123456789`, you can add the user to the space by
     * setting the `membership.member.name` to `users/user&#64;example.com` or
     * `users/123456789`.
     *
     * For a space or group chat, if the caller blocks or is blocked by some
     * members, then those members aren't added to the created space.
     *
     * To create a direct message (DM) between the calling user and another human
     * user, specify exactly one membership to represent the human user. If
     * one user blocks the other, the request fails and the DM isn't created.
     *
     * To create a DM between the calling user and the calling app, set
     * `Space.singleUserBotDm` to `true` and don't specify any memberships. You
     * can only use this method to set up a DM with the calling app. To add the
     * calling app as a member of a space or an existing DM between two human
     * users, see
     * [create a
     * membership](https://developers.google.com/chat/api/guides/v1/members/create).
     *
     * If a DM already exists between two users, even when one user blocks the
     * other at the time a request is made, then the existing DM is returned.
     *
     * Spaces with threaded replies aren't supported. If you receive the error
     * message `ALREADY_EXISTS` when setting up a space, try a different
     * `displayName`. An existing space within the Google Workspace organization
     * might already use this display name.
     *
     * Requires [user
     * authentication](https://developers.google.com/chat/api/guides/auth/users).
     *
     * Sample code:
     * ```
     * $chatServiceClient = new ChatServiceClient();
     * try {
     *     $space = new Space();
     *     $response = $chatServiceClient->setUpSpace($space);
     * } finally {
     *     $chatServiceClient->close();
     * }
     * ```
     *
     * @param Space $space        Required. The `Space.spaceType` field is required.
     *
     *                            To create a space, set `Space.spaceType` to `SPACE` and set
     *                            `Space.displayName`. If you receive the error message `ALREADY_EXISTS` when
     *                            setting up a space, try a different `displayName`. An existing space
     *                            within the Google Workspace organization might already use this display
     *                            name.
     *
     *                            To create a group chat, set `Space.spaceType` to
     *                            `GROUP_CHAT`. Don't set `Space.displayName`.
     *
     *                            To create a 1:1 conversation between humans,
     *                            set `Space.spaceType` to `DIRECT_MESSAGE` and set
     *                            `Space.singleUserBotDm` to `false`. Don't set `Space.displayName` or
     *                            `Space.spaceDetails`.
     *
     *                            To create an 1:1 conversation between a human and the calling Chat app, set
     *                            `Space.spaceType` to `DIRECT_MESSAGE` and
     *                            `Space.singleUserBotDm` to `true`. Don't set `Space.displayName` or
     *                            `Space.spaceDetails`.
     *
     *                            If a `DIRECT_MESSAGE` space already exists, that space is returned instead
     *                            of creating a new space.
     * @param array $optionalArgs {
     *     Optional.
     *
     *     @type string $requestId
     *           Optional. A unique identifier for this request.
     *           A random UUID is recommended.
     *           Specifying an existing request ID returns the space created with that ID
     *           instead of creating a new space.
     *           Specifying an existing request ID from the same Chat app with a different
     *           authenticated user returns an error.
     *     @type Membership[] $memberships
     *           Optional. The Google Chat users to invite to join the space. Omit the
     *           calling user, as they are added automatically.
     *
     *           The set currently allows up to 20 memberships (in addition to the caller).
     *
     *           The `Membership.member` field must contain a `user` with `name` populated
     *           (format: `users/{user}`) and `type` set to `User.Type.HUMAN`. You can only
     *           add human users when setting up a space (adding Chat apps is only supported
     *           for direct message setup with the calling app). You can also add members
     *           using the user's email as an alias for {user}. For example, the `user.name`
     *           can be `users/example&#64;gmail.com`." To invite Gmail users or users from
     *           external Google Workspace domains, user's email must be used for
     *           `{user}`.
     *
     *           Optional when setting `Space.spaceType` to `SPACE`.
     *
     *           Required when setting `Space.spaceType` to `GROUP_CHAT`, along with at
     *           least two memberships.
     *
     *           Required when setting `Space.spaceType` to `DIRECT_MESSAGE` with a human
     *           user, along with exactly one membership.
     *
     *           Must be empty when creating a 1:1 conversation between a human and the
     *           calling Chat app (when setting `Space.spaceType` to
     *           `DIRECT_MESSAGE` and `Space.singleUserBotDm` to `true`).
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return \Google\Chat\V1\Space
     *
     * @throws ApiException if the remote call fails
     */
    public function setUpSpace($space, array $optionalArgs = [])
    {
        $request = new SetUpSpaceRequest();
        $request->setSpace($space);
        if (isset($optionalArgs['requestId'])) {
            $request->setRequestId($optionalArgs['requestId']);
        }

        if (isset($optionalArgs['memberships'])) {
            $request->setMemberships($optionalArgs['memberships']);
        }

        return $this->startCall('SetUpSpace', Space::class, $optionalArgs, $request)->wait();
    }

    /**
     * Updates a message. There's a difference between the `patch` and `update`
     * methods. The `patch`
     * method uses a `patch` request while the `update` method uses a `put`
     * request. We recommend using the `patch` method. For an example, see
     * [Update a
     * message](https://developers.google.com/chat/api/guides/v1/messages/update).
     *
     * Requires
     * [authentication](https://developers.google.com/chat/api/guides/auth).
     * Supports
     * [app
     * authentication](https://developers.google.com/chat/api/guides/auth/service-accounts)
     * and [user
     * authentication](https://developers.google.com/chat/api/guides/auth/users).
     * When using app authentication, requests can only update messages
     * created by the calling Chat app.
     *
     * Sample code:
     * ```
     * $chatServiceClient = new ChatServiceClient();
     * try {
     *     $message = new Message();
     *     $response = $chatServiceClient->updateMessage($message);
     * } finally {
     *     $chatServiceClient->close();
     * }
     * ```
     *
     * @param Message $message      Required. Message with fields updated.
     * @param array   $optionalArgs {
     *     Optional.
     *
     *     @type FieldMask $updateMask
     *           Required. The field paths to update. Separate multiple values with commas
     *           or use `*` to update all field paths.
     *
     *           Currently supported field paths:
     *
     *           - `text`
     *
     *           - `attachment`
     *
     *           - `cards` (Requires [app
     *           authentication](/chat/api/guides/auth/service-accounts).)
     *
     *           - `cards_v2`  (Requires [app
     *           authentication](/chat/api/guides/auth/service-accounts).)
     *
     *           - Developer Preview: `accessory_widgets`  (Requires [app
     *           authentication](/chat/api/guides/auth/service-accounts).)
     *     @type bool $allowMissing
     *           Optional. If `true` and the message isn't found, a new message is created
     *           and `updateMask` is ignored. The specified message ID must be
     *           [client-assigned](https://developers.google.com/chat/api/guides/v1/messages/create#name_a_created_message)
     *           or the request fails.
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return \Google\Chat\V1\Message
     *
     * @throws ApiException if the remote call fails
     */
    public function updateMessage($message, array $optionalArgs = [])
    {
        $request = new UpdateMessageRequest();
        $requestParamHeaders = [];
        $request->setMessage($message);
        $requestParamHeaders['message.name'] = $message->getName();
        if (isset($optionalArgs['updateMask'])) {
            $request->setUpdateMask($optionalArgs['updateMask']);
        }

        if (isset($optionalArgs['allowMissing'])) {
            $request->setAllowMissing($optionalArgs['allowMissing']);
        }

        $requestParams = new RequestParamsHeaderDescriptor($requestParamHeaders);
        $optionalArgs['headers'] = isset($optionalArgs['headers']) ? array_merge($requestParams->getHeader(), $optionalArgs['headers']) : $requestParams->getHeader();
        return $this->startCall('UpdateMessage', Message::class, $optionalArgs, $request)->wait();
    }

    /**
     * Updates a space. For an example, see
     * [Update a
     * space](https://developers.google.com/chat/api/guides/v1/spaces/update).
     *
     * If you're updating the `displayName` field and receive the error message
     * `ALREADY_EXISTS`, try a different display name.. An existing space within
     * the Google Workspace organization might already use this display name.
     *
     * Requires [user
     * authentication](https://developers.google.com/chat/api/guides/auth/users).
     *
     * Sample code:
     * ```
     * $chatServiceClient = new ChatServiceClient();
     * try {
     *     $space = new Space();
     *     $response = $chatServiceClient->updateSpace($space);
     * } finally {
     *     $chatServiceClient->close();
     * }
     * ```
     *
     * @param Space $space        Required. Space with fields to be updated. `Space.name` must be
     *                            populated in the form of `spaces/{space}`. Only fields
     *                            specified by `update_mask` are updated.
     * @param array $optionalArgs {
     *     Optional.
     *
     *     @type FieldMask $updateMask
     *           Required. The updated field paths, comma separated if there are
     *           multiple.
     *
     *           Currently supported field paths:
     *
     *           - `display_name` (Only supports changing the display name of a space with
     *           the `SPACE` type, or when also including the `space_type` mask to change a
     *           `GROUP_CHAT` space type to `SPACE`. Trying to update the display name of a
     *           `GROUP_CHAT` or a `DIRECT_MESSAGE` space results in an invalid argument
     *           error. If you receive the error message `ALREADY_EXISTS` when updating the
     *           `displayName`, try a different `displayName`. An existing space within the
     *           Google Workspace organization might already use this display name.)
     *
     *           - `space_type` (Only supports changing a `GROUP_CHAT` space type to
     *           `SPACE`. Include `display_name` together with `space_type` in the update
     *           mask and ensure that the specified space has a non-empty display name and
     *           the `SPACE` space type. Including the `space_type` mask and the `SPACE`
     *           type in the specified space when updating the display name is optional if
     *           the existing space already has the `SPACE` type. Trying to update the
     *           space type in other ways results in an invalid argument error).
     *
     *           - `space_details`
     *
     *           - `space_history_state` (Supports [turning history on or off for the
     *           space](https://support.google.com/chat/answer/7664687) if [the organization
     *           allows users to change their history
     *           setting](https://support.google.com/a/answer/7664184).
     *           Warning: mutually exclusive with all other field paths.)
     *           - Developer Preview: `access_settings.audience` (Supports changing the
     *           [access setting](https://support.google.com/chat/answer/11971020) of a
     *           space. If no audience is specified in the access setting, the space's
     *           access setting is updated to restricted. Warning: mutually exclusive with
     *           all other field paths.)
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return \Google\Chat\V1\Space
     *
     * @throws ApiException if the remote call fails
     */
    public function updateSpace($space, array $optionalArgs = [])
    {
        $request = new UpdateSpaceRequest();
        $requestParamHeaders = [];
        $request->setSpace($space);
        $requestParamHeaders['space.name'] = $space->getName();
        if (isset($optionalArgs['updateMask'])) {
            $request->setUpdateMask($optionalArgs['updateMask']);
        }

        $requestParams = new RequestParamsHeaderDescriptor($requestParamHeaders);
        $optionalArgs['headers'] = isset($optionalArgs['headers']) ? array_merge($requestParams->getHeader(), $optionalArgs['headers']) : $requestParams->getHeader();
        return $this->startCall('UpdateSpace', Space::class, $optionalArgs, $request)->wait();
    }

    /**
     * Uploads an attachment. For an example, see
     * [Upload media as a file
     * attachment](https://developers.google.com/chat/api/guides/v1/media-and-attachments/upload).
     * Requires user
     * [authentication](https://developers.google.com/chat/api/guides/auth/users).
     *
     * You can upload attachments up to 200 MB. Certain file types aren't
     * supported. For details, see [File types blocked by Google
     * Chat](https://support.google.com/chat/answer/7651457?&co=GENIE.Platform%3DDesktop#File%20types%20blocked%20in%20Google%20Chat).
     *
     * Sample code:
     * ```
     * $chatServiceClient = new ChatServiceClient();
     * try {
     *     $formattedParent = $chatServiceClient->spaceName('[SPACE]');
     *     $filename = 'filename';
     *     $response = $chatServiceClient->uploadAttachment($formattedParent, $filename);
     * } finally {
     *     $chatServiceClient->close();
     * }
     * ```
     *
     * @param string $parent       Required. Resource name of the Chat space in which the attachment is
     *                             uploaded. Format "spaces/{space}".
     * @param string $filename     Required. The filename of the attachment, including the file extension.
     * @param array  $optionalArgs {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return \Google\Chat\V1\UploadAttachmentResponse
     *
     * @throws ApiException if the remote call fails
     */
    public function uploadAttachment($parent, $filename, array $optionalArgs = [])
    {
        $request = new UploadAttachmentRequest();
        $requestParamHeaders = [];
        $request->setParent($parent);
        $request->setFilename($filename);
        $requestParamHeaders['parent'] = $parent;
        $requestParams = new RequestParamsHeaderDescriptor($requestParamHeaders);
        $optionalArgs['headers'] = isset($optionalArgs['headers']) ? array_merge($requestParams->getHeader(), $optionalArgs['headers']) : $requestParams->getHeader();
        return $this->startCall('UploadAttachment', UploadAttachmentResponse::class, $optionalArgs, $request)->wait();
    }
}
