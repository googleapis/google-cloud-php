<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/privacy/dlp/v2/dlp.proto

namespace Google\Cloud\Dlp\V2;

use UnexpectedValueException;

/**
 * An enum of rules that can be used to transform a value. Can be a
 * record suppression, or one of the transformation rules specified under
 * `PrimitiveTransformation`.
 *
 * Protobuf type <code>google.privacy.dlp.v2.TransformationType</code>
 */
class TransformationType
{
    /**
     * Unused
     *
     * Generated from protobuf enum <code>TRANSFORMATION_TYPE_UNSPECIFIED = 0;</code>
     */
    const TRANSFORMATION_TYPE_UNSPECIFIED = 0;
    /**
     * Record suppression
     *
     * Generated from protobuf enum <code>RECORD_SUPPRESSION = 1;</code>
     */
    const RECORD_SUPPRESSION = 1;
    /**
     * Replace value
     *
     * Generated from protobuf enum <code>REPLACE_VALUE = 2;</code>
     */
    const REPLACE_VALUE = 2;
    /**
     * Replace value using a dictionary.
     *
     * Generated from protobuf enum <code>REPLACE_DICTIONARY = 15;</code>
     */
    const REPLACE_DICTIONARY = 15;
    /**
     * Redact
     *
     * Generated from protobuf enum <code>REDACT = 3;</code>
     */
    const REDACT = 3;
    /**
     * Character mask
     *
     * Generated from protobuf enum <code>CHARACTER_MASK = 4;</code>
     */
    const CHARACTER_MASK = 4;
    /**
     * FFX-FPE
     *
     * Generated from protobuf enum <code>CRYPTO_REPLACE_FFX_FPE = 5;</code>
     */
    const CRYPTO_REPLACE_FFX_FPE = 5;
    /**
     * Fixed size bucketing
     *
     * Generated from protobuf enum <code>FIXED_SIZE_BUCKETING = 6;</code>
     */
    const FIXED_SIZE_BUCKETING = 6;
    /**
     * Bucketing
     *
     * Generated from protobuf enum <code>BUCKETING = 7;</code>
     */
    const BUCKETING = 7;
    /**
     * Replace with info type
     *
     * Generated from protobuf enum <code>REPLACE_WITH_INFO_TYPE = 8;</code>
     */
    const REPLACE_WITH_INFO_TYPE = 8;
    /**
     * Time part
     *
     * Generated from protobuf enum <code>TIME_PART = 9;</code>
     */
    const TIME_PART = 9;
    /**
     * Crypto hash
     *
     * Generated from protobuf enum <code>CRYPTO_HASH = 10;</code>
     */
    const CRYPTO_HASH = 10;
    /**
     * Date shift
     *
     * Generated from protobuf enum <code>DATE_SHIFT = 12;</code>
     */
    const DATE_SHIFT = 12;
    /**
     * Deterministic crypto
     *
     * Generated from protobuf enum <code>CRYPTO_DETERMINISTIC_CONFIG = 13;</code>
     */
    const CRYPTO_DETERMINISTIC_CONFIG = 13;
    /**
     * Redact image
     *
     * Generated from protobuf enum <code>REDACT_IMAGE = 14;</code>
     */
    const REDACT_IMAGE = 14;

    private static $valueToName = [
        self::TRANSFORMATION_TYPE_UNSPECIFIED => 'TRANSFORMATION_TYPE_UNSPECIFIED',
        self::RECORD_SUPPRESSION => 'RECORD_SUPPRESSION',
        self::REPLACE_VALUE => 'REPLACE_VALUE',
        self::REPLACE_DICTIONARY => 'REPLACE_DICTIONARY',
        self::REDACT => 'REDACT',
        self::CHARACTER_MASK => 'CHARACTER_MASK',
        self::CRYPTO_REPLACE_FFX_FPE => 'CRYPTO_REPLACE_FFX_FPE',
        self::FIXED_SIZE_BUCKETING => 'FIXED_SIZE_BUCKETING',
        self::BUCKETING => 'BUCKETING',
        self::REPLACE_WITH_INFO_TYPE => 'REPLACE_WITH_INFO_TYPE',
        self::TIME_PART => 'TIME_PART',
        self::CRYPTO_HASH => 'CRYPTO_HASH',
        self::DATE_SHIFT => 'DATE_SHIFT',
        self::CRYPTO_DETERMINISTIC_CONFIG => 'CRYPTO_DETERMINISTIC_CONFIG',
        self::REDACT_IMAGE => 'REDACT_IMAGE',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

