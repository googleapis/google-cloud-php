<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/privacy/dlp/v2/dlp.proto

namespace Google\Cloud\Dlp\V2;

use UnexpectedValueException;

/**
 * Enum of possible outcomes of transformations. SUCCESS if transformation and
 * storing of transformation was successful, otherwise, reason for not
 * transforming.
 *
 * Protobuf type <code>google.privacy.dlp.v2.TransformationResultStatusType</code>
 */
class TransformationResultStatusType
{
    /**
     * Generated from protobuf enum <code>STATE_TYPE_UNSPECIFIED = 0;</code>
     */
    const STATE_TYPE_UNSPECIFIED = 0;
    /**
     * This will be set when a finding could not be transformed (i.e. outside user
     * set bucket range).
     *
     * Generated from protobuf enum <code>INVALID_TRANSFORM = 1;</code>
     */
    const INVALID_TRANSFORM = 1;
    /**
     * This will be set when a BigQuery transformation was successful but could
     * not be stored back in BigQuery because the transformed row exceeds
     * BigQuery's max row size.
     *
     * Generated from protobuf enum <code>BIGQUERY_MAX_ROW_SIZE_EXCEEDED = 2;</code>
     */
    const BIGQUERY_MAX_ROW_SIZE_EXCEEDED = 2;
    /**
     * This will be set when there is a finding in the custom metadata of a file,
     * but at the write time of the transformed file, this key / value pair is
     * unretrievable.
     *
     * Generated from protobuf enum <code>METADATA_UNRETRIEVABLE = 3;</code>
     */
    const METADATA_UNRETRIEVABLE = 3;
    /**
     * This will be set when the transformation and storing of it is successful.
     *
     * Generated from protobuf enum <code>SUCCESS = 4;</code>
     */
    const SUCCESS = 4;

    private static $valueToName = [
        self::STATE_TYPE_UNSPECIFIED => 'STATE_TYPE_UNSPECIFIED',
        self::INVALID_TRANSFORM => 'INVALID_TRANSFORM',
        self::BIGQUERY_MAX_ROW_SIZE_EXCEEDED => 'BIGQUERY_MAX_ROW_SIZE_EXCEEDED',
        self::METADATA_UNRETRIEVABLE => 'METADATA_UNRETRIEVABLE',
        self::SUCCESS => 'SUCCESS',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

