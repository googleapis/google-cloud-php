<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/privacy/dlp/v2/dlp.proto

namespace Google\Cloud\Dlp\V2\OtherCloudDiscoveryStartingLocation;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * The AWS starting location for discovery.
 *
 * Generated from protobuf message <code>google.privacy.dlp.v2.OtherCloudDiscoveryStartingLocation.AwsDiscoveryStartingLocation</code>
 */
class AwsDiscoveryStartingLocation extends \Google\Protobuf\Internal\Message
{
    protected $scope;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $account_id
     *           The AWS account ID that this discovery config applies to.
     *           Within an AWS organization, you can find the AWS account ID inside an
     *           AWS account ARN. Example:
     *           arn:{partition}:organizations::{management_account_id}:account/{org_id}/{account_id}
     *     @type bool $all_asset_inventory_assets
     *           All AWS assets stored in Asset Inventory that didn't match other AWS
     *           discovery configs.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Google\Privacy\Dlp\V2\Dlp::initOnce();
        parent::__construct($data);
    }

    /**
     * The AWS account ID that this discovery config applies to.
     * Within an AWS organization, you can find the AWS account ID inside an
     * AWS account ARN. Example:
     * arn:{partition}:organizations::{management_account_id}:account/{org_id}/{account_id}
     *
     * Generated from protobuf field <code>string account_id = 2;</code>
     * @return string
     */
    public function getAccountId()
    {
        return $this->readOneof(2);
    }

    public function hasAccountId()
    {
        return $this->hasOneof(2);
    }

    /**
     * The AWS account ID that this discovery config applies to.
     * Within an AWS organization, you can find the AWS account ID inside an
     * AWS account ARN. Example:
     * arn:{partition}:organizations::{management_account_id}:account/{org_id}/{account_id}
     *
     * Generated from protobuf field <code>string account_id = 2;</code>
     * @param string $var
     * @return $this
     */
    public function setAccountId($var)
    {
        GPBUtil::checkString($var, True);
        $this->writeOneof(2, $var);

        return $this;
    }

    /**
     * All AWS assets stored in Asset Inventory that didn't match other AWS
     * discovery configs.
     *
     * Generated from protobuf field <code>bool all_asset_inventory_assets = 3;</code>
     * @return bool
     */
    public function getAllAssetInventoryAssets()
    {
        return $this->readOneof(3);
    }

    public function hasAllAssetInventoryAssets()
    {
        return $this->hasOneof(3);
    }

    /**
     * All AWS assets stored in Asset Inventory that didn't match other AWS
     * discovery configs.
     *
     * Generated from protobuf field <code>bool all_asset_inventory_assets = 3;</code>
     * @param bool $var
     * @return $this
     */
    public function setAllAssetInventoryAssets($var)
    {
        GPBUtil::checkBool($var);
        $this->writeOneof(3, $var);

        return $this;
    }

    /**
     * @return string
     */
    public function getScope()
    {
        return $this->whichOneof("scope");
    }

}


