<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/privacy/dlp/v2/dlp.proto

namespace Google\Cloud\Dlp\V2\Domain;

use UnexpectedValueException;

/**
 * The signal used to determine the category.
 * This list may increase over time.
 *
 * Protobuf type <code>google.privacy.dlp.v2.Domain.Signal</code>
 */
class Signal
{
    /**
     * Unused.
     *
     * Generated from protobuf enum <code>SIGNAL_UNSPECIFIED = 0;</code>
     */
    const SIGNAL_UNSPECIFIED = 0;
    /**
     * One or more machine learning models are present.
     *
     * Generated from protobuf enum <code>MODEL = 1;</code>
     */
    const MODEL = 1;
    /**
     * A table appears to be a text embedding.
     *
     * Generated from protobuf enum <code>TEXT_EMBEDDING = 2;</code>
     */
    const TEXT_EMBEDDING = 2;
    /**
     * The [Cloud SQL Vertex
     * AI](https://cloud.google.com/sql/docs/postgres/integrate-cloud-sql-with-vertex-ai)
     * plugin is installed on the database.
     *
     * Generated from protobuf enum <code>VERTEX_PLUGIN = 3;</code>
     */
    const VERTEX_PLUGIN = 3;
    /**
     * Support for [Cloud SQL vector
     * embeddings](https://cloud.google.com/sql/docs/mysql/enable-vector-search)
     * is enabled on the database.
     *
     * Generated from protobuf enum <code>VECTOR_PLUGIN = 4;</code>
     */
    const VECTOR_PLUGIN = 4;
    /**
     * Source code is present.
     *
     * Generated from protobuf enum <code>SOURCE_CODE = 5;</code>
     */
    const SOURCE_CODE = 5;
    /**
     * If the service determines the category type. For example, Vertex AI
     * assets would always have a `Category` of `AI`.
     *
     * Generated from protobuf enum <code>SERVICE = 6;</code>
     */
    const SERVICE = 6;

    private static $valueToName = [
        self::SIGNAL_UNSPECIFIED => 'SIGNAL_UNSPECIFIED',
        self::MODEL => 'MODEL',
        self::TEXT_EMBEDDING => 'TEXT_EMBEDDING',
        self::VERTEX_PLUGIN => 'VERTEX_PLUGIN',
        self::VECTOR_PLUGIN => 'VECTOR_PLUGIN',
        self::SOURCE_CODE => 'SOURCE_CODE',
        self::SERVICE => 'SERVICE',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}


