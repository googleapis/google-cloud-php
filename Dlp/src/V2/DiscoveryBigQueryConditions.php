<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/privacy/dlp/v2/dlp.proto

namespace Google\Cloud\Dlp\V2;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Requirements that must be true before a table is scanned in discovery for the
 * first time. There is an AND relationship between the top-level attributes.
 * Additionally, minimum conditions with an OR relationship that must be met
 * before Cloud DLP scans a table can be set (like a minimum row count or a
 * minimum table age).
 *
 * Generated from protobuf message <code>google.privacy.dlp.v2.DiscoveryBigQueryConditions</code>
 */
class DiscoveryBigQueryConditions extends \Google\Protobuf\Internal\Message
{
    /**
     * BigQuery table must have been created after this date. Used to avoid
     * backfilling.
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp created_after = 1;</code>
     */
    private $created_after = null;
    /**
     * At least one of the conditions must be true for a table to be scanned.
     *
     * Generated from protobuf field <code>.google.privacy.dlp.v2.DiscoveryBigQueryConditions.OrConditions or_conditions = 4;</code>
     */
    private $or_conditions = null;
    protected $included_types;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type \Google\Protobuf\Timestamp $created_after
     *           BigQuery table must have been created after this date. Used to avoid
     *           backfilling.
     *     @type \Google\Cloud\Dlp\V2\BigQueryTableTypes $types
     *           Restrict discovery to specific table types.
     *     @type int $type_collection
     *           Restrict discovery to categories of table types.
     *     @type \Google\Cloud\Dlp\V2\DiscoveryBigQueryConditions\OrConditions $or_conditions
     *           At least one of the conditions must be true for a table to be scanned.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Google\Privacy\Dlp\V2\Dlp::initOnce();
        parent::__construct($data);
    }

    /**
     * BigQuery table must have been created after this date. Used to avoid
     * backfilling.
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp created_after = 1;</code>
     * @return \Google\Protobuf\Timestamp|null
     */
    public function getCreatedAfter()
    {
        return $this->created_after;
    }

    public function hasCreatedAfter()
    {
        return isset($this->created_after);
    }

    public function clearCreatedAfter()
    {
        unset($this->created_after);
    }

    /**
     * BigQuery table must have been created after this date. Used to avoid
     * backfilling.
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp created_after = 1;</code>
     * @param \Google\Protobuf\Timestamp $var
     * @return $this
     */
    public function setCreatedAfter($var)
    {
        GPBUtil::checkMessage($var, \Google\Protobuf\Timestamp::class);
        $this->created_after = $var;

        return $this;
    }

    /**
     * Restrict discovery to specific table types.
     *
     * Generated from protobuf field <code>.google.privacy.dlp.v2.BigQueryTableTypes types = 2;</code>
     * @return \Google\Cloud\Dlp\V2\BigQueryTableTypes|null
     */
    public function getTypes()
    {
        return $this->readOneof(2);
    }

    public function hasTypes()
    {
        return $this->hasOneof(2);
    }

    /**
     * Restrict discovery to specific table types.
     *
     * Generated from protobuf field <code>.google.privacy.dlp.v2.BigQueryTableTypes types = 2;</code>
     * @param \Google\Cloud\Dlp\V2\BigQueryTableTypes $var
     * @return $this
     */
    public function setTypes($var)
    {
        GPBUtil::checkMessage($var, \Google\Cloud\Dlp\V2\BigQueryTableTypes::class);
        $this->writeOneof(2, $var);

        return $this;
    }

    /**
     * Restrict discovery to categories of table types.
     *
     * Generated from protobuf field <code>.google.privacy.dlp.v2.BigQueryTableTypeCollection type_collection = 3;</code>
     * @return int
     */
    public function getTypeCollection()
    {
        return $this->readOneof(3);
    }

    public function hasTypeCollection()
    {
        return $this->hasOneof(3);
    }

    /**
     * Restrict discovery to categories of table types.
     *
     * Generated from protobuf field <code>.google.privacy.dlp.v2.BigQueryTableTypeCollection type_collection = 3;</code>
     * @param int $var
     * @return $this
     */
    public function setTypeCollection($var)
    {
        GPBUtil::checkEnum($var, \Google\Cloud\Dlp\V2\BigQueryTableTypeCollection::class);
        $this->writeOneof(3, $var);

        return $this;
    }

    /**
     * At least one of the conditions must be true for a table to be scanned.
     *
     * Generated from protobuf field <code>.google.privacy.dlp.v2.DiscoveryBigQueryConditions.OrConditions or_conditions = 4;</code>
     * @return \Google\Cloud\Dlp\V2\DiscoveryBigQueryConditions\OrConditions|null
     */
    public function getOrConditions()
    {
        return $this->or_conditions;
    }

    public function hasOrConditions()
    {
        return isset($this->or_conditions);
    }

    public function clearOrConditions()
    {
        unset($this->or_conditions);
    }

    /**
     * At least one of the conditions must be true for a table to be scanned.
     *
     * Generated from protobuf field <code>.google.privacy.dlp.v2.DiscoveryBigQueryConditions.OrConditions or_conditions = 4;</code>
     * @param \Google\Cloud\Dlp\V2\DiscoveryBigQueryConditions\OrConditions $var
     * @return $this
     */
    public function setOrConditions($var)
    {
        GPBUtil::checkMessage($var, \Google\Cloud\Dlp\V2\DiscoveryBigQueryConditions\OrConditions::class);
        $this->or_conditions = $var;

        return $this;
    }

    /**
     * @return string
     */
    public function getIncludedTypes()
    {
        return $this->whichOneof("included_types");
    }

}

