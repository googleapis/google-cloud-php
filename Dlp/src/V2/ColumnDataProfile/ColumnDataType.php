<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/privacy/dlp/v2/dlp.proto

namespace Google\Cloud\Dlp\V2\ColumnDataProfile;

use UnexpectedValueException;

/**
 * Data types of the data in a column. Types may be added over time.
 *
 * Protobuf type <code>google.privacy.dlp.v2.ColumnDataProfile.ColumnDataType</code>
 */
class ColumnDataType
{
    /**
     * Invalid type.
     *
     * Generated from protobuf enum <code>COLUMN_DATA_TYPE_UNSPECIFIED = 0;</code>
     */
    const COLUMN_DATA_TYPE_UNSPECIFIED = 0;
    /**
     * Encoded as a string in decimal format.
     *
     * Generated from protobuf enum <code>TYPE_INT64 = 1;</code>
     */
    const TYPE_INT64 = 1;
    /**
     * Encoded as a boolean "false" or "true".
     *
     * Generated from protobuf enum <code>TYPE_BOOL = 2;</code>
     */
    const TYPE_BOOL = 2;
    /**
     * Encoded as a number, or string "NaN", "Infinity" or "-Infinity".
     *
     * Generated from protobuf enum <code>TYPE_FLOAT64 = 3;</code>
     */
    const TYPE_FLOAT64 = 3;
    /**
     * Encoded as a string value.
     *
     * Generated from protobuf enum <code>TYPE_STRING = 4;</code>
     */
    const TYPE_STRING = 4;
    /**
     * Encoded as a base64 string per RFC 4648, section 4.
     *
     * Generated from protobuf enum <code>TYPE_BYTES = 5;</code>
     */
    const TYPE_BYTES = 5;
    /**
     * Encoded as an RFC 3339 timestamp with mandatory "Z" time zone string:
     * 1985-04-12T23:20:50.52Z
     *
     * Generated from protobuf enum <code>TYPE_TIMESTAMP = 6;</code>
     */
    const TYPE_TIMESTAMP = 6;
    /**
     * Encoded as RFC 3339 full-date format string: 1985-04-12
     *
     * Generated from protobuf enum <code>TYPE_DATE = 7;</code>
     */
    const TYPE_DATE = 7;
    /**
     * Encoded as RFC 3339 partial-time format string: 23:20:50.52
     *
     * Generated from protobuf enum <code>TYPE_TIME = 8;</code>
     */
    const TYPE_TIME = 8;
    /**
     * Encoded as RFC 3339 full-date "T" partial-time: 1985-04-12T23:20:50.52
     *
     * Generated from protobuf enum <code>TYPE_DATETIME = 9;</code>
     */
    const TYPE_DATETIME = 9;
    /**
     * Encoded as WKT
     *
     * Generated from protobuf enum <code>TYPE_GEOGRAPHY = 10;</code>
     */
    const TYPE_GEOGRAPHY = 10;
    /**
     * Encoded as a decimal string.
     *
     * Generated from protobuf enum <code>TYPE_NUMERIC = 11;</code>
     */
    const TYPE_NUMERIC = 11;
    /**
     * Container of ordered fields, each with a type and field name.
     *
     * Generated from protobuf enum <code>TYPE_RECORD = 12;</code>
     */
    const TYPE_RECORD = 12;
    /**
     * Decimal type.
     *
     * Generated from protobuf enum <code>TYPE_BIGNUMERIC = 13;</code>
     */
    const TYPE_BIGNUMERIC = 13;
    /**
     * Json type.
     *
     * Generated from protobuf enum <code>TYPE_JSON = 14;</code>
     */
    const TYPE_JSON = 14;

    private static $valueToName = [
        self::COLUMN_DATA_TYPE_UNSPECIFIED => 'COLUMN_DATA_TYPE_UNSPECIFIED',
        self::TYPE_INT64 => 'TYPE_INT64',
        self::TYPE_BOOL => 'TYPE_BOOL',
        self::TYPE_FLOAT64 => 'TYPE_FLOAT64',
        self::TYPE_STRING => 'TYPE_STRING',
        self::TYPE_BYTES => 'TYPE_BYTES',
        self::TYPE_TIMESTAMP => 'TYPE_TIMESTAMP',
        self::TYPE_DATE => 'TYPE_DATE',
        self::TYPE_TIME => 'TYPE_TIME',
        self::TYPE_DATETIME => 'TYPE_DATETIME',
        self::TYPE_GEOGRAPHY => 'TYPE_GEOGRAPHY',
        self::TYPE_NUMERIC => 'TYPE_NUMERIC',
        self::TYPE_RECORD => 'TYPE_RECORD',
        self::TYPE_BIGNUMERIC => 'TYPE_BIGNUMERIC',
        self::TYPE_JSON => 'TYPE_JSON',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(ColumnDataType::class, \Google\Cloud\Dlp\V2\ColumnDataProfile_ColumnDataType::class);

