<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/cloud/resourcemanager/v3/tag_keys.proto

namespace Google\Cloud\ResourceManager\V3;

use UnexpectedValueException;

/**
 * A purpose for each policy engine requiring such an integration. A single
 * policy engine may have multiple purposes defined, however a TagKey may only
 * specify a single purpose.
 *
 * Protobuf type <code>google.cloud.resourcemanager.v3.Purpose</code>
 */
class Purpose
{
    /**
     * Unspecified purpose.
     *
     * Generated from protobuf enum <code>PURPOSE_UNSPECIFIED = 0;</code>
     */
    const PURPOSE_UNSPECIFIED = 0;
    /**
     * Purpose for Compute Engine firewalls.
     * A corresponding `purpose_data` should be set for the network the tag is
     * intended for. The key should be `network` and the value should be in
     * either of these two formats:
     * -
     * `https://www.googleapis.com/compute/{compute_version}/projects/{project_id}/global/networks/{network_id}`
     * - `{project_id}/{network_name}`
     * Examples:
     * -
     * `https://www.googleapis.com/compute/staging_v1/projects/fail-closed-load-testing/global/networks/6992953698831725600`
     * - `fail-closed-load-testing/load-testing-network`
     *
     * Generated from protobuf enum <code>GCE_FIREWALL = 1;</code>
     */
    const GCE_FIREWALL = 1;

    private static $valueToName = [
        self::PURPOSE_UNSPECIFIED => 'PURPOSE_UNSPECIFIED',
        self::GCE_FIREWALL => 'GCE_FIREWALL',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

