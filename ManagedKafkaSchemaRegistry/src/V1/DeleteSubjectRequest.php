<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/cloud/managedkafka/schemaregistry/v1/schema_registry.proto

namespace Google\Cloud\ManagedKafka\SchemaRegistry\V1;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Request for DeleteSubject.
 *
 * Generated from protobuf message <code>google.cloud.managedkafka.schemaregistry.v1.DeleteSubjectRequest</code>
 */
class DeleteSubjectRequest extends \Google\Protobuf\Internal\Message
{
    /**
     * Required. The name of the subject to delete. Structured like:
     * `projects/{project}/locations/{location}/schemaRegistries/{schema_registry}/subjects/{subject}`
     * or
     * `projects/{project}/locations/{location}/schemaRegistries/{schema_registry}/contexts/{context}/subjects/{subject}`
     *
     * Generated from protobuf field <code>string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {</code>
     */
    protected $name = '';
    /**
     * Optional. If true, the subject and all associated metadata including the
     * schema ID will be deleted permanently. Otherwise, only the subject is
     * soft-deleted. The default is false. Soft-deleted subjects can still be
     * searched in ListSubjects API call with deleted=true query parameter. A
     * soft-delete of a subject must be performed before a hard-delete.
     *
     * Generated from protobuf field <code>optional bool permanent = 2 [(.google.api.field_behavior) = OPTIONAL];</code>
     */
    protected $permanent = null;

    /**
     * @param string $name Required. The name of the subject to delete. Structured like:
     *                     `projects/{project}/locations/{location}/schemaRegistries/{schema_registry}/subjects/{subject}`
     *                     or
     *                     `projects/{project}/locations/{location}/schemaRegistries/{schema_registry}/contexts/{context}/subjects/{subject}`
     *                     Please see {@see ManagedSchemaRegistryClient::schemaSubjectName()} for help formatting this field.
     *
     * @return \Google\Cloud\ManagedKafka\SchemaRegistry\V1\DeleteSubjectRequest
     *
     * @experimental
     */
    public static function build(string $name): self
    {
        return (new self())
            ->setName($name);
    }

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $name
     *           Required. The name of the subject to delete. Structured like:
     *           `projects/{project}/locations/{location}/schemaRegistries/{schema_registry}/subjects/{subject}`
     *           or
     *           `projects/{project}/locations/{location}/schemaRegistries/{schema_registry}/contexts/{context}/subjects/{subject}`
     *     @type bool $permanent
     *           Optional. If true, the subject and all associated metadata including the
     *           schema ID will be deleted permanently. Otherwise, only the subject is
     *           soft-deleted. The default is false. Soft-deleted subjects can still be
     *           searched in ListSubjects API call with deleted=true query parameter. A
     *           soft-delete of a subject must be performed before a hard-delete.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Google\Cloud\Managedkafka\Schemaregistry\V1\SchemaRegistry::initOnce();
        parent::__construct($data);
    }

    /**
     * Required. The name of the subject to delete. Structured like:
     * `projects/{project}/locations/{location}/schemaRegistries/{schema_registry}/subjects/{subject}`
     * or
     * `projects/{project}/locations/{location}/schemaRegistries/{schema_registry}/contexts/{context}/subjects/{subject}`
     *
     * Generated from protobuf field <code>string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {</code>
     * @return string
     */
    public function getName()
    {
        return $this->name;
    }

    /**
     * Required. The name of the subject to delete. Structured like:
     * `projects/{project}/locations/{location}/schemaRegistries/{schema_registry}/subjects/{subject}`
     * or
     * `projects/{project}/locations/{location}/schemaRegistries/{schema_registry}/contexts/{context}/subjects/{subject}`
     *
     * Generated from protobuf field <code>string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {</code>
     * @param string $var
     * @return $this
     */
    public function setName($var)
    {
        GPBUtil::checkString($var, True);
        $this->name = $var;

        return $this;
    }

    /**
     * Optional. If true, the subject and all associated metadata including the
     * schema ID will be deleted permanently. Otherwise, only the subject is
     * soft-deleted. The default is false. Soft-deleted subjects can still be
     * searched in ListSubjects API call with deleted=true query parameter. A
     * soft-delete of a subject must be performed before a hard-delete.
     *
     * Generated from protobuf field <code>optional bool permanent = 2 [(.google.api.field_behavior) = OPTIONAL];</code>
     * @return bool
     */
    public function getPermanent()
    {
        return isset($this->permanent) ? $this->permanent : false;
    }

    public function hasPermanent()
    {
        return isset($this->permanent);
    }

    public function clearPermanent()
    {
        unset($this->permanent);
    }

    /**
     * Optional. If true, the subject and all associated metadata including the
     * schema ID will be deleted permanently. Otherwise, only the subject is
     * soft-deleted. The default is false. Soft-deleted subjects can still be
     * searched in ListSubjects API call with deleted=true query parameter. A
     * soft-delete of a subject must be performed before a hard-delete.
     *
     * Generated from protobuf field <code>optional bool permanent = 2 [(.google.api.field_behavior) = OPTIONAL];</code>
     * @param bool $var
     * @return $this
     */
    public function setPermanent($var)
    {
        GPBUtil::checkBool($var);
        $this->permanent = $var;

        return $this;
    }

}

