<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/cloud/managedkafka/schemaregistry/v1/schema_registry.proto

namespace Google\Cloud\ManagedKafka\SchemaRegistry\V1;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Request for CheckCompatibility.
 *
 * Generated from protobuf message <code>google.cloud.managedkafka.schemaregistry.v1.CheckCompatibilityRequest</code>
 */
class CheckCompatibilityRequest extends \Google\Protobuf\Internal\Message
{
    /**
     * Required. The name of the resource to check compatibility for. The format
     * is either of following:
     * * projects/{project}/locations/{location}/schemaRegistries/{schema_registry}/compatibility/subjects/&#42;&#47;versions: Check compatibility with one or
     *   more versions of the specified subject.
     * * projects/{project}/locations/{location}/schemaRegistries/{schema_registry}/compatibility/subjects/{subject}/versions/{version}: Check
     *   compatibility with a specific version of the subject.
     *
     * Generated from protobuf field <code>string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {</code>
     */
    protected $name = '';
    /**
     * Optional. The schema type of the schema.
     *
     * Generated from protobuf field <code>optional .google.cloud.managedkafka.schemaregistry.v1.Schema.SchemaType schema_type = 2 [(.google.api.field_behavior) = OPTIONAL];</code>
     */
    protected $schema_type = null;
    /**
     * Required. The schema payload
     *
     * Generated from protobuf field <code>string schema = 3 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    protected $schema = '';
    /**
     * Optional. The schema references used by the schema.
     *
     * Generated from protobuf field <code>repeated .google.cloud.managedkafka.schemaregistry.v1.Schema.SchemaReference references = 4 [(.google.api.field_behavior) = OPTIONAL];</code>
     */
    private $references;
    /**
     * Optional. If true, the response will contain the compatibility check result
     * with reasons for failed checks. The default is false.
     *
     * Generated from protobuf field <code>optional bool verbose = 5 [(.google.api.field_behavior) = OPTIONAL];</code>
     */
    protected $verbose = null;

    /**
     * @param string $name   Required. The name of the resource to check compatibility for. The format
     *                       is either of following:
     *                       * projects/{project}/locations/{location}/schemaRegistries/{schema_registry}/compatibility/subjects/&#42;/versions: Check compatibility with one or
     *                       more versions of the specified subject.
     *                       * projects/{project}/locations/{location}/schemaRegistries/{schema_registry}/compatibility/subjects/{subject}/versions/{version}: Check
     *                       compatibility with a specific version of the subject.
     * @param string $schema Required. The schema payload
     *
     * @return \Google\Cloud\ManagedKafka\SchemaRegistry\V1\CheckCompatibilityRequest
     *
     * @experimental
     */
    public static function build(string $name, string $schema): self
    {
        return (new self())
            ->setName($name)
            ->setSchema($schema);
    }

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $name
     *           Required. The name of the resource to check compatibility for. The format
     *           is either of following:
     *           * projects/{project}/locations/{location}/schemaRegistries/{schema_registry}/compatibility/subjects/&#42;&#47;versions: Check compatibility with one or
     *             more versions of the specified subject.
     *           * projects/{project}/locations/{location}/schemaRegistries/{schema_registry}/compatibility/subjects/{subject}/versions/{version}: Check
     *             compatibility with a specific version of the subject.
     *     @type int $schema_type
     *           Optional. The schema type of the schema.
     *     @type string $schema
     *           Required. The schema payload
     *     @type array<\Google\Cloud\ManagedKafka\SchemaRegistry\V1\Schema\SchemaReference>|\Google\Protobuf\Internal\RepeatedField $references
     *           Optional. The schema references used by the schema.
     *     @type bool $verbose
     *           Optional. If true, the response will contain the compatibility check result
     *           with reasons for failed checks. The default is false.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Google\Cloud\Managedkafka\Schemaregistry\V1\SchemaRegistry::initOnce();
        parent::__construct($data);
    }

    /**
     * Required. The name of the resource to check compatibility for. The format
     * is either of following:
     * * projects/{project}/locations/{location}/schemaRegistries/{schema_registry}/compatibility/subjects/&#42;&#47;versions: Check compatibility with one or
     *   more versions of the specified subject.
     * * projects/{project}/locations/{location}/schemaRegistries/{schema_registry}/compatibility/subjects/{subject}/versions/{version}: Check
     *   compatibility with a specific version of the subject.
     *
     * Generated from protobuf field <code>string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {</code>
     * @return string
     */
    public function getName()
    {
        return $this->name;
    }

    /**
     * Required. The name of the resource to check compatibility for. The format
     * is either of following:
     * * projects/{project}/locations/{location}/schemaRegistries/{schema_registry}/compatibility/subjects/&#42;&#47;versions: Check compatibility with one or
     *   more versions of the specified subject.
     * * projects/{project}/locations/{location}/schemaRegistries/{schema_registry}/compatibility/subjects/{subject}/versions/{version}: Check
     *   compatibility with a specific version of the subject.
     *
     * Generated from protobuf field <code>string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {</code>
     * @param string $var
     * @return $this
     */
    public function setName($var)
    {
        GPBUtil::checkString($var, True);
        $this->name = $var;

        return $this;
    }

    /**
     * Optional. The schema type of the schema.
     *
     * Generated from protobuf field <code>optional .google.cloud.managedkafka.schemaregistry.v1.Schema.SchemaType schema_type = 2 [(.google.api.field_behavior) = OPTIONAL];</code>
     * @return int
     */
    public function getSchemaType()
    {
        return isset($this->schema_type) ? $this->schema_type : 0;
    }

    public function hasSchemaType()
    {
        return isset($this->schema_type);
    }

    public function clearSchemaType()
    {
        unset($this->schema_type);
    }

    /**
     * Optional. The schema type of the schema.
     *
     * Generated from protobuf field <code>optional .google.cloud.managedkafka.schemaregistry.v1.Schema.SchemaType schema_type = 2 [(.google.api.field_behavior) = OPTIONAL];</code>
     * @param int $var
     * @return $this
     */
    public function setSchemaType($var)
    {
        GPBUtil::checkEnum($var, \Google\Cloud\ManagedKafka\SchemaRegistry\V1\Schema\SchemaType::class);
        $this->schema_type = $var;

        return $this;
    }

    /**
     * Required. The schema payload
     *
     * Generated from protobuf field <code>string schema = 3 [(.google.api.field_behavior) = REQUIRED];</code>
     * @return string
     */
    public function getSchema()
    {
        return $this->schema;
    }

    /**
     * Required. The schema payload
     *
     * Generated from protobuf field <code>string schema = 3 [(.google.api.field_behavior) = REQUIRED];</code>
     * @param string $var
     * @return $this
     */
    public function setSchema($var)
    {
        GPBUtil::checkString($var, True);
        $this->schema = $var;

        return $this;
    }

    /**
     * Optional. The schema references used by the schema.
     *
     * Generated from protobuf field <code>repeated .google.cloud.managedkafka.schemaregistry.v1.Schema.SchemaReference references = 4 [(.google.api.field_behavior) = OPTIONAL];</code>
     * @return \Google\Protobuf\Internal\RepeatedField
     */
    public function getReferences()
    {
        return $this->references;
    }

    /**
     * Optional. The schema references used by the schema.
     *
     * Generated from protobuf field <code>repeated .google.cloud.managedkafka.schemaregistry.v1.Schema.SchemaReference references = 4 [(.google.api.field_behavior) = OPTIONAL];</code>
     * @param array<\Google\Cloud\ManagedKafka\SchemaRegistry\V1\Schema\SchemaReference>|\Google\Protobuf\Internal\RepeatedField $var
     * @return $this
     */
    public function setReferences($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::MESSAGE, \Google\Cloud\ManagedKafka\SchemaRegistry\V1\Schema\SchemaReference::class);
        $this->references = $arr;

        return $this;
    }

    /**
     * Optional. If true, the response will contain the compatibility check result
     * with reasons for failed checks. The default is false.
     *
     * Generated from protobuf field <code>optional bool verbose = 5 [(.google.api.field_behavior) = OPTIONAL];</code>
     * @return bool
     */
    public function getVerbose()
    {
        return isset($this->verbose) ? $this->verbose : false;
    }

    public function hasVerbose()
    {
        return isset($this->verbose);
    }

    public function clearVerbose()
    {
        unset($this->verbose);
    }

    /**
     * Optional. If true, the response will contain the compatibility check result
     * with reasons for failed checks. The default is false.
     *
     * Generated from protobuf field <code>optional bool verbose = 5 [(.google.api.field_behavior) = OPTIONAL];</code>
     * @param bool $var
     * @return $this
     */
    public function setVerbose($var)
    {
        GPBUtil::checkBool($var);
        $this->verbose = $var;

        return $this;
    }

}

