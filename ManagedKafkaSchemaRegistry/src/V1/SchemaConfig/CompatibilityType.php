<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/cloud/managedkafka/schemaregistry/v1/schema_registry_resources.proto

namespace Google\Cloud\ManagedKafka\SchemaRegistry\V1\SchemaConfig;

use UnexpectedValueException;

/**
 * Compatibility type of the schemas.
 *
 * Protobuf type <code>google.cloud.managedkafka.schemaregistry.v1.SchemaConfig.CompatibilityType</code>
 */
class CompatibilityType
{
    /**
     * No compatibility check.
     *
     * Generated from protobuf enum <code>NONE = 0;</code>
     */
    const NONE = 0;
    /**
     * Backwards compatible with the most recent version.
     *
     * Generated from protobuf enum <code>BACKWARD = 1;</code>
     */
    const BACKWARD = 1;
    /**
     * Backwards compatible with all previous versions.
     *
     * Generated from protobuf enum <code>BACKWARD_TRANSITIVE = 2;</code>
     */
    const BACKWARD_TRANSITIVE = 2;
    /**
     * Forwards compatible with the most recent version.
     *
     * Generated from protobuf enum <code>FORWARD = 3;</code>
     */
    const FORWARD = 3;
    /**
     * Forwards compatible with all previous versions.
     *
     * Generated from protobuf enum <code>FORWARD_TRANSITIVE = 4;</code>
     */
    const FORWARD_TRANSITIVE = 4;
    /**
     * Backwards and forwards compatible with the most recent version.
     *
     * Generated from protobuf enum <code>FULL = 5;</code>
     */
    const FULL = 5;
    /**
     * Backwards and forwards compatible with all previous versions.
     *
     * Generated from protobuf enum <code>FULL_TRANSITIVE = 6;</code>
     */
    const FULL_TRANSITIVE = 6;

    private static $valueToName = [
        self::NONE => 'NONE',
        self::BACKWARD => 'BACKWARD',
        self::BACKWARD_TRANSITIVE => 'BACKWARD_TRANSITIVE',
        self::FORWARD => 'FORWARD',
        self::FORWARD_TRANSITIVE => 'FORWARD_TRANSITIVE',
        self::FULL => 'FULL',
        self::FULL_TRANSITIVE => 'FULL_TRANSITIVE',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}


