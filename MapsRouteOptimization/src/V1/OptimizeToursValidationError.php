<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/maps/routeoptimization/v1/route_optimization_service.proto

namespace Google\Maps\RouteOptimization\V1;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Describes an error or warning encountered when validating an
 * `OptimizeToursRequest`.
 *
 * Generated from protobuf message <code>google.maps.routeoptimization.v1.OptimizeToursValidationError</code>
 */
class OptimizeToursValidationError extends \Google\Protobuf\Internal\Message
{
    /**
     * A validation error is defined by the pair (`code`, `display_name`) which
     * are always present.
     * The fields following this section provide more context about the error.
     * *MULTIPLE ERRORS*:
     * When there are multiple errors, the validation process tries to output
     * several of them. Much like a compiler, this is an imperfect process. Some
     * validation errors will be "fatal", meaning that they stop the entire
     * validation process. This is the case for `display_name="UNSPECIFIED"`
     * errors, among others. Some errors may cause the validation process to skip
     * other errors.
     * *STABILITY*:
     * `code` and `display_name` should be very stable. But new codes and
     * display names may appear over time, which may cause a given (invalid)
     * request to yield a different (`code`, `display_name`) pair because the new
     * error hid the old one. For example, see "MULTIPLE ERRORS".
     *
     * Generated from protobuf field <code>int32 code = 1;</code>
     */
    protected $code = 0;
    /**
     * The error display name.
     *
     * Generated from protobuf field <code>string display_name = 2;</code>
     */
    protected $display_name = '';
    /**
     * An error context may involve 0, 1 (most of the time) or more fields. For
     * example, referring to vehicle #4 and shipment #2's first pickup can be
     * done as follows:
     * ```
     * fields { name: "vehicles" index: 4}
     * fields { name: "shipments" index: 2 sub_field {name: "pickups" index: 0} }
     * ```
     * Note, however, that the cardinality of `fields` should not change for a
     * given error code.
     *
     * Generated from protobuf field <code>repeated .google.maps.routeoptimization.v1.OptimizeToursValidationError.FieldReference fields = 3;</code>
     */
    private $fields;
    /**
     * Human-readable string describing the error. There is a 1:1 mapping
     * between `code` and `error_message` (when code != "UNSPECIFIED").
     * *STABILITY*: Not stable: the error message associated to a given `code` may
     * change (hopefully to clarify it) over time. Please rely on the
     * `display_name` and `code` instead.
     *
     * Generated from protobuf field <code>string error_message = 4;</code>
     */
    protected $error_message = '';
    /**
     * May contain the value(s) of the field(s). This is not always available. You
     * should absolutely not rely on it and use it only for manual model
     * debugging.
     *
     * Generated from protobuf field <code>string offending_values = 5;</code>
     */
    protected $offending_values = '';

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type int $code
     *           A validation error is defined by the pair (`code`, `display_name`) which
     *           are always present.
     *           The fields following this section provide more context about the error.
     *           *MULTIPLE ERRORS*:
     *           When there are multiple errors, the validation process tries to output
     *           several of them. Much like a compiler, this is an imperfect process. Some
     *           validation errors will be "fatal", meaning that they stop the entire
     *           validation process. This is the case for `display_name="UNSPECIFIED"`
     *           errors, among others. Some errors may cause the validation process to skip
     *           other errors.
     *           *STABILITY*:
     *           `code` and `display_name` should be very stable. But new codes and
     *           display names may appear over time, which may cause a given (invalid)
     *           request to yield a different (`code`, `display_name`) pair because the new
     *           error hid the old one. For example, see "MULTIPLE ERRORS".
     *     @type string $display_name
     *           The error display name.
     *     @type array<\Google\Maps\RouteOptimization\V1\OptimizeToursValidationError\FieldReference>|\Google\Protobuf\Internal\RepeatedField $fields
     *           An error context may involve 0, 1 (most of the time) or more fields. For
     *           example, referring to vehicle #4 and shipment #2's first pickup can be
     *           done as follows:
     *           ```
     *           fields { name: "vehicles" index: 4}
     *           fields { name: "shipments" index: 2 sub_field {name: "pickups" index: 0} }
     *           ```
     *           Note, however, that the cardinality of `fields` should not change for a
     *           given error code.
     *     @type string $error_message
     *           Human-readable string describing the error. There is a 1:1 mapping
     *           between `code` and `error_message` (when code != "UNSPECIFIED").
     *           *STABILITY*: Not stable: the error message associated to a given `code` may
     *           change (hopefully to clarify it) over time. Please rely on the
     *           `display_name` and `code` instead.
     *     @type string $offending_values
     *           May contain the value(s) of the field(s). This is not always available. You
     *           should absolutely not rely on it and use it only for manual model
     *           debugging.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Google\Maps\Routeoptimization\V1\RouteOptimizationService::initOnce();
        parent::__construct($data);
    }

    /**
     * A validation error is defined by the pair (`code`, `display_name`) which
     * are always present.
     * The fields following this section provide more context about the error.
     * *MULTIPLE ERRORS*:
     * When there are multiple errors, the validation process tries to output
     * several of them. Much like a compiler, this is an imperfect process. Some
     * validation errors will be "fatal", meaning that they stop the entire
     * validation process. This is the case for `display_name="UNSPECIFIED"`
     * errors, among others. Some errors may cause the validation process to skip
     * other errors.
     * *STABILITY*:
     * `code` and `display_name` should be very stable. But new codes and
     * display names may appear over time, which may cause a given (invalid)
     * request to yield a different (`code`, `display_name`) pair because the new
     * error hid the old one. For example, see "MULTIPLE ERRORS".
     *
     * Generated from protobuf field <code>int32 code = 1;</code>
     * @return int
     */
    public function getCode()
    {
        return $this->code;
    }

    /**
     * A validation error is defined by the pair (`code`, `display_name`) which
     * are always present.
     * The fields following this section provide more context about the error.
     * *MULTIPLE ERRORS*:
     * When there are multiple errors, the validation process tries to output
     * several of them. Much like a compiler, this is an imperfect process. Some
     * validation errors will be "fatal", meaning that they stop the entire
     * validation process. This is the case for `display_name="UNSPECIFIED"`
     * errors, among others. Some errors may cause the validation process to skip
     * other errors.
     * *STABILITY*:
     * `code` and `display_name` should be very stable. But new codes and
     * display names may appear over time, which may cause a given (invalid)
     * request to yield a different (`code`, `display_name`) pair because the new
     * error hid the old one. For example, see "MULTIPLE ERRORS".
     *
     * Generated from protobuf field <code>int32 code = 1;</code>
     * @param int $var
     * @return $this
     */
    public function setCode($var)
    {
        GPBUtil::checkInt32($var);
        $this->code = $var;

        return $this;
    }

    /**
     * The error display name.
     *
     * Generated from protobuf field <code>string display_name = 2;</code>
     * @return string
     */
    public function getDisplayName()
    {
        return $this->display_name;
    }

    /**
     * The error display name.
     *
     * Generated from protobuf field <code>string display_name = 2;</code>
     * @param string $var
     * @return $this
     */
    public function setDisplayName($var)
    {
        GPBUtil::checkString($var, True);
        $this->display_name = $var;

        return $this;
    }

    /**
     * An error context may involve 0, 1 (most of the time) or more fields. For
     * example, referring to vehicle #4 and shipment #2's first pickup can be
     * done as follows:
     * ```
     * fields { name: "vehicles" index: 4}
     * fields { name: "shipments" index: 2 sub_field {name: "pickups" index: 0} }
     * ```
     * Note, however, that the cardinality of `fields` should not change for a
     * given error code.
     *
     * Generated from protobuf field <code>repeated .google.maps.routeoptimization.v1.OptimizeToursValidationError.FieldReference fields = 3;</code>
     * @return \Google\Protobuf\Internal\RepeatedField
     */
    public function getFields()
    {
        return $this->fields;
    }

    /**
     * An error context may involve 0, 1 (most of the time) or more fields. For
     * example, referring to vehicle #4 and shipment #2's first pickup can be
     * done as follows:
     * ```
     * fields { name: "vehicles" index: 4}
     * fields { name: "shipments" index: 2 sub_field {name: "pickups" index: 0} }
     * ```
     * Note, however, that the cardinality of `fields` should not change for a
     * given error code.
     *
     * Generated from protobuf field <code>repeated .google.maps.routeoptimization.v1.OptimizeToursValidationError.FieldReference fields = 3;</code>
     * @param array<\Google\Maps\RouteOptimization\V1\OptimizeToursValidationError\FieldReference>|\Google\Protobuf\Internal\RepeatedField $var
     * @return $this
     */
    public function setFields($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::MESSAGE, \Google\Maps\RouteOptimization\V1\OptimizeToursValidationError\FieldReference::class);
        $this->fields = $arr;

        return $this;
    }

    /**
     * Human-readable string describing the error. There is a 1:1 mapping
     * between `code` and `error_message` (when code != "UNSPECIFIED").
     * *STABILITY*: Not stable: the error message associated to a given `code` may
     * change (hopefully to clarify it) over time. Please rely on the
     * `display_name` and `code` instead.
     *
     * Generated from protobuf field <code>string error_message = 4;</code>
     * @return string
     */
    public function getErrorMessage()
    {
        return $this->error_message;
    }

    /**
     * Human-readable string describing the error. There is a 1:1 mapping
     * between `code` and `error_message` (when code != "UNSPECIFIED").
     * *STABILITY*: Not stable: the error message associated to a given `code` may
     * change (hopefully to clarify it) over time. Please rely on the
     * `display_name` and `code` instead.
     *
     * Generated from protobuf field <code>string error_message = 4;</code>
     * @param string $var
     * @return $this
     */
    public function setErrorMessage($var)
    {
        GPBUtil::checkString($var, True);
        $this->error_message = $var;

        return $this;
    }

    /**
     * May contain the value(s) of the field(s). This is not always available. You
     * should absolutely not rely on it and use it only for manual model
     * debugging.
     *
     * Generated from protobuf field <code>string offending_values = 5;</code>
     * @return string
     */
    public function getOffendingValues()
    {
        return $this->offending_values;
    }

    /**
     * May contain the value(s) of the field(s). This is not always available. You
     * should absolutely not rely on it and use it only for manual model
     * debugging.
     *
     * Generated from protobuf field <code>string offending_values = 5;</code>
     * @param string $var
     * @return $this
     */
    public function setOffendingValues($var)
    {
        GPBUtil::checkString($var, True);
        $this->offending_values = $var;

        return $this;
    }

}

