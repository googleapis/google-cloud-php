<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/cloud/vmwareengine/v1/vmwareengine_resources.proto

namespace Google\Cloud\VmwareEngine\V1\PeeringRoute;

use UnexpectedValueException;

/**
 * The type of the peering route.
 *
 * Protobuf type <code>google.cloud.vmwareengine.v1.PeeringRoute.Type</code>
 */
class Type
{
    /**
     * Unspecified peering route type. This is the default value.
     *
     * Generated from protobuf enum <code>TYPE_UNSPECIFIED = 0;</code>
     */
    const TYPE_UNSPECIFIED = 0;
    /**
     * Dynamic routes in the peer network.
     *
     * Generated from protobuf enum <code>DYNAMIC_PEERING_ROUTE = 1;</code>
     */
    const DYNAMIC_PEERING_ROUTE = 1;
    /**
     * Static routes in the peer network.
     *
     * Generated from protobuf enum <code>STATIC_PEERING_ROUTE = 2;</code>
     */
    const STATIC_PEERING_ROUTE = 2;
    /**
     * Created, updated, and removed automatically by Google Cloud when subnets
     * are created, modified, or deleted in the peer network.
     *
     * Generated from protobuf enum <code>SUBNET_PEERING_ROUTE = 3;</code>
     */
    const SUBNET_PEERING_ROUTE = 3;

    private static $valueToName = [
        self::TYPE_UNSPECIFIED => 'TYPE_UNSPECIFIED',
        self::DYNAMIC_PEERING_ROUTE => 'DYNAMIC_PEERING_ROUTE',
        self::STATIC_PEERING_ROUTE => 'STATIC_PEERING_ROUTE',
        self::SUBNET_PEERING_ROUTE => 'SUBNET_PEERING_ROUTE',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}


