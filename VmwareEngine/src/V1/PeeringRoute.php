<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/cloud/vmwareengine/v1/vmwareengine_resources.proto

namespace Google\Cloud\VmwareEngine\V1;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Exchanged network peering route.
 *
 * Generated from protobuf message <code>google.cloud.vmwareengine.v1.PeeringRoute</code>
 */
class PeeringRoute extends \Google\Protobuf\Internal\Message
{
    /**
     * Output only. Destination range of the peering route in CIDR notation.
     *
     * Generated from protobuf field <code>string dest_range = 1 [(.google.api.field_behavior) = OUTPUT_ONLY];</code>
     */
    private $dest_range = '';
    /**
     * Output only. Type of the route in the peer VPC network.
     *
     * Generated from protobuf field <code>.google.cloud.vmwareengine.v1.PeeringRoute.Type type = 2 [(.google.api.field_behavior) = OUTPUT_ONLY];</code>
     */
    private $type = 0;
    /**
     * Output only. Region containing the next hop of the peering route. This
     * field only applies to dynamic routes in the peer VPC network.
     *
     * Generated from protobuf field <code>string next_hop_region = 3 [(.google.api.field_behavior) = OUTPUT_ONLY];</code>
     */
    private $next_hop_region = '';
    /**
     * Output only. The priority of the peering route.
     *
     * Generated from protobuf field <code>int64 priority = 4 [(.google.api.field_behavior) = OUTPUT_ONLY];</code>
     */
    private $priority = 0;
    /**
     * Output only. True if the peering route has been imported from a peered
     * VPC network; false otherwise. The import happens if the field
     * `NetworkPeering.importCustomRoutes` is true for this network,
     * `NetworkPeering.exportCustomRoutes` is true for the peer VPC network, and
     * the import does not result in a route conflict.
     *
     * Generated from protobuf field <code>bool imported = 5 [(.google.api.field_behavior) = OUTPUT_ONLY];</code>
     */
    private $imported = false;
    /**
     * Output only. Direction of the routes exchanged with the peer network, from
     * the VMware Engine network perspective:
     * * Routes of direction `INCOMING` are imported from the peer network.
     * * Routes of direction `OUTGOING` are exported from the intranet VPC network
     * of the VMware Engine network.
     *
     * Generated from protobuf field <code>.google.cloud.vmwareengine.v1.PeeringRoute.Direction direction = 6 [(.google.api.field_behavior) = OUTPUT_ONLY];</code>
     */
    private $direction = 0;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $dest_range
     *           Output only. Destination range of the peering route in CIDR notation.
     *     @type int $type
     *           Output only. Type of the route in the peer VPC network.
     *     @type string $next_hop_region
     *           Output only. Region containing the next hop of the peering route. This
     *           field only applies to dynamic routes in the peer VPC network.
     *     @type int|string $priority
     *           Output only. The priority of the peering route.
     *     @type bool $imported
     *           Output only. True if the peering route has been imported from a peered
     *           VPC network; false otherwise. The import happens if the field
     *           `NetworkPeering.importCustomRoutes` is true for this network,
     *           `NetworkPeering.exportCustomRoutes` is true for the peer VPC network, and
     *           the import does not result in a route conflict.
     *     @type int $direction
     *           Output only. Direction of the routes exchanged with the peer network, from
     *           the VMware Engine network perspective:
     *           * Routes of direction `INCOMING` are imported from the peer network.
     *           * Routes of direction `OUTGOING` are exported from the intranet VPC network
     *           of the VMware Engine network.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Google\Cloud\Vmwareengine\V1\VmwareengineResources::initOnce();
        parent::__construct($data);
    }

    /**
     * Output only. Destination range of the peering route in CIDR notation.
     *
     * Generated from protobuf field <code>string dest_range = 1 [(.google.api.field_behavior) = OUTPUT_ONLY];</code>
     * @return string
     */
    public function getDestRange()
    {
        return $this->dest_range;
    }

    /**
     * Output only. Destination range of the peering route in CIDR notation.
     *
     * Generated from protobuf field <code>string dest_range = 1 [(.google.api.field_behavior) = OUTPUT_ONLY];</code>
     * @param string $var
     * @return $this
     */
    public function setDestRange($var)
    {
        GPBUtil::checkString($var, True);
        $this->dest_range = $var;

        return $this;
    }

    /**
     * Output only. Type of the route in the peer VPC network.
     *
     * Generated from protobuf field <code>.google.cloud.vmwareengine.v1.PeeringRoute.Type type = 2 [(.google.api.field_behavior) = OUTPUT_ONLY];</code>
     * @return int
     */
    public function getType()
    {
        return $this->type;
    }

    /**
     * Output only. Type of the route in the peer VPC network.
     *
     * Generated from protobuf field <code>.google.cloud.vmwareengine.v1.PeeringRoute.Type type = 2 [(.google.api.field_behavior) = OUTPUT_ONLY];</code>
     * @param int $var
     * @return $this
     */
    public function setType($var)
    {
        GPBUtil::checkEnum($var, \Google\Cloud\VmwareEngine\V1\PeeringRoute\Type::class);
        $this->type = $var;

        return $this;
    }

    /**
     * Output only. Region containing the next hop of the peering route. This
     * field only applies to dynamic routes in the peer VPC network.
     *
     * Generated from protobuf field <code>string next_hop_region = 3 [(.google.api.field_behavior) = OUTPUT_ONLY];</code>
     * @return string
     */
    public function getNextHopRegion()
    {
        return $this->next_hop_region;
    }

    /**
     * Output only. Region containing the next hop of the peering route. This
     * field only applies to dynamic routes in the peer VPC network.
     *
     * Generated from protobuf field <code>string next_hop_region = 3 [(.google.api.field_behavior) = OUTPUT_ONLY];</code>
     * @param string $var
     * @return $this
     */
    public function setNextHopRegion($var)
    {
        GPBUtil::checkString($var, True);
        $this->next_hop_region = $var;

        return $this;
    }

    /**
     * Output only. The priority of the peering route.
     *
     * Generated from protobuf field <code>int64 priority = 4 [(.google.api.field_behavior) = OUTPUT_ONLY];</code>
     * @return int|string
     */
    public function getPriority()
    {
        return $this->priority;
    }

    /**
     * Output only. The priority of the peering route.
     *
     * Generated from protobuf field <code>int64 priority = 4 [(.google.api.field_behavior) = OUTPUT_ONLY];</code>
     * @param int|string $var
     * @return $this
     */
    public function setPriority($var)
    {
        GPBUtil::checkInt64($var);
        $this->priority = $var;

        return $this;
    }

    /**
     * Output only. True if the peering route has been imported from a peered
     * VPC network; false otherwise. The import happens if the field
     * `NetworkPeering.importCustomRoutes` is true for this network,
     * `NetworkPeering.exportCustomRoutes` is true for the peer VPC network, and
     * the import does not result in a route conflict.
     *
     * Generated from protobuf field <code>bool imported = 5 [(.google.api.field_behavior) = OUTPUT_ONLY];</code>
     * @return bool
     */
    public function getImported()
    {
        return $this->imported;
    }

    /**
     * Output only. True if the peering route has been imported from a peered
     * VPC network; false otherwise. The import happens if the field
     * `NetworkPeering.importCustomRoutes` is true for this network,
     * `NetworkPeering.exportCustomRoutes` is true for the peer VPC network, and
     * the import does not result in a route conflict.
     *
     * Generated from protobuf field <code>bool imported = 5 [(.google.api.field_behavior) = OUTPUT_ONLY];</code>
     * @param bool $var
     * @return $this
     */
    public function setImported($var)
    {
        GPBUtil::checkBool($var);
        $this->imported = $var;

        return $this;
    }

    /**
     * Output only. Direction of the routes exchanged with the peer network, from
     * the VMware Engine network perspective:
     * * Routes of direction `INCOMING` are imported from the peer network.
     * * Routes of direction `OUTGOING` are exported from the intranet VPC network
     * of the VMware Engine network.
     *
     * Generated from protobuf field <code>.google.cloud.vmwareengine.v1.PeeringRoute.Direction direction = 6 [(.google.api.field_behavior) = OUTPUT_ONLY];</code>
     * @return int
     */
    public function getDirection()
    {
        return $this->direction;
    }

    /**
     * Output only. Direction of the routes exchanged with the peer network, from
     * the VMware Engine network perspective:
     * * Routes of direction `INCOMING` are imported from the peer network.
     * * Routes of direction `OUTGOING` are exported from the intranet VPC network
     * of the VMware Engine network.
     *
     * Generated from protobuf field <code>.google.cloud.vmwareengine.v1.PeeringRoute.Direction direction = 6 [(.google.api.field_behavior) = OUTPUT_ONLY];</code>
     * @param int $var
     * @return $this
     */
    public function setDirection($var)
    {
        GPBUtil::checkEnum($var, \Google\Cloud\VmwareEngine\V1\PeeringRoute\Direction::class);
        $this->direction = $var;

        return $this;
    }

}

