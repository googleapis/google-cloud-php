<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/cloud/vmwareengine/v1/vmwareengine_resources.proto

namespace Google\Cloud\VmwareEngine\V1;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Details of a network peering.
 *
 * Generated from protobuf message <code>google.cloud.vmwareengine.v1.NetworkPeering</code>
 */
class NetworkPeering extends \Google\Protobuf\Internal\Message
{
    /**
     * Output only. The resource name of the network peering. NetworkPeering is a
     * global resource and location can only be global. Resource names are
     * scheme-less URIs that follow the conventions in
     * https://cloud.google.com/apis/design/resource_names.
     * For example:
     * `projects/my-project/locations/global/networkPeerings/my-peering`
     *
     * Generated from protobuf field <code>string name = 1 [(.google.api.field_behavior) = OUTPUT_ONLY];</code>
     */
    private $name = '';
    /**
     * Output only. Creation time of this resource.
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp create_time = 2 [(.google.api.field_behavior) = OUTPUT_ONLY];</code>
     */
    private $create_time = null;
    /**
     * Output only. Last update time of this resource.
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp update_time = 3 [(.google.api.field_behavior) = OUTPUT_ONLY];</code>
     */
    private $update_time = null;
    /**
     * Required. The relative resource name of the network to peer with
     * a standard VMware Engine network. The provided network can be a
     * consumer VPC network or another standard VMware Engine network. If the
     * `peer_network_type` is VMWARE_ENGINE_NETWORK, specify the name in the form:
     * `projects/{project}/locations/global/vmwareEngineNetworks/{vmware_engine_network_id}`.
     * Otherwise specify the name in the form:
     * `projects/{project}/global/networks/{network_id}`, where
     * `{project}` can either be a project number or a project ID.
     *
     * Generated from protobuf field <code>string peer_network = 5 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    private $peer_network = '';
    /**
     * Optional. True if custom routes are exported to the peered network;
     * false otherwise. The default value is true.
     *
     * Generated from protobuf field <code>optional bool export_custom_routes = 8 [(.google.api.field_behavior) = OPTIONAL];</code>
     */
    private $export_custom_routes = null;
    /**
     * Optional. True if custom routes are imported from the peered network;
     * false otherwise. The default value is true.
     *
     * Generated from protobuf field <code>optional bool import_custom_routes = 9 [(.google.api.field_behavior) = OPTIONAL];</code>
     */
    private $import_custom_routes = null;
    /**
     * Optional. True if full mesh connectivity is created and managed
     * automatically between peered networks; false otherwise. Currently this
     * field is always true because Google Compute Engine automatically creates
     * and manages subnetwork routes between two VPC networks when peering state
     * is 'ACTIVE'.
     *
     * Generated from protobuf field <code>optional bool exchange_subnet_routes = 10 [(.google.api.field_behavior) = OPTIONAL];</code>
     */
    private $exchange_subnet_routes = null;
    /**
     * Optional. True if all subnet routes with a public IP address range are
     * exported; false otherwise. The default value is true. IPv4 special-use
     * ranges (https://en.wikipedia.org/wiki/IPv4#Special_addresses) are always
     * exported to peers and are not controlled by this field.
     *
     * Generated from protobuf field <code>optional bool export_custom_routes_with_public_ip = 11 [(.google.api.field_behavior) = OPTIONAL];</code>
     */
    private $export_custom_routes_with_public_ip = null;
    /**
     * Optional. True if all subnet routes with public IP address range are
     * imported; false otherwise. The default value is true. IPv4 special-use
     * ranges (https://en.wikipedia.org/wiki/IPv4#Special_addresses) are always
     * imported to peers and are not controlled by this field.
     *
     * Generated from protobuf field <code>optional bool import_custom_routes_with_public_ip = 12 [(.google.api.field_behavior) = OPTIONAL];</code>
     */
    private $import_custom_routes_with_public_ip = null;
    /**
     * Output only. State of the network peering. This field
     * has a value of 'ACTIVE' when there's a matching configuration in the peer
     * network. New values may be added to this enum when appropriate.
     *
     * Generated from protobuf field <code>.google.cloud.vmwareengine.v1.NetworkPeering.State state = 13 [(.google.api.field_behavior) = OUTPUT_ONLY];</code>
     */
    private $state = 0;
    /**
     * Output only. Output Only. Details about the current state of the network
     * peering.
     *
     * Generated from protobuf field <code>string state_details = 7 [(.google.api.field_behavior) = OUTPUT_ONLY];</code>
     */
    private $state_details = '';
    /**
     * Optional. Maximum transmission unit (MTU) in bytes.
     * The default value is `1500`. If a value of `0` is provided for this field,
     * VMware Engine uses the default value instead.
     *
     * Generated from protobuf field <code>int32 peer_mtu = 14 [(.google.api.field_behavior) = OPTIONAL];</code>
     */
    private $peer_mtu = 0;
    /**
     * Required. The type of the network to peer with the VMware Engine network.
     *
     * Generated from protobuf field <code>.google.cloud.vmwareengine.v1.NetworkPeering.PeerNetworkType peer_network_type = 16 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    private $peer_network_type = 0;
    /**
     * Output only. System-generated unique identifier for the resource.
     *
     * Generated from protobuf field <code>string uid = 17 [(.google.api.field_behavior) = OUTPUT_ONLY];</code>
     */
    private $uid = '';
    /**
     * Required. The relative resource name of the VMware Engine network.
     * Specify the name in the following form:
     * `projects/{project}/locations/{location}/vmwareEngineNetworks/{vmware_engine_network_id}`
     * where `{project}` can either be a project number or a project ID.
     *
     * Generated from protobuf field <code>string vmware_engine_network = 20 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {</code>
     */
    private $vmware_engine_network = '';
    /**
     * Optional. User-provided description for this network peering.
     *
     * Generated from protobuf field <code>string description = 21 [(.google.api.field_behavior) = OPTIONAL];</code>
     */
    private $description = '';

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $name
     *           Output only. The resource name of the network peering. NetworkPeering is a
     *           global resource and location can only be global. Resource names are
     *           scheme-less URIs that follow the conventions in
     *           https://cloud.google.com/apis/design/resource_names.
     *           For example:
     *           `projects/my-project/locations/global/networkPeerings/my-peering`
     *     @type \Google\Protobuf\Timestamp $create_time
     *           Output only. Creation time of this resource.
     *     @type \Google\Protobuf\Timestamp $update_time
     *           Output only. Last update time of this resource.
     *     @type string $peer_network
     *           Required. The relative resource name of the network to peer with
     *           a standard VMware Engine network. The provided network can be a
     *           consumer VPC network or another standard VMware Engine network. If the
     *           `peer_network_type` is VMWARE_ENGINE_NETWORK, specify the name in the form:
     *           `projects/{project}/locations/global/vmwareEngineNetworks/{vmware_engine_network_id}`.
     *           Otherwise specify the name in the form:
     *           `projects/{project}/global/networks/{network_id}`, where
     *           `{project}` can either be a project number or a project ID.
     *     @type bool $export_custom_routes
     *           Optional. True if custom routes are exported to the peered network;
     *           false otherwise. The default value is true.
     *     @type bool $import_custom_routes
     *           Optional. True if custom routes are imported from the peered network;
     *           false otherwise. The default value is true.
     *     @type bool $exchange_subnet_routes
     *           Optional. True if full mesh connectivity is created and managed
     *           automatically between peered networks; false otherwise. Currently this
     *           field is always true because Google Compute Engine automatically creates
     *           and manages subnetwork routes between two VPC networks when peering state
     *           is 'ACTIVE'.
     *     @type bool $export_custom_routes_with_public_ip
     *           Optional. True if all subnet routes with a public IP address range are
     *           exported; false otherwise. The default value is true. IPv4 special-use
     *           ranges (https://en.wikipedia.org/wiki/IPv4#Special_addresses) are always
     *           exported to peers and are not controlled by this field.
     *     @type bool $import_custom_routes_with_public_ip
     *           Optional. True if all subnet routes with public IP address range are
     *           imported; false otherwise. The default value is true. IPv4 special-use
     *           ranges (https://en.wikipedia.org/wiki/IPv4#Special_addresses) are always
     *           imported to peers and are not controlled by this field.
     *     @type int $state
     *           Output only. State of the network peering. This field
     *           has a value of 'ACTIVE' when there's a matching configuration in the peer
     *           network. New values may be added to this enum when appropriate.
     *     @type string $state_details
     *           Output only. Output Only. Details about the current state of the network
     *           peering.
     *     @type int $peer_mtu
     *           Optional. Maximum transmission unit (MTU) in bytes.
     *           The default value is `1500`. If a value of `0` is provided for this field,
     *           VMware Engine uses the default value instead.
     *     @type int $peer_network_type
     *           Required. The type of the network to peer with the VMware Engine network.
     *     @type string $uid
     *           Output only. System-generated unique identifier for the resource.
     *     @type string $vmware_engine_network
     *           Required. The relative resource name of the VMware Engine network.
     *           Specify the name in the following form:
     *           `projects/{project}/locations/{location}/vmwareEngineNetworks/{vmware_engine_network_id}`
     *           where `{project}` can either be a project number or a project ID.
     *     @type string $description
     *           Optional. User-provided description for this network peering.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Google\Cloud\Vmwareengine\V1\VmwareengineResources::initOnce();
        parent::__construct($data);
    }

    /**
     * Output only. The resource name of the network peering. NetworkPeering is a
     * global resource and location can only be global. Resource names are
     * scheme-less URIs that follow the conventions in
     * https://cloud.google.com/apis/design/resource_names.
     * For example:
     * `projects/my-project/locations/global/networkPeerings/my-peering`
     *
     * Generated from protobuf field <code>string name = 1 [(.google.api.field_behavior) = OUTPUT_ONLY];</code>
     * @return string
     */
    public function getName()
    {
        return $this->name;
    }

    /**
     * Output only. The resource name of the network peering. NetworkPeering is a
     * global resource and location can only be global. Resource names are
     * scheme-less URIs that follow the conventions in
     * https://cloud.google.com/apis/design/resource_names.
     * For example:
     * `projects/my-project/locations/global/networkPeerings/my-peering`
     *
     * Generated from protobuf field <code>string name = 1 [(.google.api.field_behavior) = OUTPUT_ONLY];</code>
     * @param string $var
     * @return $this
     */
    public function setName($var)
    {
        GPBUtil::checkString($var, True);
        $this->name = $var;

        return $this;
    }

    /**
     * Output only. Creation time of this resource.
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp create_time = 2 [(.google.api.field_behavior) = OUTPUT_ONLY];</code>
     * @return \Google\Protobuf\Timestamp|null
     */
    public function getCreateTime()
    {
        return $this->create_time;
    }

    public function hasCreateTime()
    {
        return isset($this->create_time);
    }

    public function clearCreateTime()
    {
        unset($this->create_time);
    }

    /**
     * Output only. Creation time of this resource.
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp create_time = 2 [(.google.api.field_behavior) = OUTPUT_ONLY];</code>
     * @param \Google\Protobuf\Timestamp $var
     * @return $this
     */
    public function setCreateTime($var)
    {
        GPBUtil::checkMessage($var, \Google\Protobuf\Timestamp::class);
        $this->create_time = $var;

        return $this;
    }

    /**
     * Output only. Last update time of this resource.
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp update_time = 3 [(.google.api.field_behavior) = OUTPUT_ONLY];</code>
     * @return \Google\Protobuf\Timestamp|null
     */
    public function getUpdateTime()
    {
        return $this->update_time;
    }

    public function hasUpdateTime()
    {
        return isset($this->update_time);
    }

    public function clearUpdateTime()
    {
        unset($this->update_time);
    }

    /**
     * Output only. Last update time of this resource.
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp update_time = 3 [(.google.api.field_behavior) = OUTPUT_ONLY];</code>
     * @param \Google\Protobuf\Timestamp $var
     * @return $this
     */
    public function setUpdateTime($var)
    {
        GPBUtil::checkMessage($var, \Google\Protobuf\Timestamp::class);
        $this->update_time = $var;

        return $this;
    }

    /**
     * Required. The relative resource name of the network to peer with
     * a standard VMware Engine network. The provided network can be a
     * consumer VPC network or another standard VMware Engine network. If the
     * `peer_network_type` is VMWARE_ENGINE_NETWORK, specify the name in the form:
     * `projects/{project}/locations/global/vmwareEngineNetworks/{vmware_engine_network_id}`.
     * Otherwise specify the name in the form:
     * `projects/{project}/global/networks/{network_id}`, where
     * `{project}` can either be a project number or a project ID.
     *
     * Generated from protobuf field <code>string peer_network = 5 [(.google.api.field_behavior) = REQUIRED];</code>
     * @return string
     */
    public function getPeerNetwork()
    {
        return $this->peer_network;
    }

    /**
     * Required. The relative resource name of the network to peer with
     * a standard VMware Engine network. The provided network can be a
     * consumer VPC network or another standard VMware Engine network. If the
     * `peer_network_type` is VMWARE_ENGINE_NETWORK, specify the name in the form:
     * `projects/{project}/locations/global/vmwareEngineNetworks/{vmware_engine_network_id}`.
     * Otherwise specify the name in the form:
     * `projects/{project}/global/networks/{network_id}`, where
     * `{project}` can either be a project number or a project ID.
     *
     * Generated from protobuf field <code>string peer_network = 5 [(.google.api.field_behavior) = REQUIRED];</code>
     * @param string $var
     * @return $this
     */
    public function setPeerNetwork($var)
    {
        GPBUtil::checkString($var, True);
        $this->peer_network = $var;

        return $this;
    }

    /**
     * Optional. True if custom routes are exported to the peered network;
     * false otherwise. The default value is true.
     *
     * Generated from protobuf field <code>optional bool export_custom_routes = 8 [(.google.api.field_behavior) = OPTIONAL];</code>
     * @return bool
     */
    public function getExportCustomRoutes()
    {
        return isset($this->export_custom_routes) ? $this->export_custom_routes : false;
    }

    public function hasExportCustomRoutes()
    {
        return isset($this->export_custom_routes);
    }

    public function clearExportCustomRoutes()
    {
        unset($this->export_custom_routes);
    }

    /**
     * Optional. True if custom routes are exported to the peered network;
     * false otherwise. The default value is true.
     *
     * Generated from protobuf field <code>optional bool export_custom_routes = 8 [(.google.api.field_behavior) = OPTIONAL];</code>
     * @param bool $var
     * @return $this
     */
    public function setExportCustomRoutes($var)
    {
        GPBUtil::checkBool($var);
        $this->export_custom_routes = $var;

        return $this;
    }

    /**
     * Optional. True if custom routes are imported from the peered network;
     * false otherwise. The default value is true.
     *
     * Generated from protobuf field <code>optional bool import_custom_routes = 9 [(.google.api.field_behavior) = OPTIONAL];</code>
     * @return bool
     */
    public function getImportCustomRoutes()
    {
        return isset($this->import_custom_routes) ? $this->import_custom_routes : false;
    }

    public function hasImportCustomRoutes()
    {
        return isset($this->import_custom_routes);
    }

    public function clearImportCustomRoutes()
    {
        unset($this->import_custom_routes);
    }

    /**
     * Optional. True if custom routes are imported from the peered network;
     * false otherwise. The default value is true.
     *
     * Generated from protobuf field <code>optional bool import_custom_routes = 9 [(.google.api.field_behavior) = OPTIONAL];</code>
     * @param bool $var
     * @return $this
     */
    public function setImportCustomRoutes($var)
    {
        GPBUtil::checkBool($var);
        $this->import_custom_routes = $var;

        return $this;
    }

    /**
     * Optional. True if full mesh connectivity is created and managed
     * automatically between peered networks; false otherwise. Currently this
     * field is always true because Google Compute Engine automatically creates
     * and manages subnetwork routes between two VPC networks when peering state
     * is 'ACTIVE'.
     *
     * Generated from protobuf field <code>optional bool exchange_subnet_routes = 10 [(.google.api.field_behavior) = OPTIONAL];</code>
     * @return bool
     */
    public function getExchangeSubnetRoutes()
    {
        return isset($this->exchange_subnet_routes) ? $this->exchange_subnet_routes : false;
    }

    public function hasExchangeSubnetRoutes()
    {
        return isset($this->exchange_subnet_routes);
    }

    public function clearExchangeSubnetRoutes()
    {
        unset($this->exchange_subnet_routes);
    }

    /**
     * Optional. True if full mesh connectivity is created and managed
     * automatically between peered networks; false otherwise. Currently this
     * field is always true because Google Compute Engine automatically creates
     * and manages subnetwork routes between two VPC networks when peering state
     * is 'ACTIVE'.
     *
     * Generated from protobuf field <code>optional bool exchange_subnet_routes = 10 [(.google.api.field_behavior) = OPTIONAL];</code>
     * @param bool $var
     * @return $this
     */
    public function setExchangeSubnetRoutes($var)
    {
        GPBUtil::checkBool($var);
        $this->exchange_subnet_routes = $var;

        return $this;
    }

    /**
     * Optional. True if all subnet routes with a public IP address range are
     * exported; false otherwise. The default value is true. IPv4 special-use
     * ranges (https://en.wikipedia.org/wiki/IPv4#Special_addresses) are always
     * exported to peers and are not controlled by this field.
     *
     * Generated from protobuf field <code>optional bool export_custom_routes_with_public_ip = 11 [(.google.api.field_behavior) = OPTIONAL];</code>
     * @return bool
     */
    public function getExportCustomRoutesWithPublicIp()
    {
        return isset($this->export_custom_routes_with_public_ip) ? $this->export_custom_routes_with_public_ip : false;
    }

    public function hasExportCustomRoutesWithPublicIp()
    {
        return isset($this->export_custom_routes_with_public_ip);
    }

    public function clearExportCustomRoutesWithPublicIp()
    {
        unset($this->export_custom_routes_with_public_ip);
    }

    /**
     * Optional. True if all subnet routes with a public IP address range are
     * exported; false otherwise. The default value is true. IPv4 special-use
     * ranges (https://en.wikipedia.org/wiki/IPv4#Special_addresses) are always
     * exported to peers and are not controlled by this field.
     *
     * Generated from protobuf field <code>optional bool export_custom_routes_with_public_ip = 11 [(.google.api.field_behavior) = OPTIONAL];</code>
     * @param bool $var
     * @return $this
     */
    public function setExportCustomRoutesWithPublicIp($var)
    {
        GPBUtil::checkBool($var);
        $this->export_custom_routes_with_public_ip = $var;

        return $this;
    }

    /**
     * Optional. True if all subnet routes with public IP address range are
     * imported; false otherwise. The default value is true. IPv4 special-use
     * ranges (https://en.wikipedia.org/wiki/IPv4#Special_addresses) are always
     * imported to peers and are not controlled by this field.
     *
     * Generated from protobuf field <code>optional bool import_custom_routes_with_public_ip = 12 [(.google.api.field_behavior) = OPTIONAL];</code>
     * @return bool
     */
    public function getImportCustomRoutesWithPublicIp()
    {
        return isset($this->import_custom_routes_with_public_ip) ? $this->import_custom_routes_with_public_ip : false;
    }

    public function hasImportCustomRoutesWithPublicIp()
    {
        return isset($this->import_custom_routes_with_public_ip);
    }

    public function clearImportCustomRoutesWithPublicIp()
    {
        unset($this->import_custom_routes_with_public_ip);
    }

    /**
     * Optional. True if all subnet routes with public IP address range are
     * imported; false otherwise. The default value is true. IPv4 special-use
     * ranges (https://en.wikipedia.org/wiki/IPv4#Special_addresses) are always
     * imported to peers and are not controlled by this field.
     *
     * Generated from protobuf field <code>optional bool import_custom_routes_with_public_ip = 12 [(.google.api.field_behavior) = OPTIONAL];</code>
     * @param bool $var
     * @return $this
     */
    public function setImportCustomRoutesWithPublicIp($var)
    {
        GPBUtil::checkBool($var);
        $this->import_custom_routes_with_public_ip = $var;

        return $this;
    }

    /**
     * Output only. State of the network peering. This field
     * has a value of 'ACTIVE' when there's a matching configuration in the peer
     * network. New values may be added to this enum when appropriate.
     *
     * Generated from protobuf field <code>.google.cloud.vmwareengine.v1.NetworkPeering.State state = 13 [(.google.api.field_behavior) = OUTPUT_ONLY];</code>
     * @return int
     */
    public function getState()
    {
        return $this->state;
    }

    /**
     * Output only. State of the network peering. This field
     * has a value of 'ACTIVE' when there's a matching configuration in the peer
     * network. New values may be added to this enum when appropriate.
     *
     * Generated from protobuf field <code>.google.cloud.vmwareengine.v1.NetworkPeering.State state = 13 [(.google.api.field_behavior) = OUTPUT_ONLY];</code>
     * @param int $var
     * @return $this
     */
    public function setState($var)
    {
        GPBUtil::checkEnum($var, \Google\Cloud\VmwareEngine\V1\NetworkPeering\State::class);
        $this->state = $var;

        return $this;
    }

    /**
     * Output only. Output Only. Details about the current state of the network
     * peering.
     *
     * Generated from protobuf field <code>string state_details = 7 [(.google.api.field_behavior) = OUTPUT_ONLY];</code>
     * @return string
     */
    public function getStateDetails()
    {
        return $this->state_details;
    }

    /**
     * Output only. Output Only. Details about the current state of the network
     * peering.
     *
     * Generated from protobuf field <code>string state_details = 7 [(.google.api.field_behavior) = OUTPUT_ONLY];</code>
     * @param string $var
     * @return $this
     */
    public function setStateDetails($var)
    {
        GPBUtil::checkString($var, True);
        $this->state_details = $var;

        return $this;
    }

    /**
     * Optional. Maximum transmission unit (MTU) in bytes.
     * The default value is `1500`. If a value of `0` is provided for this field,
     * VMware Engine uses the default value instead.
     *
     * Generated from protobuf field <code>int32 peer_mtu = 14 [(.google.api.field_behavior) = OPTIONAL];</code>
     * @return int
     */
    public function getPeerMtu()
    {
        return $this->peer_mtu;
    }

    /**
     * Optional. Maximum transmission unit (MTU) in bytes.
     * The default value is `1500`. If a value of `0` is provided for this field,
     * VMware Engine uses the default value instead.
     *
     * Generated from protobuf field <code>int32 peer_mtu = 14 [(.google.api.field_behavior) = OPTIONAL];</code>
     * @param int $var
     * @return $this
     */
    public function setPeerMtu($var)
    {
        GPBUtil::checkInt32($var);
        $this->peer_mtu = $var;

        return $this;
    }

    /**
     * Required. The type of the network to peer with the VMware Engine network.
     *
     * Generated from protobuf field <code>.google.cloud.vmwareengine.v1.NetworkPeering.PeerNetworkType peer_network_type = 16 [(.google.api.field_behavior) = REQUIRED];</code>
     * @return int
     */
    public function getPeerNetworkType()
    {
        return $this->peer_network_type;
    }

    /**
     * Required. The type of the network to peer with the VMware Engine network.
     *
     * Generated from protobuf field <code>.google.cloud.vmwareengine.v1.NetworkPeering.PeerNetworkType peer_network_type = 16 [(.google.api.field_behavior) = REQUIRED];</code>
     * @param int $var
     * @return $this
     */
    public function setPeerNetworkType($var)
    {
        GPBUtil::checkEnum($var, \Google\Cloud\VmwareEngine\V1\NetworkPeering\PeerNetworkType::class);
        $this->peer_network_type = $var;

        return $this;
    }

    /**
     * Output only. System-generated unique identifier for the resource.
     *
     * Generated from protobuf field <code>string uid = 17 [(.google.api.field_behavior) = OUTPUT_ONLY];</code>
     * @return string
     */
    public function getUid()
    {
        return $this->uid;
    }

    /**
     * Output only. System-generated unique identifier for the resource.
     *
     * Generated from protobuf field <code>string uid = 17 [(.google.api.field_behavior) = OUTPUT_ONLY];</code>
     * @param string $var
     * @return $this
     */
    public function setUid($var)
    {
        GPBUtil::checkString($var, True);
        $this->uid = $var;

        return $this;
    }

    /**
     * Required. The relative resource name of the VMware Engine network.
     * Specify the name in the following form:
     * `projects/{project}/locations/{location}/vmwareEngineNetworks/{vmware_engine_network_id}`
     * where `{project}` can either be a project number or a project ID.
     *
     * Generated from protobuf field <code>string vmware_engine_network = 20 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {</code>
     * @return string
     */
    public function getVmwareEngineNetwork()
    {
        return $this->vmware_engine_network;
    }

    /**
     * Required. The relative resource name of the VMware Engine network.
     * Specify the name in the following form:
     * `projects/{project}/locations/{location}/vmwareEngineNetworks/{vmware_engine_network_id}`
     * where `{project}` can either be a project number or a project ID.
     *
     * Generated from protobuf field <code>string vmware_engine_network = 20 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {</code>
     * @param string $var
     * @return $this
     */
    public function setVmwareEngineNetwork($var)
    {
        GPBUtil::checkString($var, True);
        $this->vmware_engine_network = $var;

        return $this;
    }

    /**
     * Optional. User-provided description for this network peering.
     *
     * Generated from protobuf field <code>string description = 21 [(.google.api.field_behavior) = OPTIONAL];</code>
     * @return string
     */
    public function getDescription()
    {
        return $this->description;
    }

    /**
     * Optional. User-provided description for this network peering.
     *
     * Generated from protobuf field <code>string description = 21 [(.google.api.field_behavior) = OPTIONAL];</code>
     * @param string $var
     * @return $this
     */
    public function setDescription($var)
    {
        GPBUtil::checkString($var, True);
        $this->description = $var;

        return $this;
    }

}

