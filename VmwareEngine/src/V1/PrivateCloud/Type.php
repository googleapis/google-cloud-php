<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/cloud/vmwareengine/v1/vmwareengine_resources.proto

namespace Google\Cloud\VmwareEngine\V1\PrivateCloud;

use UnexpectedValueException;

/**
 * Enum Type defines private cloud type.
 *
 * Protobuf type <code>google.cloud.vmwareengine.v1.PrivateCloud.Type</code>
 */
class Type
{
    /**
     * Standard private is a zonal resource, with 3+ nodes. Default type.
     *
     * Generated from protobuf enum <code>STANDARD = 0;</code>
     */
    const STANDARD = 0;
    /**
     * Time limited private cloud is a zonal resource, can have only 1 node and
     * has limited life span. Will be deleted after defined period of time,
     * can be converted into standard private cloud by expanding it up to 3
     * or more nodes.
     *
     * Generated from protobuf enum <code>TIME_LIMITED = 1;</code>
     */
    const TIME_LIMITED = 1;

    private static $valueToName = [
        self::STANDARD => 'STANDARD',
        self::TIME_LIMITED => 'TIME_LIMITED',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}


