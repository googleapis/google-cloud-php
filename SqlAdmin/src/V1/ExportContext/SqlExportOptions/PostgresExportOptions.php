<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/cloud/sql/v1/cloud_sql_resources.proto

namespace Google\Cloud\Sql\V1\ExportContext\SqlExportOptions;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Options for exporting from a Cloud SQL for PostgreSQL instance.
 *
 * Generated from protobuf message <code>google.cloud.sql.v1.ExportContext.SqlExportOptions.PostgresExportOptions</code>
 */
class PostgresExportOptions extends \Google\Protobuf\Internal\Message
{
    /**
     * Optional. Use this option to include DROP <object> SQL statements.
     * These statements are used to delete database objects before running the
     * import operation.
     *
     * Generated from protobuf field <code>.google.protobuf.BoolValue clean = 1 [(.google.api.field_behavior) = OPTIONAL];</code>
     */
    protected $clean = null;
    /**
     * Optional. Option to include an IF EXISTS SQL statement with each DROP
     * statement produced by clean.
     *
     * Generated from protobuf field <code>.google.protobuf.BoolValue if_exists = 2 [(.google.api.field_behavior) = OPTIONAL];</code>
     */
    protected $if_exists = null;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type \Google\Protobuf\BoolValue $clean
     *           Optional. Use this option to include DROP <object> SQL statements.
     *           These statements are used to delete database objects before running the
     *           import operation.
     *     @type \Google\Protobuf\BoolValue $if_exists
     *           Optional. Option to include an IF EXISTS SQL statement with each DROP
     *           statement produced by clean.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Google\Cloud\Sql\V1\CloudSqlResources::initOnce();
        parent::__construct($data);
    }

    /**
     * Optional. Use this option to include DROP <object> SQL statements.
     * These statements are used to delete database objects before running the
     * import operation.
     *
     * Generated from protobuf field <code>.google.protobuf.BoolValue clean = 1 [(.google.api.field_behavior) = OPTIONAL];</code>
     * @return \Google\Protobuf\BoolValue|null
     */
    public function getClean()
    {
        return $this->clean;
    }

    public function hasClean()
    {
        return isset($this->clean);
    }

    public function clearClean()
    {
        unset($this->clean);
    }

    /**
     * Returns the unboxed value from <code>getClean()</code>

     * Optional. Use this option to include DROP <object> SQL statements.
     * These statements are used to delete database objects before running the
     * import operation.
     *
     * Generated from protobuf field <code>.google.protobuf.BoolValue clean = 1 [(.google.api.field_behavior) = OPTIONAL];</code>
     * @return bool|null
     */
    public function getCleanUnwrapped()
    {
        return $this->readWrapperValue("clean");
    }

    /**
     * Optional. Use this option to include DROP <object> SQL statements.
     * These statements are used to delete database objects before running the
     * import operation.
     *
     * Generated from protobuf field <code>.google.protobuf.BoolValue clean = 1 [(.google.api.field_behavior) = OPTIONAL];</code>
     * @param \Google\Protobuf\BoolValue $var
     * @return $this
     */
    public function setClean($var)
    {
        GPBUtil::checkMessage($var, \Google\Protobuf\BoolValue::class);
        $this->clean = $var;

        return $this;
    }

    /**
     * Sets the field by wrapping a primitive type in a Google\Protobuf\BoolValue object.

     * Optional. Use this option to include DROP <object> SQL statements.
     * These statements are used to delete database objects before running the
     * import operation.
     *
     * Generated from protobuf field <code>.google.protobuf.BoolValue clean = 1 [(.google.api.field_behavior) = OPTIONAL];</code>
     * @param bool|null $var
     * @return $this
     */
    public function setCleanUnwrapped($var)
    {
        $this->writeWrapperValue("clean", $var);
        return $this;}

    /**
     * Optional. Option to include an IF EXISTS SQL statement with each DROP
     * statement produced by clean.
     *
     * Generated from protobuf field <code>.google.protobuf.BoolValue if_exists = 2 [(.google.api.field_behavior) = OPTIONAL];</code>
     * @return \Google\Protobuf\BoolValue|null
     */
    public function getIfExists()
    {
        return $this->if_exists;
    }

    public function hasIfExists()
    {
        return isset($this->if_exists);
    }

    public function clearIfExists()
    {
        unset($this->if_exists);
    }

    /**
     * Returns the unboxed value from <code>getIfExists()</code>

     * Optional. Option to include an IF EXISTS SQL statement with each DROP
     * statement produced by clean.
     *
     * Generated from protobuf field <code>.google.protobuf.BoolValue if_exists = 2 [(.google.api.field_behavior) = OPTIONAL];</code>
     * @return bool|null
     */
    public function getIfExistsUnwrapped()
    {
        return $this->readWrapperValue("if_exists");
    }

    /**
     * Optional. Option to include an IF EXISTS SQL statement with each DROP
     * statement produced by clean.
     *
     * Generated from protobuf field <code>.google.protobuf.BoolValue if_exists = 2 [(.google.api.field_behavior) = OPTIONAL];</code>
     * @param \Google\Protobuf\BoolValue $var
     * @return $this
     */
    public function setIfExists($var)
    {
        GPBUtil::checkMessage($var, \Google\Protobuf\BoolValue::class);
        $this->if_exists = $var;

        return $this;
    }

    /**
     * Sets the field by wrapping a primitive type in a Google\Protobuf\BoolValue object.

     * Optional. Option to include an IF EXISTS SQL statement with each DROP
     * statement produced by clean.
     *
     * Generated from protobuf field <code>.google.protobuf.BoolValue if_exists = 2 [(.google.api.field_behavior) = OPTIONAL];</code>
     * @param bool|null $var
     * @return $this
     */
    public function setIfExistsUnwrapped($var)
    {
        $this->writeWrapperValue("if_exists", $var);
        return $this;}

}


