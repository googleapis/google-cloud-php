<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/cloud/domains/v1alpha2/domains.proto

namespace Google\Cloud\Domains\V1alpha2;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Request for the `ListRegistrations` method.
 *
 * Generated from protobuf message <code>google.cloud.domains.v1alpha2.ListRegistrationsRequest</code>
 */
class ListRegistrationsRequest extends \Google\Protobuf\Internal\Message
{
    /**
     * Required. The project and location from which to list `Registration`s, specified in
     * the format `projects/&#42;&#47;locations/&#42;`.
     *
     * Generated from protobuf field <code>string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {</code>
     */
    private $parent = '';
    /**
     * Maximum number of results to return.
     *
     * Generated from protobuf field <code>int32 page_size = 2;</code>
     */
    private $page_size = 0;
    /**
     * When set to the `next_page_token` from a prior response, provides the next
     * page of results.
     *
     * Generated from protobuf field <code>string page_token = 3;</code>
     */
    private $page_token = '';
    /**
     * Filter expression to restrict the `Registration`s returned.
     * The expression must specify the field name, a comparison operator, and the
     * value that you want to use for filtering. The value must be a string, a
     * number, a boolean, or an enum value. The comparison operator should be one
     * of =, !=, >, <, >=, <=, or : for prefix or wildcard matches.
     * For example, to filter to a specific domain name, use an expression like
     * `domainName="example.com"`. You can also check for the existence of a
     * field; for example, to find domains using custom DNS settings, use an
     * expression like `dnsSettings.customDns:*`.
     * You can also create compound filters by combining expressions with the
     * `AND` and `OR` operators. For example, to find domains that are suspended
     * or have specific issues flagged, use an expression like
     * `(state=SUSPENDED) OR (issue:*)`.
     *
     * Generated from protobuf field <code>string filter = 4;</code>
     */
    private $filter = '';

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $parent
     *           Required. The project and location from which to list `Registration`s, specified in
     *           the format `projects/&#42;&#47;locations/&#42;`.
     *     @type int $page_size
     *           Maximum number of results to return.
     *     @type string $page_token
     *           When set to the `next_page_token` from a prior response, provides the next
     *           page of results.
     *     @type string $filter
     *           Filter expression to restrict the `Registration`s returned.
     *           The expression must specify the field name, a comparison operator, and the
     *           value that you want to use for filtering. The value must be a string, a
     *           number, a boolean, or an enum value. The comparison operator should be one
     *           of =, !=, >, <, >=, <=, or : for prefix or wildcard matches.
     *           For example, to filter to a specific domain name, use an expression like
     *           `domainName="example.com"`. You can also check for the existence of a
     *           field; for example, to find domains using custom DNS settings, use an
     *           expression like `dnsSettings.customDns:*`.
     *           You can also create compound filters by combining expressions with the
     *           `AND` and `OR` operators. For example, to find domains that are suspended
     *           or have specific issues flagged, use an expression like
     *           `(state=SUSPENDED) OR (issue:*)`.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Google\Cloud\Domains\V1Alpha2\Domains::initOnce();
        parent::__construct($data);
    }

    /**
     * Required. The project and location from which to list `Registration`s, specified in
     * the format `projects/&#42;&#47;locations/&#42;`.
     *
     * Generated from protobuf field <code>string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {</code>
     * @return string
     */
    public function getParent()
    {
        return $this->parent;
    }

    /**
     * Required. The project and location from which to list `Registration`s, specified in
     * the format `projects/&#42;&#47;locations/&#42;`.
     *
     * Generated from protobuf field <code>string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {</code>
     * @param string $var
     * @return $this
     */
    public function setParent($var)
    {
        GPBUtil::checkString($var, True);
        $this->parent = $var;

        return $this;
    }

    /**
     * Maximum number of results to return.
     *
     * Generated from protobuf field <code>int32 page_size = 2;</code>
     * @return int
     */
    public function getPageSize()
    {
        return $this->page_size;
    }

    /**
     * Maximum number of results to return.
     *
     * Generated from protobuf field <code>int32 page_size = 2;</code>
     * @param int $var
     * @return $this
     */
    public function setPageSize($var)
    {
        GPBUtil::checkInt32($var);
        $this->page_size = $var;

        return $this;
    }

    /**
     * When set to the `next_page_token` from a prior response, provides the next
     * page of results.
     *
     * Generated from protobuf field <code>string page_token = 3;</code>
     * @return string
     */
    public function getPageToken()
    {
        return $this->page_token;
    }

    /**
     * When set to the `next_page_token` from a prior response, provides the next
     * page of results.
     *
     * Generated from protobuf field <code>string page_token = 3;</code>
     * @param string $var
     * @return $this
     */
    public function setPageToken($var)
    {
        GPBUtil::checkString($var, True);
        $this->page_token = $var;

        return $this;
    }

    /**
     * Filter expression to restrict the `Registration`s returned.
     * The expression must specify the field name, a comparison operator, and the
     * value that you want to use for filtering. The value must be a string, a
     * number, a boolean, or an enum value. The comparison operator should be one
     * of =, !=, >, <, >=, <=, or : for prefix or wildcard matches.
     * For example, to filter to a specific domain name, use an expression like
     * `domainName="example.com"`. You can also check for the existence of a
     * field; for example, to find domains using custom DNS settings, use an
     * expression like `dnsSettings.customDns:*`.
     * You can also create compound filters by combining expressions with the
     * `AND` and `OR` operators. For example, to find domains that are suspended
     * or have specific issues flagged, use an expression like
     * `(state=SUSPENDED) OR (issue:*)`.
     *
     * Generated from protobuf field <code>string filter = 4;</code>
     * @return string
     */
    public function getFilter()
    {
        return $this->filter;
    }

    /**
     * Filter expression to restrict the `Registration`s returned.
     * The expression must specify the field name, a comparison operator, and the
     * value that you want to use for filtering. The value must be a string, a
     * number, a boolean, or an enum value. The comparison operator should be one
     * of =, !=, >, <, >=, <=, or : for prefix or wildcard matches.
     * For example, to filter to a specific domain name, use an expression like
     * `domainName="example.com"`. You can also check for the existence of a
     * field; for example, to find domains using custom DNS settings, use an
     * expression like `dnsSettings.customDns:*`.
     * You can also create compound filters by combining expressions with the
     * `AND` and `OR` operators. For example, to find domains that are suspended
     * or have specific issues flagged, use an expression like
     * `(state=SUSPENDED) OR (issue:*)`.
     *
     * Generated from protobuf field <code>string filter = 4;</code>
     * @param string $var
     * @return $this
     */
    public function setFilter($var)
    {
        GPBUtil::checkString($var, True);
        $this->filter = $var;

        return $this;
    }

}

