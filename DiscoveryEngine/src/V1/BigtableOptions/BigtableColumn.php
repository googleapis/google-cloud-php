<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/cloud/discoveryengine/v1/import_config.proto

namespace Google\Cloud\DiscoveryEngine\V1\BigtableOptions;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * The column of the Bigtable.
 *
 * Generated from protobuf message <code>google.cloud.discoveryengine.v1.BigtableOptions.BigtableColumn</code>
 */
class BigtableColumn extends \Google\Protobuf\Internal\Message
{
    /**
     * Required. Qualifier of the column. If it cannot be decoded with utf-8,
     * use a base-64 encoded string instead.
     *
     * Generated from protobuf field <code>bytes qualifier = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    protected $qualifier = '';
    /**
     * The field name to use for this column in the document. The name has to
     * match the pattern `[a-zA-Z0-9][a-zA-Z0-9-_]*`.
     * If not set, it is parsed from the qualifier bytes with best effort.
     * However, due to different naming patterns, field name collisions could
     * happen, where parsing behavior is undefined.
     *
     * Generated from protobuf field <code>string field_name = 2;</code>
     */
    protected $field_name = '';
    /**
     * The encoding mode of the values when the type is not `STRING`.
     * Acceptable encoding values are:
     * * `TEXT`: indicates values are alphanumeric text strings.
     * * `BINARY`: indicates values are encoded using `HBase Bytes.toBytes`
     * family of functions. This can be overridden for a specific column
     * by listing that column in `columns` and specifying an encoding for it.
     *
     * Generated from protobuf field <code>.google.cloud.discoveryengine.v1.BigtableOptions.Encoding encoding = 3;</code>
     */
    protected $encoding = 0;
    /**
     * The type of values in this column family.
     * The values are expected to be encoded using `HBase Bytes.toBytes`
     * function when the encoding value is set to `BINARY`.
     *
     * Generated from protobuf field <code>.google.cloud.discoveryengine.v1.BigtableOptions.Type type = 4;</code>
     */
    protected $type = 0;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $qualifier
     *           Required. Qualifier of the column. If it cannot be decoded with utf-8,
     *           use a base-64 encoded string instead.
     *     @type string $field_name
     *           The field name to use for this column in the document. The name has to
     *           match the pattern `[a-zA-Z0-9][a-zA-Z0-9-_]*`.
     *           If not set, it is parsed from the qualifier bytes with best effort.
     *           However, due to different naming patterns, field name collisions could
     *           happen, where parsing behavior is undefined.
     *     @type int $encoding
     *           The encoding mode of the values when the type is not `STRING`.
     *           Acceptable encoding values are:
     *           * `TEXT`: indicates values are alphanumeric text strings.
     *           * `BINARY`: indicates values are encoded using `HBase Bytes.toBytes`
     *           family of functions. This can be overridden for a specific column
     *           by listing that column in `columns` and specifying an encoding for it.
     *     @type int $type
     *           The type of values in this column family.
     *           The values are expected to be encoded using `HBase Bytes.toBytes`
     *           function when the encoding value is set to `BINARY`.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Google\Cloud\Discoveryengine\V1\ImportConfig::initOnce();
        parent::__construct($data);
    }

    /**
     * Required. Qualifier of the column. If it cannot be decoded with utf-8,
     * use a base-64 encoded string instead.
     *
     * Generated from protobuf field <code>bytes qualifier = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     * @return string
     */
    public function getQualifier()
    {
        return $this->qualifier;
    }

    /**
     * Required. Qualifier of the column. If it cannot be decoded with utf-8,
     * use a base-64 encoded string instead.
     *
     * Generated from protobuf field <code>bytes qualifier = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     * @param string $var
     * @return $this
     */
    public function setQualifier($var)
    {
        GPBUtil::checkString($var, False);
        $this->qualifier = $var;

        return $this;
    }

    /**
     * The field name to use for this column in the document. The name has to
     * match the pattern `[a-zA-Z0-9][a-zA-Z0-9-_]*`.
     * If not set, it is parsed from the qualifier bytes with best effort.
     * However, due to different naming patterns, field name collisions could
     * happen, where parsing behavior is undefined.
     *
     * Generated from protobuf field <code>string field_name = 2;</code>
     * @return string
     */
    public function getFieldName()
    {
        return $this->field_name;
    }

    /**
     * The field name to use for this column in the document. The name has to
     * match the pattern `[a-zA-Z0-9][a-zA-Z0-9-_]*`.
     * If not set, it is parsed from the qualifier bytes with best effort.
     * However, due to different naming patterns, field name collisions could
     * happen, where parsing behavior is undefined.
     *
     * Generated from protobuf field <code>string field_name = 2;</code>
     * @param string $var
     * @return $this
     */
    public function setFieldName($var)
    {
        GPBUtil::checkString($var, True);
        $this->field_name = $var;

        return $this;
    }

    /**
     * The encoding mode of the values when the type is not `STRING`.
     * Acceptable encoding values are:
     * * `TEXT`: indicates values are alphanumeric text strings.
     * * `BINARY`: indicates values are encoded using `HBase Bytes.toBytes`
     * family of functions. This can be overridden for a specific column
     * by listing that column in `columns` and specifying an encoding for it.
     *
     * Generated from protobuf field <code>.google.cloud.discoveryengine.v1.BigtableOptions.Encoding encoding = 3;</code>
     * @return int
     */
    public function getEncoding()
    {
        return $this->encoding;
    }

    /**
     * The encoding mode of the values when the type is not `STRING`.
     * Acceptable encoding values are:
     * * `TEXT`: indicates values are alphanumeric text strings.
     * * `BINARY`: indicates values are encoded using `HBase Bytes.toBytes`
     * family of functions. This can be overridden for a specific column
     * by listing that column in `columns` and specifying an encoding for it.
     *
     * Generated from protobuf field <code>.google.cloud.discoveryengine.v1.BigtableOptions.Encoding encoding = 3;</code>
     * @param int $var
     * @return $this
     */
    public function setEncoding($var)
    {
        GPBUtil::checkEnum($var, \Google\Cloud\DiscoveryEngine\V1\BigtableOptions\Encoding::class);
        $this->encoding = $var;

        return $this;
    }

    /**
     * The type of values in this column family.
     * The values are expected to be encoded using `HBase Bytes.toBytes`
     * function when the encoding value is set to `BINARY`.
     *
     * Generated from protobuf field <code>.google.cloud.discoveryengine.v1.BigtableOptions.Type type = 4;</code>
     * @return int
     */
    public function getType()
    {
        return $this->type;
    }

    /**
     * The type of values in this column family.
     * The values are expected to be encoded using `HBase Bytes.toBytes`
     * function when the encoding value is set to `BINARY`.
     *
     * Generated from protobuf field <code>.google.cloud.discoveryengine.v1.BigtableOptions.Type type = 4;</code>
     * @param int $var
     * @return $this
     */
    public function setType($var)
    {
        GPBUtil::checkEnum($var, \Google\Cloud\DiscoveryEngine\V1\BigtableOptions\Type::class);
        $this->type = $var;

        return $this;
    }

}


