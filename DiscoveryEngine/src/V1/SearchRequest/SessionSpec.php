<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/cloud/discoveryengine/v1/search_service.proto

namespace Google\Cloud\DiscoveryEngine\V1\SearchRequest;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Session specification.
 * Multi-turn Search feature is currently at private GA stage. Please use
 * v1alpha or v1beta version instead before we launch this feature to public
 * GA. Or ask for allowlisting through Google Support team.
 *
 * Generated from protobuf message <code>google.cloud.discoveryengine.v1.SearchRequest.SessionSpec</code>
 */
class SessionSpec extends \Google\Protobuf\Internal\Message
{
    /**
     * If set, the search result gets stored to the "turn" specified by this
     * query ID.
     * Example: Let's say the session looks like this:
     *   session {
     *     name: ".../sessions/xxx"
     *     turns {
     *       query { text: "What is foo?" query_id: ".../questions/yyy" }
     *       answer: "Foo is ..."
     *     }
     *     turns {
     *       query { text: "How about bar then?" query_id: ".../questions/zzz" }
     *     }
     *   }
     * The user can call /search API with a request like this:
     *    session: ".../sessions/xxx"
     *    session_spec { query_id: ".../questions/zzz" }
     * Then, the API stores the search result, associated with the last turn.
     * The stored search result can be used by a subsequent /answer API call
     * (with the session ID and the query ID specified). Also, it is possible
     * to call /search and /answer in parallel with the same session ID & query
     * ID.
     *
     * Generated from protobuf field <code>string query_id = 1;</code>
     */
    protected $query_id = '';
    /**
     * The number of top search results to persist. The persisted search results
     * can be used for the subsequent /answer api call.
     * This field is simliar to the `summary_result_count` field in
     * [SearchRequest.ContentSearchSpec.SummarySpec.summary_result_count][google.cloud.discoveryengine.v1.SearchRequest.ContentSearchSpec.SummarySpec.summary_result_count].
     * At most 10 results for documents mode, or 50 for chunks mode.
     *
     * Generated from protobuf field <code>optional int32 search_result_persistence_count = 2;</code>
     */
    protected $search_result_persistence_count = null;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $query_id
     *           If set, the search result gets stored to the "turn" specified by this
     *           query ID.
     *           Example: Let's say the session looks like this:
     *             session {
     *               name: ".../sessions/xxx"
     *               turns {
     *                 query { text: "What is foo?" query_id: ".../questions/yyy" }
     *                 answer: "Foo is ..."
     *               }
     *               turns {
     *                 query { text: "How about bar then?" query_id: ".../questions/zzz" }
     *               }
     *             }
     *           The user can call /search API with a request like this:
     *              session: ".../sessions/xxx"
     *              session_spec { query_id: ".../questions/zzz" }
     *           Then, the API stores the search result, associated with the last turn.
     *           The stored search result can be used by a subsequent /answer API call
     *           (with the session ID and the query ID specified). Also, it is possible
     *           to call /search and /answer in parallel with the same session ID & query
     *           ID.
     *     @type int $search_result_persistence_count
     *           The number of top search results to persist. The persisted search results
     *           can be used for the subsequent /answer api call.
     *           This field is simliar to the `summary_result_count` field in
     *           [SearchRequest.ContentSearchSpec.SummarySpec.summary_result_count][google.cloud.discoveryengine.v1.SearchRequest.ContentSearchSpec.SummarySpec.summary_result_count].
     *           At most 10 results for documents mode, or 50 for chunks mode.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Google\Cloud\Discoveryengine\V1\SearchService::initOnce();
        parent::__construct($data);
    }

    /**
     * If set, the search result gets stored to the "turn" specified by this
     * query ID.
     * Example: Let's say the session looks like this:
     *   session {
     *     name: ".../sessions/xxx"
     *     turns {
     *       query { text: "What is foo?" query_id: ".../questions/yyy" }
     *       answer: "Foo is ..."
     *     }
     *     turns {
     *       query { text: "How about bar then?" query_id: ".../questions/zzz" }
     *     }
     *   }
     * The user can call /search API with a request like this:
     *    session: ".../sessions/xxx"
     *    session_spec { query_id: ".../questions/zzz" }
     * Then, the API stores the search result, associated with the last turn.
     * The stored search result can be used by a subsequent /answer API call
     * (with the session ID and the query ID specified). Also, it is possible
     * to call /search and /answer in parallel with the same session ID & query
     * ID.
     *
     * Generated from protobuf field <code>string query_id = 1;</code>
     * @return string
     */
    public function getQueryId()
    {
        return $this->query_id;
    }

    /**
     * If set, the search result gets stored to the "turn" specified by this
     * query ID.
     * Example: Let's say the session looks like this:
     *   session {
     *     name: ".../sessions/xxx"
     *     turns {
     *       query { text: "What is foo?" query_id: ".../questions/yyy" }
     *       answer: "Foo is ..."
     *     }
     *     turns {
     *       query { text: "How about bar then?" query_id: ".../questions/zzz" }
     *     }
     *   }
     * The user can call /search API with a request like this:
     *    session: ".../sessions/xxx"
     *    session_spec { query_id: ".../questions/zzz" }
     * Then, the API stores the search result, associated with the last turn.
     * The stored search result can be used by a subsequent /answer API call
     * (with the session ID and the query ID specified). Also, it is possible
     * to call /search and /answer in parallel with the same session ID & query
     * ID.
     *
     * Generated from protobuf field <code>string query_id = 1;</code>
     * @param string $var
     * @return $this
     */
    public function setQueryId($var)
    {
        GPBUtil::checkString($var, True);
        $this->query_id = $var;

        return $this;
    }

    /**
     * The number of top search results to persist. The persisted search results
     * can be used for the subsequent /answer api call.
     * This field is simliar to the `summary_result_count` field in
     * [SearchRequest.ContentSearchSpec.SummarySpec.summary_result_count][google.cloud.discoveryengine.v1.SearchRequest.ContentSearchSpec.SummarySpec.summary_result_count].
     * At most 10 results for documents mode, or 50 for chunks mode.
     *
     * Generated from protobuf field <code>optional int32 search_result_persistence_count = 2;</code>
     * @return int
     */
    public function getSearchResultPersistenceCount()
    {
        return isset($this->search_result_persistence_count) ? $this->search_result_persistence_count : 0;
    }

    public function hasSearchResultPersistenceCount()
    {
        return isset($this->search_result_persistence_count);
    }

    public function clearSearchResultPersistenceCount()
    {
        unset($this->search_result_persistence_count);
    }

    /**
     * The number of top search results to persist. The persisted search results
     * can be used for the subsequent /answer api call.
     * This field is simliar to the `summary_result_count` field in
     * [SearchRequest.ContentSearchSpec.SummarySpec.summary_result_count][google.cloud.discoveryengine.v1.SearchRequest.ContentSearchSpec.SummarySpec.summary_result_count].
     * At most 10 results for documents mode, or 50 for chunks mode.
     *
     * Generated from protobuf field <code>optional int32 search_result_persistence_count = 2;</code>
     * @param int $var
     * @return $this
     */
    public function setSearchResultPersistenceCount($var)
    {
        GPBUtil::checkInt32($var);
        $this->search_result_persistence_count = $var;

        return $this;
    }

}


