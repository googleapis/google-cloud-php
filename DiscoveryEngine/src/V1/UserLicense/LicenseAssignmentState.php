<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/cloud/discoveryengine/v1/user_license.proto

namespace Google\Cloud\DiscoveryEngine\V1\UserLicense;

use UnexpectedValueException;

/**
 * License assignment state enumeration.
 *
 * Protobuf type <code>google.cloud.discoveryengine.v1.UserLicense.LicenseAssignmentState</code>
 */
class LicenseAssignmentState
{
    /**
     * Default value.
     *
     * Generated from protobuf enum <code>LICENSE_ASSIGNMENT_STATE_UNSPECIFIED = 0;</code>
     */
    const LICENSE_ASSIGNMENT_STATE_UNSPECIFIED = 0;
    /**
     * License assigned to the user.
     *
     * Generated from protobuf enum <code>ASSIGNED = 1;</code>
     */
    const ASSIGNED = 1;
    /**
     * No license assigned to the user.
     * Deprecated, translated to NO_LICENSE.
     *
     * Generated from protobuf enum <code>UNASSIGNED = 2;</code>
     */
    const UNASSIGNED = 2;
    /**
     * No license assigned to the user.
     *
     * Generated from protobuf enum <code>NO_LICENSE = 3;</code>
     */
    const NO_LICENSE = 3;
    /**
     * User attempted to login but no license assigned to the user.
     * This state is only used for no user first time login attempt but cannot
     * get license assigned.
     * Users already logged in but cannot get license assigned will be assigned
     * NO_LICENSE state(License could be unassigned by admin).
     *
     * Generated from protobuf enum <code>NO_LICENSE_ATTEMPTED_LOGIN = 4;</code>
     */
    const NO_LICENSE_ATTEMPTED_LOGIN = 4;

    private static $valueToName = [
        self::LICENSE_ASSIGNMENT_STATE_UNSPECIFIED => 'LICENSE_ASSIGNMENT_STATE_UNSPECIFIED',
        self::ASSIGNED => 'ASSIGNED',
        self::UNASSIGNED => 'UNASSIGNED',
        self::NO_LICENSE => 'NO_LICENSE',
        self::NO_LICENSE_ATTEMPTED_LOGIN => 'NO_LICENSE_ATTEMPTED_LOGIN',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}


