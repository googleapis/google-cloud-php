<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/cloud/discoveryengine/v1/identity_mapping_store_service.proto

namespace Google\Cloud\DiscoveryEngine\V1;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Request message for
 * [IdentityMappingStoreService.PurgeIdentityMappings][google.cloud.discoveryengine.v1.IdentityMappingStoreService.PurgeIdentityMappings]
 *
 * Generated from protobuf message <code>google.cloud.discoveryengine.v1.PurgeIdentityMappingsRequest</code>
 */
class PurgeIdentityMappingsRequest extends \Google\Protobuf\Internal\Message
{
    /**
     * Required. The name of the Identity Mapping Store to purge Identity Mapping
     * Entries from. Format:
     * `projects/{project}/locations/{location}/identityMappingStores/{identityMappingStore}`
     *
     * Generated from protobuf field <code>string identity_mapping_store = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {</code>
     */
    protected $identity_mapping_store = '';
    /**
     * Filter matching identity mappings to purge.
     * The eligible field for filtering is:
     * * `update_time`: in ISO 8601 "zulu" format.
     * * `external_id`
     * Examples:
     * * Deleting all identity mappings updated in a time range:
     *   `update_time > "2012-04-23T18:25:43.511Z" AND update_time <
     *   "2012-04-23T18:30:43.511Z"`
     * * Deleting all identity mappings for a given external_id:
     * `external_id = "id1"`
     * * Deleting all identity mappings inside an identity mapping store:
     *   `*`
     * The filtering fields are assumed to have an implicit AND.
     * Should not be used with source. An error will be thrown, if both are
     * provided.
     *
     * Generated from protobuf field <code>string filter = 3;</code>
     */
    protected $filter = '';
    /**
     * Actually performs the purge. If `force` is set to false, return the
     * expected purge count without deleting any identity mappings. This field is
     * only supported for purge with filter. For input source this field is
     * ignored and data will be purged regardless of the value of this field.
     *
     * Generated from protobuf field <code>optional bool force = 4;</code>
     */
    protected $force = null;
    protected $source;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type \Google\Cloud\DiscoveryEngine\V1\PurgeIdentityMappingsRequest\InlineSource $inline_source
     *           The inline source to purge identity mapping entries from.
     *     @type string $identity_mapping_store
     *           Required. The name of the Identity Mapping Store to purge Identity Mapping
     *           Entries from. Format:
     *           `projects/{project}/locations/{location}/identityMappingStores/{identityMappingStore}`
     *     @type string $filter
     *           Filter matching identity mappings to purge.
     *           The eligible field for filtering is:
     *           * `update_time`: in ISO 8601 "zulu" format.
     *           * `external_id`
     *           Examples:
     *           * Deleting all identity mappings updated in a time range:
     *             `update_time > "2012-04-23T18:25:43.511Z" AND update_time <
     *             "2012-04-23T18:30:43.511Z"`
     *           * Deleting all identity mappings for a given external_id:
     *           `external_id = "id1"`
     *           * Deleting all identity mappings inside an identity mapping store:
     *             `*`
     *           The filtering fields are assumed to have an implicit AND.
     *           Should not be used with source. An error will be thrown, if both are
     *           provided.
     *     @type bool $force
     *           Actually performs the purge. If `force` is set to false, return the
     *           expected purge count without deleting any identity mappings. This field is
     *           only supported for purge with filter. For input source this field is
     *           ignored and data will be purged regardless of the value of this field.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Google\Cloud\Discoveryengine\V1\IdentityMappingStoreService::initOnce();
        parent::__construct($data);
    }

    /**
     * The inline source to purge identity mapping entries from.
     *
     * Generated from protobuf field <code>.google.cloud.discoveryengine.v1.PurgeIdentityMappingsRequest.InlineSource inline_source = 2;</code>
     * @return \Google\Cloud\DiscoveryEngine\V1\PurgeIdentityMappingsRequest\InlineSource|null
     */
    public function getInlineSource()
    {
        return $this->readOneof(2);
    }

    public function hasInlineSource()
    {
        return $this->hasOneof(2);
    }

    /**
     * The inline source to purge identity mapping entries from.
     *
     * Generated from protobuf field <code>.google.cloud.discoveryengine.v1.PurgeIdentityMappingsRequest.InlineSource inline_source = 2;</code>
     * @param \Google\Cloud\DiscoveryEngine\V1\PurgeIdentityMappingsRequest\InlineSource $var
     * @return $this
     */
    public function setInlineSource($var)
    {
        GPBUtil::checkMessage($var, \Google\Cloud\DiscoveryEngine\V1\PurgeIdentityMappingsRequest\InlineSource::class);
        $this->writeOneof(2, $var);

        return $this;
    }

    /**
     * Required. The name of the Identity Mapping Store to purge Identity Mapping
     * Entries from. Format:
     * `projects/{project}/locations/{location}/identityMappingStores/{identityMappingStore}`
     *
     * Generated from protobuf field <code>string identity_mapping_store = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {</code>
     * @return string
     */
    public function getIdentityMappingStore()
    {
        return $this->identity_mapping_store;
    }

    /**
     * Required. The name of the Identity Mapping Store to purge Identity Mapping
     * Entries from. Format:
     * `projects/{project}/locations/{location}/identityMappingStores/{identityMappingStore}`
     *
     * Generated from protobuf field <code>string identity_mapping_store = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {</code>
     * @param string $var
     * @return $this
     */
    public function setIdentityMappingStore($var)
    {
        GPBUtil::checkString($var, True);
        $this->identity_mapping_store = $var;

        return $this;
    }

    /**
     * Filter matching identity mappings to purge.
     * The eligible field for filtering is:
     * * `update_time`: in ISO 8601 "zulu" format.
     * * `external_id`
     * Examples:
     * * Deleting all identity mappings updated in a time range:
     *   `update_time > "2012-04-23T18:25:43.511Z" AND update_time <
     *   "2012-04-23T18:30:43.511Z"`
     * * Deleting all identity mappings for a given external_id:
     * `external_id = "id1"`
     * * Deleting all identity mappings inside an identity mapping store:
     *   `*`
     * The filtering fields are assumed to have an implicit AND.
     * Should not be used with source. An error will be thrown, if both are
     * provided.
     *
     * Generated from protobuf field <code>string filter = 3;</code>
     * @return string
     */
    public function getFilter()
    {
        return $this->filter;
    }

    /**
     * Filter matching identity mappings to purge.
     * The eligible field for filtering is:
     * * `update_time`: in ISO 8601 "zulu" format.
     * * `external_id`
     * Examples:
     * * Deleting all identity mappings updated in a time range:
     *   `update_time > "2012-04-23T18:25:43.511Z" AND update_time <
     *   "2012-04-23T18:30:43.511Z"`
     * * Deleting all identity mappings for a given external_id:
     * `external_id = "id1"`
     * * Deleting all identity mappings inside an identity mapping store:
     *   `*`
     * The filtering fields are assumed to have an implicit AND.
     * Should not be used with source. An error will be thrown, if both are
     * provided.
     *
     * Generated from protobuf field <code>string filter = 3;</code>
     * @param string $var
     * @return $this
     */
    public function setFilter($var)
    {
        GPBUtil::checkString($var, True);
        $this->filter = $var;

        return $this;
    }

    /**
     * Actually performs the purge. If `force` is set to false, return the
     * expected purge count without deleting any identity mappings. This field is
     * only supported for purge with filter. For input source this field is
     * ignored and data will be purged regardless of the value of this field.
     *
     * Generated from protobuf field <code>optional bool force = 4;</code>
     * @return bool
     */
    public function getForce()
    {
        return isset($this->force) ? $this->force : false;
    }

    public function hasForce()
    {
        return isset($this->force);
    }

    public function clearForce()
    {
        unset($this->force);
    }

    /**
     * Actually performs the purge. If `force` is set to false, return the
     * expected purge count without deleting any identity mappings. This field is
     * only supported for purge with filter. For input source this field is
     * ignored and data will be purged regardless of the value of this field.
     *
     * Generated from protobuf field <code>optional bool force = 4;</code>
     * @param bool $var
     * @return $this
     */
    public function setForce($var)
    {
        GPBUtil::checkBool($var);
        $this->force = $var;

        return $this;
    }

    /**
     * @return string
     */
    public function getSource()
    {
        return $this->whichOneof("source");
    }

}

