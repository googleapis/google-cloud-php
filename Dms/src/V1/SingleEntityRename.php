<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/cloud/clouddms/v1/conversionworkspace_resources.proto

namespace Google\Cloud\CloudDms\V1;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Options to configure rule type SingleEntityRename.
 * The rule is used to rename an entity.
 * The rule filter field can refer to only one entity.
 * The rule scope can be one of: Database, Schema, Table, Column, Constraint,
 * Index, View, Function, Stored Procedure, Materialized View, Sequence, UDT,
 * Synonym
 *
 * Generated from protobuf message <code>google.cloud.clouddms.v1.SingleEntityRename</code>
 */
class SingleEntityRename extends \Google\Protobuf\Internal\Message
{
    /**
     * Required. The new name of the destination entity
     *
     * Generated from protobuf field <code>string new_name = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    private $new_name = '';

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $new_name
     *           Required. The new name of the destination entity
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Google\Cloud\Clouddms\V1\ConversionworkspaceResources::initOnce();
        parent::__construct($data);
    }

    /**
     * Required. The new name of the destination entity
     *
     * Generated from protobuf field <code>string new_name = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     * @return string
     */
    public function getNewName()
    {
        return $this->new_name;
    }

    /**
     * Required. The new name of the destination entity
     *
     * Generated from protobuf field <code>string new_name = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     * @param string $var
     * @return $this
     */
    public function setNewName($var)
    {
        GPBUtil::checkString($var, True);
        $this->new_name = $var;

        return $this;
    }

}

