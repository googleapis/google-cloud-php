<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/bigtable/admin/v2/instance.proto

namespace Google\Cloud\Bigtable\Admin\V2\AppProfile\DataBoostIsolationReadOnly;

use UnexpectedValueException;

/**
 * Compute Billing Owner specifies how usage should be accounted when using
 * Data Boost. Compute Billing Owner also configures which Cloud Project is
 * charged for relevant quota.
 *
 * Protobuf type <code>google.bigtable.admin.v2.AppProfile.DataBoostIsolationReadOnly.ComputeBillingOwner</code>
 */
class ComputeBillingOwner
{
    /**
     * Unspecified value.
     *
     * Generated from protobuf enum <code>COMPUTE_BILLING_OWNER_UNSPECIFIED = 0;</code>
     */
    const COMPUTE_BILLING_OWNER_UNSPECIFIED = 0;
    /**
     * The host Cloud Project containing the targeted Bigtable Instance /
     * Table pays for compute.
     *
     * Generated from protobuf enum <code>HOST_PAYS = 1;</code>
     */
    const HOST_PAYS = 1;

    private static $valueToName = [
        self::COMPUTE_BILLING_OWNER_UNSPECIFIED => 'COMPUTE_BILLING_OWNER_UNSPECIFIED',
        self::HOST_PAYS => 'HOST_PAYS',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(ComputeBillingOwner::class, \Google\Cloud\Bigtable\Admin\V2\AppProfile_DataBoostIsolationReadOnly_ComputeBillingOwner::class);

