<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/bigtable/admin/v2/types.proto

namespace Google\Cloud\Bigtable\Admin\V2\Type\Int64\Encoding;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Encodes the value as an 8-byte big endian twos complement `Bytes`
 * value.
 * * Natural sort? No (positive values only)
 * * Self-delimiting? Yes
 * * Compatibility?
 *    - BigQuery Federation `BINARY` encoding
 *    - HBase `Bytes.toBytes`
 *    - Java `ByteBuffer.putLong()` with `ByteOrder.BIG_ENDIAN`
 *
 * Generated from protobuf message <code>google.bigtable.admin.v2.Type.Int64.Encoding.BigEndianBytes</code>
 */
class BigEndianBytes extends \Google\Protobuf\Internal\Message
{
    /**
     * The underlying `Bytes` type, which may be able to encode further.
     *
     * Generated from protobuf field <code>.google.bigtable.admin.v2.Type.Bytes bytes_type = 1;</code>
     */
    private $bytes_type = null;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type \Google\Cloud\Bigtable\Admin\V2\Type\Bytes $bytes_type
     *           The underlying `Bytes` type, which may be able to encode further.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Google\Bigtable\Admin\V2\Types::initOnce();
        parent::__construct($data);
    }

    /**
     * The underlying `Bytes` type, which may be able to encode further.
     *
     * Generated from protobuf field <code>.google.bigtable.admin.v2.Type.Bytes bytes_type = 1;</code>
     * @return \Google\Cloud\Bigtable\Admin\V2\Type\Bytes|null
     */
    public function getBytesType()
    {
        return $this->bytes_type;
    }

    public function hasBytesType()
    {
        return isset($this->bytes_type);
    }

    public function clearBytesType()
    {
        unset($this->bytes_type);
    }

    /**
     * The underlying `Bytes` type, which may be able to encode further.
     *
     * Generated from protobuf field <code>.google.bigtable.admin.v2.Type.Bytes bytes_type = 1;</code>
     * @param \Google\Cloud\Bigtable\Admin\V2\Type\Bytes $var
     * @return $this
     */
    public function setBytesType($var)
    {
        GPBUtil::checkMessage($var, \Google\Cloud\Bigtable\Admin\V2\Type\Bytes::class);
        $this->bytes_type = $var;

        return $this;
    }

}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(BigEndianBytes::class, \Google\Cloud\Bigtable\Admin\V2\Type_Int64_Encoding_BigEndianBytes::class);

