<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/bigtable/admin/v2/bigtable_table_admin.proto

namespace Google\Cloud\Bigtable\Admin\V2;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Request message for
 * [google.bigtable.admin.v2.BigtableTableAdmin.GetTable][google.bigtable.admin.v2.BigtableTableAdmin.GetTable]
 *
 * Generated from protobuf message <code>google.bigtable.admin.v2.GetTableRequest</code>
 */
class GetTableRequest extends \Google\Protobuf\Internal\Message
{
    /**
     * Required. The unique name of the requested table.
     * Values are of the form
     * `projects/{project}/instances/{instance}/tables/{table}`.
     *
     * Generated from protobuf field <code>string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {</code>
     */
    private $name = '';
    /**
     * The view to be applied to the returned table's fields.
     * Defaults to `SCHEMA_VIEW` if unspecified.
     *
     * Generated from protobuf field <code>.google.bigtable.admin.v2.Table.View view = 2;</code>
     */
    private $view = 0;

    /**
     * @param string $name Required. The unique name of the requested table.
     *                     Values are of the form
     *                     `projects/{project}/instances/{instance}/tables/{table}`. Please see
     *                     {@see BigtableTableAdminClient::tableName()} for help formatting this field.
     *
     * @return \Google\Cloud\Bigtable\Admin\V2\GetTableRequest
     *
     * @experimental
     */
    public static function build(string $name): self
    {
        return (new self())
            ->setName($name);
    }

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $name
     *           Required. The unique name of the requested table.
     *           Values are of the form
     *           `projects/{project}/instances/{instance}/tables/{table}`.
     *     @type int $view
     *           The view to be applied to the returned table's fields.
     *           Defaults to `SCHEMA_VIEW` if unspecified.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Google\Bigtable\Admin\V2\BigtableTableAdmin::initOnce();
        parent::__construct($data);
    }

    /**
     * Required. The unique name of the requested table.
     * Values are of the form
     * `projects/{project}/instances/{instance}/tables/{table}`.
     *
     * Generated from protobuf field <code>string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {</code>
     * @return string
     */
    public function getName()
    {
        return $this->name;
    }

    /**
     * Required. The unique name of the requested table.
     * Values are of the form
     * `projects/{project}/instances/{instance}/tables/{table}`.
     *
     * Generated from protobuf field <code>string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {</code>
     * @param string $var
     * @return $this
     */
    public function setName($var)
    {
        GPBUtil::checkString($var, True);
        $this->name = $var;

        return $this;
    }

    /**
     * The view to be applied to the returned table's fields.
     * Defaults to `SCHEMA_VIEW` if unspecified.
     *
     * Generated from protobuf field <code>.google.bigtable.admin.v2.Table.View view = 2;</code>
     * @return int
     */
    public function getView()
    {
        return $this->view;
    }

    /**
     * The view to be applied to the returned table's fields.
     * Defaults to `SCHEMA_VIEW` if unspecified.
     *
     * Generated from protobuf field <code>.google.bigtable.admin.v2.Table.View view = 2;</code>
     * @param int $var
     * @return $this
     */
    public function setView($var)
    {
        GPBUtil::checkEnum($var, \Google\Cloud\Bigtable\Admin\V2\Table\View::class);
        $this->view = $var;

        return $this;
    }

}

