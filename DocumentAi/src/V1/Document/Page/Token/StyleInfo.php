<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/cloud/documentai/v1/document.proto

namespace Google\Cloud\DocumentAI\V1\Document\Page\Token;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Font and other text style attributes.
 *
 * Generated from protobuf message <code>google.cloud.documentai.v1.Document.Page.Token.StyleInfo</code>
 */
class StyleInfo extends \Google\Protobuf\Internal\Message
{
    /**
     * Font size in points (`1` point is `¹⁄₇₂` inches).
     *
     * Generated from protobuf field <code>int32 font_size = 1;</code>
     */
    private $font_size = 0;
    /**
     * Font size in pixels, equal to _unrounded
     * [font_size][google.cloud.documentai.v1.Document.Page.Token.StyleInfo.font_size]_
     * * _resolution_ ÷ `72.0`.
     *
     * Generated from protobuf field <code>double pixel_font_size = 2;</code>
     */
    private $pixel_font_size = 0.0;
    /**
     * Letter spacing in points.
     *
     * Generated from protobuf field <code>double letter_spacing = 3;</code>
     */
    private $letter_spacing = 0.0;
    /**
     * Name or style of the font.
     *
     * Generated from protobuf field <code>string font_type = 4;</code>
     */
    private $font_type = '';
    /**
     * Whether the text is bold (equivalent to
     * [font_weight][google.cloud.documentai.v1.Document.Page.Token.StyleInfo.font_weight]
     * is at least `700`).
     *
     * Generated from protobuf field <code>bool bold = 5;</code>
     */
    private $bold = false;
    /**
     * Whether the text is italic.
     *
     * Generated from protobuf field <code>bool italic = 6;</code>
     */
    private $italic = false;
    /**
     * Whether the text is underlined.
     *
     * Generated from protobuf field <code>bool underlined = 7;</code>
     */
    private $underlined = false;
    /**
     * Whether the text is strikethrough.
     *
     * Generated from protobuf field <code>bool strikeout = 8;</code>
     */
    private $strikeout = false;
    /**
     * Whether the text is a subscript.
     *
     * Generated from protobuf field <code>bool subscript = 9;</code>
     */
    private $subscript = false;
    /**
     * Whether the text is a superscript.
     *
     * Generated from protobuf field <code>bool superscript = 10;</code>
     */
    private $superscript = false;
    /**
     * Whether the text is in small caps.
     *
     * Generated from protobuf field <code>bool smallcaps = 11;</code>
     */
    private $smallcaps = false;
    /**
     * TrueType weight on a scale `100` (thin) to `1000` (ultra-heavy).
     * Normal is `400`, bold is `700`.
     *
     * Generated from protobuf field <code>int32 font_weight = 12;</code>
     */
    private $font_weight = 0;
    /**
     * Whether the text is handwritten.
     *
     * Generated from protobuf field <code>bool handwritten = 13;</code>
     */
    private $handwritten = false;
    /**
     * Color of the text.
     *
     * Generated from protobuf field <code>.google.type.Color text_color = 14;</code>
     */
    private $text_color = null;
    /**
     * Color of the background.
     *
     * Generated from protobuf field <code>.google.type.Color background_color = 15;</code>
     */
    private $background_color = null;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type int $font_size
     *           Font size in points (`1` point is `¹⁄₇₂` inches).
     *     @type float $pixel_font_size
     *           Font size in pixels, equal to _unrounded
     *           [font_size][google.cloud.documentai.v1.Document.Page.Token.StyleInfo.font_size]_
     *           * _resolution_ ÷ `72.0`.
     *     @type float $letter_spacing
     *           Letter spacing in points.
     *     @type string $font_type
     *           Name or style of the font.
     *     @type bool $bold
     *           Whether the text is bold (equivalent to
     *           [font_weight][google.cloud.documentai.v1.Document.Page.Token.StyleInfo.font_weight]
     *           is at least `700`).
     *     @type bool $italic
     *           Whether the text is italic.
     *     @type bool $underlined
     *           Whether the text is underlined.
     *     @type bool $strikeout
     *           Whether the text is strikethrough.
     *     @type bool $subscript
     *           Whether the text is a subscript.
     *     @type bool $superscript
     *           Whether the text is a superscript.
     *     @type bool $smallcaps
     *           Whether the text is in small caps.
     *     @type int $font_weight
     *           TrueType weight on a scale `100` (thin) to `1000` (ultra-heavy).
     *           Normal is `400`, bold is `700`.
     *     @type bool $handwritten
     *           Whether the text is handwritten.
     *     @type \Google\Type\Color $text_color
     *           Color of the text.
     *     @type \Google\Type\Color $background_color
     *           Color of the background.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Google\Cloud\Documentai\V1\Document::initOnce();
        parent::__construct($data);
    }

    /**
     * Font size in points (`1` point is `¹⁄₇₂` inches).
     *
     * Generated from protobuf field <code>int32 font_size = 1;</code>
     * @return int
     */
    public function getFontSize()
    {
        return $this->font_size;
    }

    /**
     * Font size in points (`1` point is `¹⁄₇₂` inches).
     *
     * Generated from protobuf field <code>int32 font_size = 1;</code>
     * @param int $var
     * @return $this
     */
    public function setFontSize($var)
    {
        GPBUtil::checkInt32($var);
        $this->font_size = $var;

        return $this;
    }

    /**
     * Font size in pixels, equal to _unrounded
     * [font_size][google.cloud.documentai.v1.Document.Page.Token.StyleInfo.font_size]_
     * * _resolution_ ÷ `72.0`.
     *
     * Generated from protobuf field <code>double pixel_font_size = 2;</code>
     * @return float
     */
    public function getPixelFontSize()
    {
        return $this->pixel_font_size;
    }

    /**
     * Font size in pixels, equal to _unrounded
     * [font_size][google.cloud.documentai.v1.Document.Page.Token.StyleInfo.font_size]_
     * * _resolution_ ÷ `72.0`.
     *
     * Generated from protobuf field <code>double pixel_font_size = 2;</code>
     * @param float $var
     * @return $this
     */
    public function setPixelFontSize($var)
    {
        GPBUtil::checkDouble($var);
        $this->pixel_font_size = $var;

        return $this;
    }

    /**
     * Letter spacing in points.
     *
     * Generated from protobuf field <code>double letter_spacing = 3;</code>
     * @return float
     */
    public function getLetterSpacing()
    {
        return $this->letter_spacing;
    }

    /**
     * Letter spacing in points.
     *
     * Generated from protobuf field <code>double letter_spacing = 3;</code>
     * @param float $var
     * @return $this
     */
    public function setLetterSpacing($var)
    {
        GPBUtil::checkDouble($var);
        $this->letter_spacing = $var;

        return $this;
    }

    /**
     * Name or style of the font.
     *
     * Generated from protobuf field <code>string font_type = 4;</code>
     * @return string
     */
    public function getFontType()
    {
        return $this->font_type;
    }

    /**
     * Name or style of the font.
     *
     * Generated from protobuf field <code>string font_type = 4;</code>
     * @param string $var
     * @return $this
     */
    public function setFontType($var)
    {
        GPBUtil::checkString($var, True);
        $this->font_type = $var;

        return $this;
    }

    /**
     * Whether the text is bold (equivalent to
     * [font_weight][google.cloud.documentai.v1.Document.Page.Token.StyleInfo.font_weight]
     * is at least `700`).
     *
     * Generated from protobuf field <code>bool bold = 5;</code>
     * @return bool
     */
    public function getBold()
    {
        return $this->bold;
    }

    /**
     * Whether the text is bold (equivalent to
     * [font_weight][google.cloud.documentai.v1.Document.Page.Token.StyleInfo.font_weight]
     * is at least `700`).
     *
     * Generated from protobuf field <code>bool bold = 5;</code>
     * @param bool $var
     * @return $this
     */
    public function setBold($var)
    {
        GPBUtil::checkBool($var);
        $this->bold = $var;

        return $this;
    }

    /**
     * Whether the text is italic.
     *
     * Generated from protobuf field <code>bool italic = 6;</code>
     * @return bool
     */
    public function getItalic()
    {
        return $this->italic;
    }

    /**
     * Whether the text is italic.
     *
     * Generated from protobuf field <code>bool italic = 6;</code>
     * @param bool $var
     * @return $this
     */
    public function setItalic($var)
    {
        GPBUtil::checkBool($var);
        $this->italic = $var;

        return $this;
    }

    /**
     * Whether the text is underlined.
     *
     * Generated from protobuf field <code>bool underlined = 7;</code>
     * @return bool
     */
    public function getUnderlined()
    {
        return $this->underlined;
    }

    /**
     * Whether the text is underlined.
     *
     * Generated from protobuf field <code>bool underlined = 7;</code>
     * @param bool $var
     * @return $this
     */
    public function setUnderlined($var)
    {
        GPBUtil::checkBool($var);
        $this->underlined = $var;

        return $this;
    }

    /**
     * Whether the text is strikethrough.
     *
     * Generated from protobuf field <code>bool strikeout = 8;</code>
     * @return bool
     */
    public function getStrikeout()
    {
        return $this->strikeout;
    }

    /**
     * Whether the text is strikethrough.
     *
     * Generated from protobuf field <code>bool strikeout = 8;</code>
     * @param bool $var
     * @return $this
     */
    public function setStrikeout($var)
    {
        GPBUtil::checkBool($var);
        $this->strikeout = $var;

        return $this;
    }

    /**
     * Whether the text is a subscript.
     *
     * Generated from protobuf field <code>bool subscript = 9;</code>
     * @return bool
     */
    public function getSubscript()
    {
        return $this->subscript;
    }

    /**
     * Whether the text is a subscript.
     *
     * Generated from protobuf field <code>bool subscript = 9;</code>
     * @param bool $var
     * @return $this
     */
    public function setSubscript($var)
    {
        GPBUtil::checkBool($var);
        $this->subscript = $var;

        return $this;
    }

    /**
     * Whether the text is a superscript.
     *
     * Generated from protobuf field <code>bool superscript = 10;</code>
     * @return bool
     */
    public function getSuperscript()
    {
        return $this->superscript;
    }

    /**
     * Whether the text is a superscript.
     *
     * Generated from protobuf field <code>bool superscript = 10;</code>
     * @param bool $var
     * @return $this
     */
    public function setSuperscript($var)
    {
        GPBUtil::checkBool($var);
        $this->superscript = $var;

        return $this;
    }

    /**
     * Whether the text is in small caps.
     *
     * Generated from protobuf field <code>bool smallcaps = 11;</code>
     * @return bool
     */
    public function getSmallcaps()
    {
        return $this->smallcaps;
    }

    /**
     * Whether the text is in small caps.
     *
     * Generated from protobuf field <code>bool smallcaps = 11;</code>
     * @param bool $var
     * @return $this
     */
    public function setSmallcaps($var)
    {
        GPBUtil::checkBool($var);
        $this->smallcaps = $var;

        return $this;
    }

    /**
     * TrueType weight on a scale `100` (thin) to `1000` (ultra-heavy).
     * Normal is `400`, bold is `700`.
     *
     * Generated from protobuf field <code>int32 font_weight = 12;</code>
     * @return int
     */
    public function getFontWeight()
    {
        return $this->font_weight;
    }

    /**
     * TrueType weight on a scale `100` (thin) to `1000` (ultra-heavy).
     * Normal is `400`, bold is `700`.
     *
     * Generated from protobuf field <code>int32 font_weight = 12;</code>
     * @param int $var
     * @return $this
     */
    public function setFontWeight($var)
    {
        GPBUtil::checkInt32($var);
        $this->font_weight = $var;

        return $this;
    }

    /**
     * Whether the text is handwritten.
     *
     * Generated from protobuf field <code>bool handwritten = 13;</code>
     * @return bool
     */
    public function getHandwritten()
    {
        return $this->handwritten;
    }

    /**
     * Whether the text is handwritten.
     *
     * Generated from protobuf field <code>bool handwritten = 13;</code>
     * @param bool $var
     * @return $this
     */
    public function setHandwritten($var)
    {
        GPBUtil::checkBool($var);
        $this->handwritten = $var;

        return $this;
    }

    /**
     * Color of the text.
     *
     * Generated from protobuf field <code>.google.type.Color text_color = 14;</code>
     * @return \Google\Type\Color|null
     */
    public function getTextColor()
    {
        return $this->text_color;
    }

    public function hasTextColor()
    {
        return isset($this->text_color);
    }

    public function clearTextColor()
    {
        unset($this->text_color);
    }

    /**
     * Color of the text.
     *
     * Generated from protobuf field <code>.google.type.Color text_color = 14;</code>
     * @param \Google\Type\Color $var
     * @return $this
     */
    public function setTextColor($var)
    {
        GPBUtil::checkMessage($var, \Google\Type\Color::class);
        $this->text_color = $var;

        return $this;
    }

    /**
     * Color of the background.
     *
     * Generated from protobuf field <code>.google.type.Color background_color = 15;</code>
     * @return \Google\Type\Color|null
     */
    public function getBackgroundColor()
    {
        return $this->background_color;
    }

    public function hasBackgroundColor()
    {
        return isset($this->background_color);
    }

    public function clearBackgroundColor()
    {
        unset($this->background_color);
    }

    /**
     * Color of the background.
     *
     * Generated from protobuf field <code>.google.type.Color background_color = 15;</code>
     * @param \Google\Type\Color $var
     * @return $this
     */
    public function setBackgroundColor($var)
    {
        GPBUtil::checkMessage($var, \Google\Type\Color::class);
        $this->background_color = $var;

        return $this;
    }

}


