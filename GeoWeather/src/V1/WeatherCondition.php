<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/maps/weather/v1/weather_condition.proto

namespace Google\Geo\Weather\V1;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Represents a weather condition for a given location at a given period of
 * time.
 * Disclaimer: Weather icons and condition codes are subject to change. Google
 * may introduce new codes and icons or update existing ones as needed. We
 * encourage you to refer to this documentation regularly for the most
 * up-to-date information.
 *
 * Generated from protobuf message <code>google.maps.weather.v1.WeatherCondition</code>
 */
class WeatherCondition extends \Google\Protobuf\Internal\Message
{
    /**
     * The base URI for the icon not including the file type extension. To display
     * the icon, append a theme if desired and the file type extension (`.png` or
     * `.svg`) to this URI. By default, the icon is light themed, but `_dark` can
     * be appended for dark mode. For example:
     * "https://maps.gstatic.com/weather/v1/dust.svg" or
     * "https://maps.gstatic.com/weather/v1/dust_dark.svg", where `icon_base_uri`
     * is "https://maps.gstatic.com/weather/v1/dust".
     *
     * Generated from protobuf field <code>string icon_base_uri = 1;</code>
     */
    protected $icon_base_uri = '';
    /**
     * The textual description for this weather condition (localized).
     *
     * Generated from protobuf field <code>.google.type.LocalizedText description = 2;</code>
     */
    protected $description = null;
    /**
     * The type of weather condition.
     *
     * Generated from protobuf field <code>.google.maps.weather.v1.WeatherCondition.Type type = 3;</code>
     */
    protected $type = 0;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $icon_base_uri
     *           The base URI for the icon not including the file type extension. To display
     *           the icon, append a theme if desired and the file type extension (`.png` or
     *           `.svg`) to this URI. By default, the icon is light themed, but `_dark` can
     *           be appended for dark mode. For example:
     *           "https://maps.gstatic.com/weather/v1/dust.svg" or
     *           "https://maps.gstatic.com/weather/v1/dust_dark.svg", where `icon_base_uri`
     *           is "https://maps.gstatic.com/weather/v1/dust".
     *     @type \Google\Type\LocalizedText $description
     *           The textual description for this weather condition (localized).
     *     @type int $type
     *           The type of weather condition.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Google\Maps\Weather\V1\WeatherCondition::initOnce();
        parent::__construct($data);
    }

    /**
     * The base URI for the icon not including the file type extension. To display
     * the icon, append a theme if desired and the file type extension (`.png` or
     * `.svg`) to this URI. By default, the icon is light themed, but `_dark` can
     * be appended for dark mode. For example:
     * "https://maps.gstatic.com/weather/v1/dust.svg" or
     * "https://maps.gstatic.com/weather/v1/dust_dark.svg", where `icon_base_uri`
     * is "https://maps.gstatic.com/weather/v1/dust".
     *
     * Generated from protobuf field <code>string icon_base_uri = 1;</code>
     * @return string
     */
    public function getIconBaseUri()
    {
        return $this->icon_base_uri;
    }

    /**
     * The base URI for the icon not including the file type extension. To display
     * the icon, append a theme if desired and the file type extension (`.png` or
     * `.svg`) to this URI. By default, the icon is light themed, but `_dark` can
     * be appended for dark mode. For example:
     * "https://maps.gstatic.com/weather/v1/dust.svg" or
     * "https://maps.gstatic.com/weather/v1/dust_dark.svg", where `icon_base_uri`
     * is "https://maps.gstatic.com/weather/v1/dust".
     *
     * Generated from protobuf field <code>string icon_base_uri = 1;</code>
     * @param string $var
     * @return $this
     */
    public function setIconBaseUri($var)
    {
        GPBUtil::checkString($var, True);
        $this->icon_base_uri = $var;

        return $this;
    }

    /**
     * The textual description for this weather condition (localized).
     *
     * Generated from protobuf field <code>.google.type.LocalizedText description = 2;</code>
     * @return \Google\Type\LocalizedText|null
     */
    public function getDescription()
    {
        return $this->description;
    }

    public function hasDescription()
    {
        return isset($this->description);
    }

    public function clearDescription()
    {
        unset($this->description);
    }

    /**
     * The textual description for this weather condition (localized).
     *
     * Generated from protobuf field <code>.google.type.LocalizedText description = 2;</code>
     * @param \Google\Type\LocalizedText $var
     * @return $this
     */
    public function setDescription($var)
    {
        GPBUtil::checkMessage($var, \Google\Type\LocalizedText::class);
        $this->description = $var;

        return $this;
    }

    /**
     * The type of weather condition.
     *
     * Generated from protobuf field <code>.google.maps.weather.v1.WeatherCondition.Type type = 3;</code>
     * @return int
     */
    public function getType()
    {
        return $this->type;
    }

    /**
     * The type of weather condition.
     *
     * Generated from protobuf field <code>.google.maps.weather.v1.WeatherCondition.Type type = 3;</code>
     * @param int $var
     * @return $this
     */
    public function setType($var)
    {
        GPBUtil::checkEnum($var, \Google\Geo\Weather\V1\WeatherCondition\Type::class);
        $this->type = $var;

        return $this;
    }

}

