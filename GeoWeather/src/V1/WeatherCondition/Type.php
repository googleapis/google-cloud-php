<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/maps/weather/v1/weather_condition.proto

namespace Google\Geo\Weather\V1\WeatherCondition;

use UnexpectedValueException;

/**
 * Marks the weather condition type in a forecast element's context.
 *
 * Protobuf type <code>google.maps.weather.v1.WeatherCondition.Type</code>
 */
class Type
{
    /**
     * The weather condition is unspecified.
     *
     * Generated from protobuf enum <code>TYPE_UNSPECIFIED = 0;</code>
     */
    const TYPE_UNSPECIFIED = 0;
    /**
     * No clouds.
     *
     * Generated from protobuf enum <code>CLEAR = 1;</code>
     */
    const CLEAR = 1;
    /**
     * Periodic clouds.
     *
     * Generated from protobuf enum <code>MOSTLY_CLEAR = 2;</code>
     */
    const MOSTLY_CLEAR = 2;
    /**
     * Party cloudy (some clouds).
     *
     * Generated from protobuf enum <code>PARTLY_CLOUDY = 3;</code>
     */
    const PARTLY_CLOUDY = 3;
    /**
     * Mostly cloudy (more clouds than sun).
     *
     * Generated from protobuf enum <code>MOSTLY_CLOUDY = 4;</code>
     */
    const MOSTLY_CLOUDY = 4;
    /**
     * Cloudy (all clouds, no sun).
     *
     * Generated from protobuf enum <code>CLOUDY = 5;</code>
     */
    const CLOUDY = 5;
    /**
     * High wind.
     *
     * Generated from protobuf enum <code>WINDY = 6;</code>
     */
    const WINDY = 6;
    /**
     * High wind with precipitation.
     *
     * Generated from protobuf enum <code>WIND_AND_RAIN = 7;</code>
     */
    const WIND_AND_RAIN = 7;
    /**
     * Light intermittent rain.
     *
     * Generated from protobuf enum <code>LIGHT_RAIN_SHOWERS = 8;</code>
     */
    const LIGHT_RAIN_SHOWERS = 8;
    /**
     * Chance of intermittent rain.
     *
     * Generated from protobuf enum <code>CHANCE_OF_SHOWERS = 9;</code>
     */
    const CHANCE_OF_SHOWERS = 9;
    /**
     * Intermittent rain.
     *
     * Generated from protobuf enum <code>SCATTERED_SHOWERS = 10;</code>
     */
    const SCATTERED_SHOWERS = 10;
    /**
     * Showers are considered to be rainfall that has a shorter duration than
     * rain, and is characterized by suddenness in terms of start and stop
     * times, and rapid changes in intensity.
     *
     * Generated from protobuf enum <code>RAIN_SHOWERS = 12;</code>
     */
    const RAIN_SHOWERS = 12;
    /**
     * Intense showers.
     *
     * Generated from protobuf enum <code>HEAVY_RAIN_SHOWERS = 13;</code>
     */
    const HEAVY_RAIN_SHOWERS = 13;
    /**
     * Rain (light to moderate in quantity).
     *
     * Generated from protobuf enum <code>LIGHT_TO_MODERATE_RAIN = 14;</code>
     */
    const LIGHT_TO_MODERATE_RAIN = 14;
    /**
     * Rain (moderate to heavy in quantity).
     *
     * Generated from protobuf enum <code>MODERATE_TO_HEAVY_RAIN = 15;</code>
     */
    const MODERATE_TO_HEAVY_RAIN = 15;
    /**
     * Moderate rain.
     *
     * Generated from protobuf enum <code>RAIN = 16;</code>
     */
    const RAIN = 16;
    /**
     * Light rain.
     *
     * Generated from protobuf enum <code>LIGHT_RAIN = 17;</code>
     */
    const LIGHT_RAIN = 17;
    /**
     * Heavy rain.
     *
     * Generated from protobuf enum <code>HEAVY_RAIN = 18;</code>
     */
    const HEAVY_RAIN = 18;
    /**
     * Rain periodically heavy.
     *
     * Generated from protobuf enum <code>RAIN_PERIODICALLY_HEAVY = 19;</code>
     */
    const RAIN_PERIODICALLY_HEAVY = 19;
    /**
     * Light snow that is falling at varying intensities for brief periods of
     * time.
     *
     * Generated from protobuf enum <code>LIGHT_SNOW_SHOWERS = 20;</code>
     */
    const LIGHT_SNOW_SHOWERS = 20;
    /**
     * Chance of snow showers.
     *
     * Generated from protobuf enum <code>CHANCE_OF_SNOW_SHOWERS = 21;</code>
     */
    const CHANCE_OF_SNOW_SHOWERS = 21;
    /**
     * Snow that is falling at varying intensities for brief periods of time.
     *
     * Generated from protobuf enum <code>SCATTERED_SNOW_SHOWERS = 22;</code>
     */
    const SCATTERED_SNOW_SHOWERS = 22;
    /**
     * Snow showers.
     *
     * Generated from protobuf enum <code>SNOW_SHOWERS = 23;</code>
     */
    const SNOW_SHOWERS = 23;
    /**
     * Heavy snow showers.
     *
     * Generated from protobuf enum <code>HEAVY_SNOW_SHOWERS = 24;</code>
     */
    const HEAVY_SNOW_SHOWERS = 24;
    /**
     * Light to moderate snow.
     *
     * Generated from protobuf enum <code>LIGHT_TO_MODERATE_SNOW = 25;</code>
     */
    const LIGHT_TO_MODERATE_SNOW = 25;
    /**
     * Moderate to heavy snow.
     *
     * Generated from protobuf enum <code>MODERATE_TO_HEAVY_SNOW = 26;</code>
     */
    const MODERATE_TO_HEAVY_SNOW = 26;
    /**
     * Moderate snow.
     *
     * Generated from protobuf enum <code>SNOW = 27;</code>
     */
    const SNOW = 27;
    /**
     * Light snow.
     *
     * Generated from protobuf enum <code>LIGHT_SNOW = 28;</code>
     */
    const LIGHT_SNOW = 28;
    /**
     * Heavy snow.
     *
     * Generated from protobuf enum <code>HEAVY_SNOW = 29;</code>
     */
    const HEAVY_SNOW = 29;
    /**
     * Snow with possible thunder and lightning.
     *
     * Generated from protobuf enum <code>SNOWSTORM = 30;</code>
     */
    const SNOWSTORM = 30;
    /**
     * Snow, at times heavy.
     *
     * Generated from protobuf enum <code>SNOW_PERIODICALLY_HEAVY = 31;</code>
     */
    const SNOW_PERIODICALLY_HEAVY = 31;
    /**
     * Heavy snow with possible thunder and lightning.
     *
     * Generated from protobuf enum <code>HEAVY_SNOW_STORM = 32;</code>
     */
    const HEAVY_SNOW_STORM = 32;
    /**
     * Snow with intense wind.
     *
     * Generated from protobuf enum <code>BLOWING_SNOW = 33;</code>
     */
    const BLOWING_SNOW = 33;
    /**
     * Rain and snow mix.
     *
     * Generated from protobuf enum <code>RAIN_AND_SNOW = 34;</code>
     */
    const RAIN_AND_SNOW = 34;
    /**
     * Hail.
     *
     * Generated from protobuf enum <code>HAIL = 35;</code>
     */
    const HAIL = 35;
    /**
     * Hail that is falling at varying intensities for brief periods of time.
     *
     * Generated from protobuf enum <code>HAIL_SHOWERS = 36;</code>
     */
    const HAIL_SHOWERS = 36;
    /**
     * Thunderstorm.
     *
     * Generated from protobuf enum <code>THUNDERSTORM = 37;</code>
     */
    const THUNDERSTORM = 37;
    /**
     * A shower of rain accompanied by thunder and lightning.
     *
     * Generated from protobuf enum <code>THUNDERSHOWER = 38;</code>
     */
    const THUNDERSHOWER = 38;
    /**
     * Light thunderstorm rain.
     *
     * Generated from protobuf enum <code>LIGHT_THUNDERSTORM_RAIN = 39;</code>
     */
    const LIGHT_THUNDERSTORM_RAIN = 39;
    /**
     * Thunderstorms that has rain in various intensities for brief periods of
     * time.
     *
     * Generated from protobuf enum <code>SCATTERED_THUNDERSTORMS = 40;</code>
     */
    const SCATTERED_THUNDERSTORMS = 40;
    /**
     * Heavy thunderstorm.
     *
     * Generated from protobuf enum <code>HEAVY_THUNDERSTORM = 41;</code>
     */
    const HEAVY_THUNDERSTORM = 41;

    private static $valueToName = [
        self::TYPE_UNSPECIFIED => 'TYPE_UNSPECIFIED',
        self::CLEAR => 'CLEAR',
        self::MOSTLY_CLEAR => 'MOSTLY_CLEAR',
        self::PARTLY_CLOUDY => 'PARTLY_CLOUDY',
        self::MOSTLY_CLOUDY => 'MOSTLY_CLOUDY',
        self::CLOUDY => 'CLOUDY',
        self::WINDY => 'WINDY',
        self::WIND_AND_RAIN => 'WIND_AND_RAIN',
        self::LIGHT_RAIN_SHOWERS => 'LIGHT_RAIN_SHOWERS',
        self::CHANCE_OF_SHOWERS => 'CHANCE_OF_SHOWERS',
        self::SCATTERED_SHOWERS => 'SCATTERED_SHOWERS',
        self::RAIN_SHOWERS => 'RAIN_SHOWERS',
        self::HEAVY_RAIN_SHOWERS => 'HEAVY_RAIN_SHOWERS',
        self::LIGHT_TO_MODERATE_RAIN => 'LIGHT_TO_MODERATE_RAIN',
        self::MODERATE_TO_HEAVY_RAIN => 'MODERATE_TO_HEAVY_RAIN',
        self::RAIN => 'RAIN',
        self::LIGHT_RAIN => 'LIGHT_RAIN',
        self::HEAVY_RAIN => 'HEAVY_RAIN',
        self::RAIN_PERIODICALLY_HEAVY => 'RAIN_PERIODICALLY_HEAVY',
        self::LIGHT_SNOW_SHOWERS => 'LIGHT_SNOW_SHOWERS',
        self::CHANCE_OF_SNOW_SHOWERS => 'CHANCE_OF_SNOW_SHOWERS',
        self::SCATTERED_SNOW_SHOWERS => 'SCATTERED_SNOW_SHOWERS',
        self::SNOW_SHOWERS => 'SNOW_SHOWERS',
        self::HEAVY_SNOW_SHOWERS => 'HEAVY_SNOW_SHOWERS',
        self::LIGHT_TO_MODERATE_SNOW => 'LIGHT_TO_MODERATE_SNOW',
        self::MODERATE_TO_HEAVY_SNOW => 'MODERATE_TO_HEAVY_SNOW',
        self::SNOW => 'SNOW',
        self::LIGHT_SNOW => 'LIGHT_SNOW',
        self::HEAVY_SNOW => 'HEAVY_SNOW',
        self::SNOWSTORM => 'SNOWSTORM',
        self::SNOW_PERIODICALLY_HEAVY => 'SNOW_PERIODICALLY_HEAVY',
        self::HEAVY_SNOW_STORM => 'HEAVY_SNOW_STORM',
        self::BLOWING_SNOW => 'BLOWING_SNOW',
        self::RAIN_AND_SNOW => 'RAIN_AND_SNOW',
        self::HAIL => 'HAIL',
        self::HAIL_SHOWERS => 'HAIL_SHOWERS',
        self::THUNDERSTORM => 'THUNDERSTORM',
        self::THUNDERSHOWER => 'THUNDERSHOWER',
        self::LIGHT_THUNDERSTORM_RAIN => 'LIGHT_THUNDERSTORM_RAIN',
        self::SCATTERED_THUNDERSTORMS => 'SCATTERED_THUNDERSTORMS',
        self::HEAVY_THUNDERSTORM => 'HEAVY_THUNDERSTORM',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}


