<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/maps/weather/v1/forecast_hour.proto

namespace Google\Geo\Weather\V1;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Represents an hourly forecast record at a given location.
 *
 * Generated from protobuf message <code>google.maps.weather.v1.ForecastHour</code>
 */
class ForecastHour extends \Google\Protobuf\Internal\Message
{
    /**
     * The one hour interval (in UTC time) this forecast data is valid for (the
     * timestamps are rounded down to the closest hour).
     *
     * Generated from protobuf field <code>.google.type.Interval interval = 1;</code>
     */
    protected $interval = null;
    /**
     * The local date and time in the time zone of the location (civil time) which
     * this hourly forecast is calculated for. This field may be used for display
     * purposes on the client.
     * Note: this date will consist of the year, month, day, hour and offset from
     * UTC.
     *
     * Generated from protobuf field <code>.google.type.DateTime display_date_time = 2;</code>
     */
    protected $display_date_time = null;
    /**
     * True if this hour is between the local sunrise (inclusive) and sunset
     * (exclusive) times. Otherwise, it is nighttime (between the sunset and the
     * next sunrise).
     * Note: this hour will be considered as daytime or nighttime if the interval
     * intersects with the local sunrise and sunset times respectively (e.g.: if
     * the interval is from 5am to 6am and sunrise is at 5:59am, then is_daytime
     * will be true).
     *
     * Generated from protobuf field <code>optional bool is_daytime = 3;</code>
     */
    protected $is_daytime = null;
    /**
     * The foreacasted weather condition.
     *
     * Generated from protobuf field <code>.google.maps.weather.v1.WeatherCondition weather_condition = 4;</code>
     */
    protected $weather_condition = null;
    /**
     * The forecasted temperature.
     *
     * Generated from protobuf field <code>.google.maps.weather.v1.Temperature temperature = 5;</code>
     */
    protected $temperature = null;
    /**
     * The measure of how the temperature will feel like at the requested
     * location.
     *
     * Generated from protobuf field <code>.google.maps.weather.v1.Temperature feels_like_temperature = 6;</code>
     */
    protected $feels_like_temperature = null;
    /**
     * The forecasted dew point temperature.
     *
     * Generated from protobuf field <code>.google.maps.weather.v1.Temperature dew_point = 7;</code>
     */
    protected $dew_point = null;
    /**
     * The forecasted heat index temperature.
     *
     * Generated from protobuf field <code>.google.maps.weather.v1.Temperature heat_index = 8;</code>
     */
    protected $heat_index = null;
    /**
     * The forecasted wind chill, air temperature exposed on the skin.
     *
     * Generated from protobuf field <code>.google.maps.weather.v1.Temperature wind_chill = 9;</code>
     */
    protected $wind_chill = null;
    /**
     * The forecasted wet bulb temperature, lowest temperature achievable by
     * evaporating water.
     *
     * Generated from protobuf field <code>.google.maps.weather.v1.Temperature wet_bulb_temperature = 10;</code>
     */
    protected $wet_bulb_temperature = null;
    /**
     * The forecasted percent of relative humidity (values from 0 to 100).
     *
     * Generated from protobuf field <code>optional int32 relative_humidity = 11;</code>
     */
    protected $relative_humidity = null;
    /**
     * The forecasted ultraviolet (UV) index.
     *
     * Generated from protobuf field <code>optional int32 uv_index = 12;</code>
     */
    protected $uv_index = null;
    /**
     * The forecasted precipitation probability and amount of precipitation
     * accumulated over the last hour.
     *
     * Generated from protobuf field <code>.google.maps.weather.v1.Precipitation precipitation = 13;</code>
     */
    protected $precipitation = null;
    /**
     * The forecasted thunderstorm probability (values from 0 to 100).
     *
     * Generated from protobuf field <code>optional int32 thunderstorm_probability = 14;</code>
     */
    protected $thunderstorm_probability = null;
    /**
     * The forecasted air pressure conditions.
     *
     * Generated from protobuf field <code>.google.maps.weather.v1.AirPressure air_pressure = 15;</code>
     */
    protected $air_pressure = null;
    /**
     * The forecasted wind conditions.
     *
     * Generated from protobuf field <code>.google.maps.weather.v1.Wind wind = 16;</code>
     */
    protected $wind = null;
    /**
     * The forecasted visibility.
     *
     * Generated from protobuf field <code>.google.maps.weather.v1.Visibility visibility = 17;</code>
     */
    protected $visibility = null;
    /**
     * The forecasted percentage of the sky covered by clouds (values from 0 to
     * 100).
     *
     * Generated from protobuf field <code>optional int32 cloud_cover = 18;</code>
     */
    protected $cloud_cover = null;
    /**
     * The forecasted ice thickness.
     *
     * Generated from protobuf field <code>.google.maps.weather.v1.IceThickness ice_thickness = 19;</code>
     */
    protected $ice_thickness = null;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type \Google\Type\Interval $interval
     *           The one hour interval (in UTC time) this forecast data is valid for (the
     *           timestamps are rounded down to the closest hour).
     *     @type \Google\Type\DateTime $display_date_time
     *           The local date and time in the time zone of the location (civil time) which
     *           this hourly forecast is calculated for. This field may be used for display
     *           purposes on the client.
     *           Note: this date will consist of the year, month, day, hour and offset from
     *           UTC.
     *     @type bool $is_daytime
     *           True if this hour is between the local sunrise (inclusive) and sunset
     *           (exclusive) times. Otherwise, it is nighttime (between the sunset and the
     *           next sunrise).
     *           Note: this hour will be considered as daytime or nighttime if the interval
     *           intersects with the local sunrise and sunset times respectively (e.g.: if
     *           the interval is from 5am to 6am and sunrise is at 5:59am, then is_daytime
     *           will be true).
     *     @type \Google\Geo\Weather\V1\WeatherCondition $weather_condition
     *           The foreacasted weather condition.
     *     @type \Google\Geo\Weather\V1\Temperature $temperature
     *           The forecasted temperature.
     *     @type \Google\Geo\Weather\V1\Temperature $feels_like_temperature
     *           The measure of how the temperature will feel like at the requested
     *           location.
     *     @type \Google\Geo\Weather\V1\Temperature $dew_point
     *           The forecasted dew point temperature.
     *     @type \Google\Geo\Weather\V1\Temperature $heat_index
     *           The forecasted heat index temperature.
     *     @type \Google\Geo\Weather\V1\Temperature $wind_chill
     *           The forecasted wind chill, air temperature exposed on the skin.
     *     @type \Google\Geo\Weather\V1\Temperature $wet_bulb_temperature
     *           The forecasted wet bulb temperature, lowest temperature achievable by
     *           evaporating water.
     *     @type int $relative_humidity
     *           The forecasted percent of relative humidity (values from 0 to 100).
     *     @type int $uv_index
     *           The forecasted ultraviolet (UV) index.
     *     @type \Google\Geo\Weather\V1\Precipitation $precipitation
     *           The forecasted precipitation probability and amount of precipitation
     *           accumulated over the last hour.
     *     @type int $thunderstorm_probability
     *           The forecasted thunderstorm probability (values from 0 to 100).
     *     @type \Google\Geo\Weather\V1\AirPressure $air_pressure
     *           The forecasted air pressure conditions.
     *     @type \Google\Geo\Weather\V1\Wind $wind
     *           The forecasted wind conditions.
     *     @type \Google\Geo\Weather\V1\Visibility $visibility
     *           The forecasted visibility.
     *     @type int $cloud_cover
     *           The forecasted percentage of the sky covered by clouds (values from 0 to
     *           100).
     *     @type \Google\Geo\Weather\V1\IceThickness $ice_thickness
     *           The forecasted ice thickness.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Google\Maps\Weather\V1\ForecastHour::initOnce();
        parent::__construct($data);
    }

    /**
     * The one hour interval (in UTC time) this forecast data is valid for (the
     * timestamps are rounded down to the closest hour).
     *
     * Generated from protobuf field <code>.google.type.Interval interval = 1;</code>
     * @return \Google\Type\Interval|null
     */
    public function getInterval()
    {
        return $this->interval;
    }

    public function hasInterval()
    {
        return isset($this->interval);
    }

    public function clearInterval()
    {
        unset($this->interval);
    }

    /**
     * The one hour interval (in UTC time) this forecast data is valid for (the
     * timestamps are rounded down to the closest hour).
     *
     * Generated from protobuf field <code>.google.type.Interval interval = 1;</code>
     * @param \Google\Type\Interval $var
     * @return $this
     */
    public function setInterval($var)
    {
        GPBUtil::checkMessage($var, \Google\Type\Interval::class);
        $this->interval = $var;

        return $this;
    }

    /**
     * The local date and time in the time zone of the location (civil time) which
     * this hourly forecast is calculated for. This field may be used for display
     * purposes on the client.
     * Note: this date will consist of the year, month, day, hour and offset from
     * UTC.
     *
     * Generated from protobuf field <code>.google.type.DateTime display_date_time = 2;</code>
     * @return \Google\Type\DateTime|null
     */
    public function getDisplayDateTime()
    {
        return $this->display_date_time;
    }

    public function hasDisplayDateTime()
    {
        return isset($this->display_date_time);
    }

    public function clearDisplayDateTime()
    {
        unset($this->display_date_time);
    }

    /**
     * The local date and time in the time zone of the location (civil time) which
     * this hourly forecast is calculated for. This field may be used for display
     * purposes on the client.
     * Note: this date will consist of the year, month, day, hour and offset from
     * UTC.
     *
     * Generated from protobuf field <code>.google.type.DateTime display_date_time = 2;</code>
     * @param \Google\Type\DateTime $var
     * @return $this
     */
    public function setDisplayDateTime($var)
    {
        GPBUtil::checkMessage($var, \Google\Type\DateTime::class);
        $this->display_date_time = $var;

        return $this;
    }

    /**
     * True if this hour is between the local sunrise (inclusive) and sunset
     * (exclusive) times. Otherwise, it is nighttime (between the sunset and the
     * next sunrise).
     * Note: this hour will be considered as daytime or nighttime if the interval
     * intersects with the local sunrise and sunset times respectively (e.g.: if
     * the interval is from 5am to 6am and sunrise is at 5:59am, then is_daytime
     * will be true).
     *
     * Generated from protobuf field <code>optional bool is_daytime = 3;</code>
     * @return bool
     */
    public function getIsDaytime()
    {
        return isset($this->is_daytime) ? $this->is_daytime : false;
    }

    public function hasIsDaytime()
    {
        return isset($this->is_daytime);
    }

    public function clearIsDaytime()
    {
        unset($this->is_daytime);
    }

    /**
     * True if this hour is between the local sunrise (inclusive) and sunset
     * (exclusive) times. Otherwise, it is nighttime (between the sunset and the
     * next sunrise).
     * Note: this hour will be considered as daytime or nighttime if the interval
     * intersects with the local sunrise and sunset times respectively (e.g.: if
     * the interval is from 5am to 6am and sunrise is at 5:59am, then is_daytime
     * will be true).
     *
     * Generated from protobuf field <code>optional bool is_daytime = 3;</code>
     * @param bool $var
     * @return $this
     */
    public function setIsDaytime($var)
    {
        GPBUtil::checkBool($var);
        $this->is_daytime = $var;

        return $this;
    }

    /**
     * The foreacasted weather condition.
     *
     * Generated from protobuf field <code>.google.maps.weather.v1.WeatherCondition weather_condition = 4;</code>
     * @return \Google\Geo\Weather\V1\WeatherCondition|null
     */
    public function getWeatherCondition()
    {
        return $this->weather_condition;
    }

    public function hasWeatherCondition()
    {
        return isset($this->weather_condition);
    }

    public function clearWeatherCondition()
    {
        unset($this->weather_condition);
    }

    /**
     * The foreacasted weather condition.
     *
     * Generated from protobuf field <code>.google.maps.weather.v1.WeatherCondition weather_condition = 4;</code>
     * @param \Google\Geo\Weather\V1\WeatherCondition $var
     * @return $this
     */
    public function setWeatherCondition($var)
    {
        GPBUtil::checkMessage($var, \Google\Geo\Weather\V1\WeatherCondition::class);
        $this->weather_condition = $var;

        return $this;
    }

    /**
     * The forecasted temperature.
     *
     * Generated from protobuf field <code>.google.maps.weather.v1.Temperature temperature = 5;</code>
     * @return \Google\Geo\Weather\V1\Temperature|null
     */
    public function getTemperature()
    {
        return $this->temperature;
    }

    public function hasTemperature()
    {
        return isset($this->temperature);
    }

    public function clearTemperature()
    {
        unset($this->temperature);
    }

    /**
     * The forecasted temperature.
     *
     * Generated from protobuf field <code>.google.maps.weather.v1.Temperature temperature = 5;</code>
     * @param \Google\Geo\Weather\V1\Temperature $var
     * @return $this
     */
    public function setTemperature($var)
    {
        GPBUtil::checkMessage($var, \Google\Geo\Weather\V1\Temperature::class);
        $this->temperature = $var;

        return $this;
    }

    /**
     * The measure of how the temperature will feel like at the requested
     * location.
     *
     * Generated from protobuf field <code>.google.maps.weather.v1.Temperature feels_like_temperature = 6;</code>
     * @return \Google\Geo\Weather\V1\Temperature|null
     */
    public function getFeelsLikeTemperature()
    {
        return $this->feels_like_temperature;
    }

    public function hasFeelsLikeTemperature()
    {
        return isset($this->feels_like_temperature);
    }

    public function clearFeelsLikeTemperature()
    {
        unset($this->feels_like_temperature);
    }

    /**
     * The measure of how the temperature will feel like at the requested
     * location.
     *
     * Generated from protobuf field <code>.google.maps.weather.v1.Temperature feels_like_temperature = 6;</code>
     * @param \Google\Geo\Weather\V1\Temperature $var
     * @return $this
     */
    public function setFeelsLikeTemperature($var)
    {
        GPBUtil::checkMessage($var, \Google\Geo\Weather\V1\Temperature::class);
        $this->feels_like_temperature = $var;

        return $this;
    }

    /**
     * The forecasted dew point temperature.
     *
     * Generated from protobuf field <code>.google.maps.weather.v1.Temperature dew_point = 7;</code>
     * @return \Google\Geo\Weather\V1\Temperature|null
     */
    public function getDewPoint()
    {
        return $this->dew_point;
    }

    public function hasDewPoint()
    {
        return isset($this->dew_point);
    }

    public function clearDewPoint()
    {
        unset($this->dew_point);
    }

    /**
     * The forecasted dew point temperature.
     *
     * Generated from protobuf field <code>.google.maps.weather.v1.Temperature dew_point = 7;</code>
     * @param \Google\Geo\Weather\V1\Temperature $var
     * @return $this
     */
    public function setDewPoint($var)
    {
        GPBUtil::checkMessage($var, \Google\Geo\Weather\V1\Temperature::class);
        $this->dew_point = $var;

        return $this;
    }

    /**
     * The forecasted heat index temperature.
     *
     * Generated from protobuf field <code>.google.maps.weather.v1.Temperature heat_index = 8;</code>
     * @return \Google\Geo\Weather\V1\Temperature|null
     */
    public function getHeatIndex()
    {
        return $this->heat_index;
    }

    public function hasHeatIndex()
    {
        return isset($this->heat_index);
    }

    public function clearHeatIndex()
    {
        unset($this->heat_index);
    }

    /**
     * The forecasted heat index temperature.
     *
     * Generated from protobuf field <code>.google.maps.weather.v1.Temperature heat_index = 8;</code>
     * @param \Google\Geo\Weather\V1\Temperature $var
     * @return $this
     */
    public function setHeatIndex($var)
    {
        GPBUtil::checkMessage($var, \Google\Geo\Weather\V1\Temperature::class);
        $this->heat_index = $var;

        return $this;
    }

    /**
     * The forecasted wind chill, air temperature exposed on the skin.
     *
     * Generated from protobuf field <code>.google.maps.weather.v1.Temperature wind_chill = 9;</code>
     * @return \Google\Geo\Weather\V1\Temperature|null
     */
    public function getWindChill()
    {
        return $this->wind_chill;
    }

    public function hasWindChill()
    {
        return isset($this->wind_chill);
    }

    public function clearWindChill()
    {
        unset($this->wind_chill);
    }

    /**
     * The forecasted wind chill, air temperature exposed on the skin.
     *
     * Generated from protobuf field <code>.google.maps.weather.v1.Temperature wind_chill = 9;</code>
     * @param \Google\Geo\Weather\V1\Temperature $var
     * @return $this
     */
    public function setWindChill($var)
    {
        GPBUtil::checkMessage($var, \Google\Geo\Weather\V1\Temperature::class);
        $this->wind_chill = $var;

        return $this;
    }

    /**
     * The forecasted wet bulb temperature, lowest temperature achievable by
     * evaporating water.
     *
     * Generated from protobuf field <code>.google.maps.weather.v1.Temperature wet_bulb_temperature = 10;</code>
     * @return \Google\Geo\Weather\V1\Temperature|null
     */
    public function getWetBulbTemperature()
    {
        return $this->wet_bulb_temperature;
    }

    public function hasWetBulbTemperature()
    {
        return isset($this->wet_bulb_temperature);
    }

    public function clearWetBulbTemperature()
    {
        unset($this->wet_bulb_temperature);
    }

    /**
     * The forecasted wet bulb temperature, lowest temperature achievable by
     * evaporating water.
     *
     * Generated from protobuf field <code>.google.maps.weather.v1.Temperature wet_bulb_temperature = 10;</code>
     * @param \Google\Geo\Weather\V1\Temperature $var
     * @return $this
     */
    public function setWetBulbTemperature($var)
    {
        GPBUtil::checkMessage($var, \Google\Geo\Weather\V1\Temperature::class);
        $this->wet_bulb_temperature = $var;

        return $this;
    }

    /**
     * The forecasted percent of relative humidity (values from 0 to 100).
     *
     * Generated from protobuf field <code>optional int32 relative_humidity = 11;</code>
     * @return int
     */
    public function getRelativeHumidity()
    {
        return isset($this->relative_humidity) ? $this->relative_humidity : 0;
    }

    public function hasRelativeHumidity()
    {
        return isset($this->relative_humidity);
    }

    public function clearRelativeHumidity()
    {
        unset($this->relative_humidity);
    }

    /**
     * The forecasted percent of relative humidity (values from 0 to 100).
     *
     * Generated from protobuf field <code>optional int32 relative_humidity = 11;</code>
     * @param int $var
     * @return $this
     */
    public function setRelativeHumidity($var)
    {
        GPBUtil::checkInt32($var);
        $this->relative_humidity = $var;

        return $this;
    }

    /**
     * The forecasted ultraviolet (UV) index.
     *
     * Generated from protobuf field <code>optional int32 uv_index = 12;</code>
     * @return int
     */
    public function getUvIndex()
    {
        return isset($this->uv_index) ? $this->uv_index : 0;
    }

    public function hasUvIndex()
    {
        return isset($this->uv_index);
    }

    public function clearUvIndex()
    {
        unset($this->uv_index);
    }

    /**
     * The forecasted ultraviolet (UV) index.
     *
     * Generated from protobuf field <code>optional int32 uv_index = 12;</code>
     * @param int $var
     * @return $this
     */
    public function setUvIndex($var)
    {
        GPBUtil::checkInt32($var);
        $this->uv_index = $var;

        return $this;
    }

    /**
     * The forecasted precipitation probability and amount of precipitation
     * accumulated over the last hour.
     *
     * Generated from protobuf field <code>.google.maps.weather.v1.Precipitation precipitation = 13;</code>
     * @return \Google\Geo\Weather\V1\Precipitation|null
     */
    public function getPrecipitation()
    {
        return $this->precipitation;
    }

    public function hasPrecipitation()
    {
        return isset($this->precipitation);
    }

    public function clearPrecipitation()
    {
        unset($this->precipitation);
    }

    /**
     * The forecasted precipitation probability and amount of precipitation
     * accumulated over the last hour.
     *
     * Generated from protobuf field <code>.google.maps.weather.v1.Precipitation precipitation = 13;</code>
     * @param \Google\Geo\Weather\V1\Precipitation $var
     * @return $this
     */
    public function setPrecipitation($var)
    {
        GPBUtil::checkMessage($var, \Google\Geo\Weather\V1\Precipitation::class);
        $this->precipitation = $var;

        return $this;
    }

    /**
     * The forecasted thunderstorm probability (values from 0 to 100).
     *
     * Generated from protobuf field <code>optional int32 thunderstorm_probability = 14;</code>
     * @return int
     */
    public function getThunderstormProbability()
    {
        return isset($this->thunderstorm_probability) ? $this->thunderstorm_probability : 0;
    }

    public function hasThunderstormProbability()
    {
        return isset($this->thunderstorm_probability);
    }

    public function clearThunderstormProbability()
    {
        unset($this->thunderstorm_probability);
    }

    /**
     * The forecasted thunderstorm probability (values from 0 to 100).
     *
     * Generated from protobuf field <code>optional int32 thunderstorm_probability = 14;</code>
     * @param int $var
     * @return $this
     */
    public function setThunderstormProbability($var)
    {
        GPBUtil::checkInt32($var);
        $this->thunderstorm_probability = $var;

        return $this;
    }

    /**
     * The forecasted air pressure conditions.
     *
     * Generated from protobuf field <code>.google.maps.weather.v1.AirPressure air_pressure = 15;</code>
     * @return \Google\Geo\Weather\V1\AirPressure|null
     */
    public function getAirPressure()
    {
        return $this->air_pressure;
    }

    public function hasAirPressure()
    {
        return isset($this->air_pressure);
    }

    public function clearAirPressure()
    {
        unset($this->air_pressure);
    }

    /**
     * The forecasted air pressure conditions.
     *
     * Generated from protobuf field <code>.google.maps.weather.v1.AirPressure air_pressure = 15;</code>
     * @param \Google\Geo\Weather\V1\AirPressure $var
     * @return $this
     */
    public function setAirPressure($var)
    {
        GPBUtil::checkMessage($var, \Google\Geo\Weather\V1\AirPressure::class);
        $this->air_pressure = $var;

        return $this;
    }

    /**
     * The forecasted wind conditions.
     *
     * Generated from protobuf field <code>.google.maps.weather.v1.Wind wind = 16;</code>
     * @return \Google\Geo\Weather\V1\Wind|null
     */
    public function getWind()
    {
        return $this->wind;
    }

    public function hasWind()
    {
        return isset($this->wind);
    }

    public function clearWind()
    {
        unset($this->wind);
    }

    /**
     * The forecasted wind conditions.
     *
     * Generated from protobuf field <code>.google.maps.weather.v1.Wind wind = 16;</code>
     * @param \Google\Geo\Weather\V1\Wind $var
     * @return $this
     */
    public function setWind($var)
    {
        GPBUtil::checkMessage($var, \Google\Geo\Weather\V1\Wind::class);
        $this->wind = $var;

        return $this;
    }

    /**
     * The forecasted visibility.
     *
     * Generated from protobuf field <code>.google.maps.weather.v1.Visibility visibility = 17;</code>
     * @return \Google\Geo\Weather\V1\Visibility|null
     */
    public function getVisibility()
    {
        return $this->visibility;
    }

    public function hasVisibility()
    {
        return isset($this->visibility);
    }

    public function clearVisibility()
    {
        unset($this->visibility);
    }

    /**
     * The forecasted visibility.
     *
     * Generated from protobuf field <code>.google.maps.weather.v1.Visibility visibility = 17;</code>
     * @param \Google\Geo\Weather\V1\Visibility $var
     * @return $this
     */
    public function setVisibility($var)
    {
        GPBUtil::checkMessage($var, \Google\Geo\Weather\V1\Visibility::class);
        $this->visibility = $var;

        return $this;
    }

    /**
     * The forecasted percentage of the sky covered by clouds (values from 0 to
     * 100).
     *
     * Generated from protobuf field <code>optional int32 cloud_cover = 18;</code>
     * @return int
     */
    public function getCloudCover()
    {
        return isset($this->cloud_cover) ? $this->cloud_cover : 0;
    }

    public function hasCloudCover()
    {
        return isset($this->cloud_cover);
    }

    public function clearCloudCover()
    {
        unset($this->cloud_cover);
    }

    /**
     * The forecasted percentage of the sky covered by clouds (values from 0 to
     * 100).
     *
     * Generated from protobuf field <code>optional int32 cloud_cover = 18;</code>
     * @param int $var
     * @return $this
     */
    public function setCloudCover($var)
    {
        GPBUtil::checkInt32($var);
        $this->cloud_cover = $var;

        return $this;
    }

    /**
     * The forecasted ice thickness.
     *
     * Generated from protobuf field <code>.google.maps.weather.v1.IceThickness ice_thickness = 19;</code>
     * @return \Google\Geo\Weather\V1\IceThickness|null
     */
    public function getIceThickness()
    {
        return $this->ice_thickness;
    }

    public function hasIceThickness()
    {
        return isset($this->ice_thickness);
    }

    public function clearIceThickness()
    {
        unset($this->ice_thickness);
    }

    /**
     * The forecasted ice thickness.
     *
     * Generated from protobuf field <code>.google.maps.weather.v1.IceThickness ice_thickness = 19;</code>
     * @param \Google\Geo\Weather\V1\IceThickness $var
     * @return $this
     */
    public function setIceThickness($var)
    {
        GPBUtil::checkMessage($var, \Google\Geo\Weather\V1\IceThickness::class);
        $this->ice_thickness = $var;

        return $this;
    }

}

