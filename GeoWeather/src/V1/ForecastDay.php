<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/maps/weather/v1/forecast_day.proto

namespace Google\Geo\Weather\V1;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Represents a daily forecast record at a given location.
 *
 * Generated from protobuf message <code>google.maps.weather.v1.ForecastDay</code>
 */
class ForecastDay extends \Google\Protobuf\Internal\Message
{
    /**
     * The UTC time interval when this forecasted day is starts (inclusive) and
     * ends (exclusive).
     * Note: a day starts at 7am and ends at 7am next day, local time.
     * For example: If the local time zone is UTC-7, then the interval will start
     * at the time `14:00:00.000Z` and end at the same hour the next day.
     *
     * Generated from protobuf field <code>.google.type.Interval interval = 1;</code>
     */
    protected $interval = null;
    /**
     * The local date in the time zone of the location (civil time) which this
     * daily forecast is calculated for. This field may be used for display
     * purposes on the client.
     *
     * Generated from protobuf field <code>.google.type.Date display_date = 2;</code>
     */
    protected $display_date = null;
    /**
     * The forecasted weather conditions for the daytime part of the day (7am to
     * 7pm local time).
     *
     * Generated from protobuf field <code>.google.maps.weather.v1.ForecastDayPart daytime_forecast = 3;</code>
     */
    protected $daytime_forecast = null;
    /**
     * The forecasted weather conditions for the nighttime part of the day (7pm to
     * 7am next day, local time).
     *
     * Generated from protobuf field <code>.google.maps.weather.v1.ForecastDayPart nighttime_forecast = 4;</code>
     */
    protected $nighttime_forecast = null;
    /**
     * The maximum (high) temperature throughout the day.
     *
     * Generated from protobuf field <code>.google.maps.weather.v1.Temperature max_temperature = 5;</code>
     */
    protected $max_temperature = null;
    /**
     * The minimum (low) temperature throughout the day.
     *
     * Generated from protobuf field <code>.google.maps.weather.v1.Temperature min_temperature = 6;</code>
     */
    protected $min_temperature = null;
    /**
     * The maximum (high) feels-like temperature throughout the day.
     *
     * Generated from protobuf field <code>.google.maps.weather.v1.Temperature feels_like_max_temperature = 7;</code>
     */
    protected $feels_like_max_temperature = null;
    /**
     * The minimum (low) feels-like temperature throughout the day.
     *
     * Generated from protobuf field <code>.google.maps.weather.v1.Temperature feels_like_min_temperature = 8;</code>
     */
    protected $feels_like_min_temperature = null;
    /**
     * The maximum heat index temperature throughout the day.
     *
     * Generated from protobuf field <code>.google.maps.weather.v1.Temperature max_heat_index = 11;</code>
     */
    protected $max_heat_index = null;
    /**
     * The events related to the sun (e.g. sunrise, sunset).
     *
     * Generated from protobuf field <code>.google.maps.weather.v1.SunEvents sun_events = 9;</code>
     */
    protected $sun_events = null;
    /**
     * The events related to the moon (e.g. moonrise, moonset).
     *
     * Generated from protobuf field <code>.google.maps.weather.v1.MoonEvents moon_events = 10;</code>
     */
    protected $moon_events = null;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type \Google\Type\Interval $interval
     *           The UTC time interval when this forecasted day is starts (inclusive) and
     *           ends (exclusive).
     *           Note: a day starts at 7am and ends at 7am next day, local time.
     *           For example: If the local time zone is UTC-7, then the interval will start
     *           at the time `14:00:00.000Z` and end at the same hour the next day.
     *     @type \Google\Type\Date $display_date
     *           The local date in the time zone of the location (civil time) which this
     *           daily forecast is calculated for. This field may be used for display
     *           purposes on the client.
     *     @type \Google\Geo\Weather\V1\ForecastDayPart $daytime_forecast
     *           The forecasted weather conditions for the daytime part of the day (7am to
     *           7pm local time).
     *     @type \Google\Geo\Weather\V1\ForecastDayPart $nighttime_forecast
     *           The forecasted weather conditions for the nighttime part of the day (7pm to
     *           7am next day, local time).
     *     @type \Google\Geo\Weather\V1\Temperature $max_temperature
     *           The maximum (high) temperature throughout the day.
     *     @type \Google\Geo\Weather\V1\Temperature $min_temperature
     *           The minimum (low) temperature throughout the day.
     *     @type \Google\Geo\Weather\V1\Temperature $feels_like_max_temperature
     *           The maximum (high) feels-like temperature throughout the day.
     *     @type \Google\Geo\Weather\V1\Temperature $feels_like_min_temperature
     *           The minimum (low) feels-like temperature throughout the day.
     *     @type \Google\Geo\Weather\V1\Temperature $max_heat_index
     *           The maximum heat index temperature throughout the day.
     *     @type \Google\Geo\Weather\V1\SunEvents $sun_events
     *           The events related to the sun (e.g. sunrise, sunset).
     *     @type \Google\Geo\Weather\V1\MoonEvents $moon_events
     *           The events related to the moon (e.g. moonrise, moonset).
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Google\Maps\Weather\V1\ForecastDay::initOnce();
        parent::__construct($data);
    }

    /**
     * The UTC time interval when this forecasted day is starts (inclusive) and
     * ends (exclusive).
     * Note: a day starts at 7am and ends at 7am next day, local time.
     * For example: If the local time zone is UTC-7, then the interval will start
     * at the time `14:00:00.000Z` and end at the same hour the next day.
     *
     * Generated from protobuf field <code>.google.type.Interval interval = 1;</code>
     * @return \Google\Type\Interval|null
     */
    public function getInterval()
    {
        return $this->interval;
    }

    public function hasInterval()
    {
        return isset($this->interval);
    }

    public function clearInterval()
    {
        unset($this->interval);
    }

    /**
     * The UTC time interval when this forecasted day is starts (inclusive) and
     * ends (exclusive).
     * Note: a day starts at 7am and ends at 7am next day, local time.
     * For example: If the local time zone is UTC-7, then the interval will start
     * at the time `14:00:00.000Z` and end at the same hour the next day.
     *
     * Generated from protobuf field <code>.google.type.Interval interval = 1;</code>
     * @param \Google\Type\Interval $var
     * @return $this
     */
    public function setInterval($var)
    {
        GPBUtil::checkMessage($var, \Google\Type\Interval::class);
        $this->interval = $var;

        return $this;
    }

    /**
     * The local date in the time zone of the location (civil time) which this
     * daily forecast is calculated for. This field may be used for display
     * purposes on the client.
     *
     * Generated from protobuf field <code>.google.type.Date display_date = 2;</code>
     * @return \Google\Type\Date|null
     */
    public function getDisplayDate()
    {
        return $this->display_date;
    }

    public function hasDisplayDate()
    {
        return isset($this->display_date);
    }

    public function clearDisplayDate()
    {
        unset($this->display_date);
    }

    /**
     * The local date in the time zone of the location (civil time) which this
     * daily forecast is calculated for. This field may be used for display
     * purposes on the client.
     *
     * Generated from protobuf field <code>.google.type.Date display_date = 2;</code>
     * @param \Google\Type\Date $var
     * @return $this
     */
    public function setDisplayDate($var)
    {
        GPBUtil::checkMessage($var, \Google\Type\Date::class);
        $this->display_date = $var;

        return $this;
    }

    /**
     * The forecasted weather conditions for the daytime part of the day (7am to
     * 7pm local time).
     *
     * Generated from protobuf field <code>.google.maps.weather.v1.ForecastDayPart daytime_forecast = 3;</code>
     * @return \Google\Geo\Weather\V1\ForecastDayPart|null
     */
    public function getDaytimeForecast()
    {
        return $this->daytime_forecast;
    }

    public function hasDaytimeForecast()
    {
        return isset($this->daytime_forecast);
    }

    public function clearDaytimeForecast()
    {
        unset($this->daytime_forecast);
    }

    /**
     * The forecasted weather conditions for the daytime part of the day (7am to
     * 7pm local time).
     *
     * Generated from protobuf field <code>.google.maps.weather.v1.ForecastDayPart daytime_forecast = 3;</code>
     * @param \Google\Geo\Weather\V1\ForecastDayPart $var
     * @return $this
     */
    public function setDaytimeForecast($var)
    {
        GPBUtil::checkMessage($var, \Google\Geo\Weather\V1\ForecastDayPart::class);
        $this->daytime_forecast = $var;

        return $this;
    }

    /**
     * The forecasted weather conditions for the nighttime part of the day (7pm to
     * 7am next day, local time).
     *
     * Generated from protobuf field <code>.google.maps.weather.v1.ForecastDayPart nighttime_forecast = 4;</code>
     * @return \Google\Geo\Weather\V1\ForecastDayPart|null
     */
    public function getNighttimeForecast()
    {
        return $this->nighttime_forecast;
    }

    public function hasNighttimeForecast()
    {
        return isset($this->nighttime_forecast);
    }

    public function clearNighttimeForecast()
    {
        unset($this->nighttime_forecast);
    }

    /**
     * The forecasted weather conditions for the nighttime part of the day (7pm to
     * 7am next day, local time).
     *
     * Generated from protobuf field <code>.google.maps.weather.v1.ForecastDayPart nighttime_forecast = 4;</code>
     * @param \Google\Geo\Weather\V1\ForecastDayPart $var
     * @return $this
     */
    public function setNighttimeForecast($var)
    {
        GPBUtil::checkMessage($var, \Google\Geo\Weather\V1\ForecastDayPart::class);
        $this->nighttime_forecast = $var;

        return $this;
    }

    /**
     * The maximum (high) temperature throughout the day.
     *
     * Generated from protobuf field <code>.google.maps.weather.v1.Temperature max_temperature = 5;</code>
     * @return \Google\Geo\Weather\V1\Temperature|null
     */
    public function getMaxTemperature()
    {
        return $this->max_temperature;
    }

    public function hasMaxTemperature()
    {
        return isset($this->max_temperature);
    }

    public function clearMaxTemperature()
    {
        unset($this->max_temperature);
    }

    /**
     * The maximum (high) temperature throughout the day.
     *
     * Generated from protobuf field <code>.google.maps.weather.v1.Temperature max_temperature = 5;</code>
     * @param \Google\Geo\Weather\V1\Temperature $var
     * @return $this
     */
    public function setMaxTemperature($var)
    {
        GPBUtil::checkMessage($var, \Google\Geo\Weather\V1\Temperature::class);
        $this->max_temperature = $var;

        return $this;
    }

    /**
     * The minimum (low) temperature throughout the day.
     *
     * Generated from protobuf field <code>.google.maps.weather.v1.Temperature min_temperature = 6;</code>
     * @return \Google\Geo\Weather\V1\Temperature|null
     */
    public function getMinTemperature()
    {
        return $this->min_temperature;
    }

    public function hasMinTemperature()
    {
        return isset($this->min_temperature);
    }

    public function clearMinTemperature()
    {
        unset($this->min_temperature);
    }

    /**
     * The minimum (low) temperature throughout the day.
     *
     * Generated from protobuf field <code>.google.maps.weather.v1.Temperature min_temperature = 6;</code>
     * @param \Google\Geo\Weather\V1\Temperature $var
     * @return $this
     */
    public function setMinTemperature($var)
    {
        GPBUtil::checkMessage($var, \Google\Geo\Weather\V1\Temperature::class);
        $this->min_temperature = $var;

        return $this;
    }

    /**
     * The maximum (high) feels-like temperature throughout the day.
     *
     * Generated from protobuf field <code>.google.maps.weather.v1.Temperature feels_like_max_temperature = 7;</code>
     * @return \Google\Geo\Weather\V1\Temperature|null
     */
    public function getFeelsLikeMaxTemperature()
    {
        return $this->feels_like_max_temperature;
    }

    public function hasFeelsLikeMaxTemperature()
    {
        return isset($this->feels_like_max_temperature);
    }

    public function clearFeelsLikeMaxTemperature()
    {
        unset($this->feels_like_max_temperature);
    }

    /**
     * The maximum (high) feels-like temperature throughout the day.
     *
     * Generated from protobuf field <code>.google.maps.weather.v1.Temperature feels_like_max_temperature = 7;</code>
     * @param \Google\Geo\Weather\V1\Temperature $var
     * @return $this
     */
    public function setFeelsLikeMaxTemperature($var)
    {
        GPBUtil::checkMessage($var, \Google\Geo\Weather\V1\Temperature::class);
        $this->feels_like_max_temperature = $var;

        return $this;
    }

    /**
     * The minimum (low) feels-like temperature throughout the day.
     *
     * Generated from protobuf field <code>.google.maps.weather.v1.Temperature feels_like_min_temperature = 8;</code>
     * @return \Google\Geo\Weather\V1\Temperature|null
     */
    public function getFeelsLikeMinTemperature()
    {
        return $this->feels_like_min_temperature;
    }

    public function hasFeelsLikeMinTemperature()
    {
        return isset($this->feels_like_min_temperature);
    }

    public function clearFeelsLikeMinTemperature()
    {
        unset($this->feels_like_min_temperature);
    }

    /**
     * The minimum (low) feels-like temperature throughout the day.
     *
     * Generated from protobuf field <code>.google.maps.weather.v1.Temperature feels_like_min_temperature = 8;</code>
     * @param \Google\Geo\Weather\V1\Temperature $var
     * @return $this
     */
    public function setFeelsLikeMinTemperature($var)
    {
        GPBUtil::checkMessage($var, \Google\Geo\Weather\V1\Temperature::class);
        $this->feels_like_min_temperature = $var;

        return $this;
    }

    /**
     * The maximum heat index temperature throughout the day.
     *
     * Generated from protobuf field <code>.google.maps.weather.v1.Temperature max_heat_index = 11;</code>
     * @return \Google\Geo\Weather\V1\Temperature|null
     */
    public function getMaxHeatIndex()
    {
        return $this->max_heat_index;
    }

    public function hasMaxHeatIndex()
    {
        return isset($this->max_heat_index);
    }

    public function clearMaxHeatIndex()
    {
        unset($this->max_heat_index);
    }

    /**
     * The maximum heat index temperature throughout the day.
     *
     * Generated from protobuf field <code>.google.maps.weather.v1.Temperature max_heat_index = 11;</code>
     * @param \Google\Geo\Weather\V1\Temperature $var
     * @return $this
     */
    public function setMaxHeatIndex($var)
    {
        GPBUtil::checkMessage($var, \Google\Geo\Weather\V1\Temperature::class);
        $this->max_heat_index = $var;

        return $this;
    }

    /**
     * The events related to the sun (e.g. sunrise, sunset).
     *
     * Generated from protobuf field <code>.google.maps.weather.v1.SunEvents sun_events = 9;</code>
     * @return \Google\Geo\Weather\V1\SunEvents|null
     */
    public function getSunEvents()
    {
        return $this->sun_events;
    }

    public function hasSunEvents()
    {
        return isset($this->sun_events);
    }

    public function clearSunEvents()
    {
        unset($this->sun_events);
    }

    /**
     * The events related to the sun (e.g. sunrise, sunset).
     *
     * Generated from protobuf field <code>.google.maps.weather.v1.SunEvents sun_events = 9;</code>
     * @param \Google\Geo\Weather\V1\SunEvents $var
     * @return $this
     */
    public function setSunEvents($var)
    {
        GPBUtil::checkMessage($var, \Google\Geo\Weather\V1\SunEvents::class);
        $this->sun_events = $var;

        return $this;
    }

    /**
     * The events related to the moon (e.g. moonrise, moonset).
     *
     * Generated from protobuf field <code>.google.maps.weather.v1.MoonEvents moon_events = 10;</code>
     * @return \Google\Geo\Weather\V1\MoonEvents|null
     */
    public function getMoonEvents()
    {
        return $this->moon_events;
    }

    public function hasMoonEvents()
    {
        return isset($this->moon_events);
    }

    public function clearMoonEvents()
    {
        unset($this->moon_events);
    }

    /**
     * The events related to the moon (e.g. moonrise, moonset).
     *
     * Generated from protobuf field <code>.google.maps.weather.v1.MoonEvents moon_events = 10;</code>
     * @param \Google\Geo\Weather\V1\MoonEvents $var
     * @return $this
     */
    public function setMoonEvents($var)
    {
        GPBUtil::checkMessage($var, \Google\Geo\Weather\V1\MoonEvents::class);
        $this->moon_events = $var;

        return $this;
    }

}

