<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/maps/weather/v1/forecast_day.proto

namespace Google\Geo\Weather\V1;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Represents a forecast record for a part of the day.
 *
 * Generated from protobuf message <code>google.maps.weather.v1.ForecastDayPart</code>
 */
class ForecastDayPart extends \Google\Protobuf\Internal\Message
{
    /**
     * The UTC date and time when this part of the day starts (inclusive) and ends
     * (exclusive).
     * Note: a part of a day starts at 7am and ends at 7pm the same day, local
     * time. For example: If the local time zone is UTC-7, then the daytime
     * interval will start at the time `14:00:00.000Z` and end at `02:00:00.000Z`
     * the next day and the nighttime interval will start at `02:00:00.000Z` the
     * next day and end at `14:00:00.000Z` that same day.
     *
     * Generated from protobuf field <code>.google.type.Interval interval = 1;</code>
     */
    protected $interval = null;
    /**
     * The forecasted weather condition.
     *
     * Generated from protobuf field <code>.google.maps.weather.v1.WeatherCondition weather_condition = 2;</code>
     */
    protected $weather_condition = null;
    /**
     * The forecasted percent of relative humidity (values from 0 to 100).
     *
     * Generated from protobuf field <code>optional int32 relative_humidity = 3;</code>
     */
    protected $relative_humidity = null;
    /**
     * The maximum forecasted ultraviolet (UV) index.
     *
     * Generated from protobuf field <code>optional int32 uv_index = 4;</code>
     */
    protected $uv_index = null;
    /**
     * The forecasted precipitation.
     *
     * Generated from protobuf field <code>.google.maps.weather.v1.Precipitation precipitation = 5;</code>
     */
    protected $precipitation = null;
    /**
     * The average thunderstorm probability.
     *
     * Generated from protobuf field <code>optional int32 thunderstorm_probability = 6;</code>
     */
    protected $thunderstorm_probability = null;
    /**
     * The average wind direction and maximum speed and gust.
     *
     * Generated from protobuf field <code>.google.maps.weather.v1.Wind wind = 7;</code>
     */
    protected $wind = null;
    /**
     * Average cloud cover percent.
     *
     * Generated from protobuf field <code>optional int32 cloud_cover = 8;</code>
     */
    protected $cloud_cover = null;
    /**
     * The accumulated amount of ice for the part of the day.
     *
     * Generated from protobuf field <code>.google.maps.weather.v1.IceThickness ice_thickness = 9;</code>
     */
    protected $ice_thickness = null;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type \Google\Type\Interval $interval
     *           The UTC date and time when this part of the day starts (inclusive) and ends
     *           (exclusive).
     *           Note: a part of a day starts at 7am and ends at 7pm the same day, local
     *           time. For example: If the local time zone is UTC-7, then the daytime
     *           interval will start at the time `14:00:00.000Z` and end at `02:00:00.000Z`
     *           the next day and the nighttime interval will start at `02:00:00.000Z` the
     *           next day and end at `14:00:00.000Z` that same day.
     *     @type \Google\Geo\Weather\V1\WeatherCondition $weather_condition
     *           The forecasted weather condition.
     *     @type int $relative_humidity
     *           The forecasted percent of relative humidity (values from 0 to 100).
     *     @type int $uv_index
     *           The maximum forecasted ultraviolet (UV) index.
     *     @type \Google\Geo\Weather\V1\Precipitation $precipitation
     *           The forecasted precipitation.
     *     @type int $thunderstorm_probability
     *           The average thunderstorm probability.
     *     @type \Google\Geo\Weather\V1\Wind $wind
     *           The average wind direction and maximum speed and gust.
     *     @type int $cloud_cover
     *           Average cloud cover percent.
     *     @type \Google\Geo\Weather\V1\IceThickness $ice_thickness
     *           The accumulated amount of ice for the part of the day.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Google\Maps\Weather\V1\ForecastDay::initOnce();
        parent::__construct($data);
    }

    /**
     * The UTC date and time when this part of the day starts (inclusive) and ends
     * (exclusive).
     * Note: a part of a day starts at 7am and ends at 7pm the same day, local
     * time. For example: If the local time zone is UTC-7, then the daytime
     * interval will start at the time `14:00:00.000Z` and end at `02:00:00.000Z`
     * the next day and the nighttime interval will start at `02:00:00.000Z` the
     * next day and end at `14:00:00.000Z` that same day.
     *
     * Generated from protobuf field <code>.google.type.Interval interval = 1;</code>
     * @return \Google\Type\Interval|null
     */
    public function getInterval()
    {
        return $this->interval;
    }

    public function hasInterval()
    {
        return isset($this->interval);
    }

    public function clearInterval()
    {
        unset($this->interval);
    }

    /**
     * The UTC date and time when this part of the day starts (inclusive) and ends
     * (exclusive).
     * Note: a part of a day starts at 7am and ends at 7pm the same day, local
     * time. For example: If the local time zone is UTC-7, then the daytime
     * interval will start at the time `14:00:00.000Z` and end at `02:00:00.000Z`
     * the next day and the nighttime interval will start at `02:00:00.000Z` the
     * next day and end at `14:00:00.000Z` that same day.
     *
     * Generated from protobuf field <code>.google.type.Interval interval = 1;</code>
     * @param \Google\Type\Interval $var
     * @return $this
     */
    public function setInterval($var)
    {
        GPBUtil::checkMessage($var, \Google\Type\Interval::class);
        $this->interval = $var;

        return $this;
    }

    /**
     * The forecasted weather condition.
     *
     * Generated from protobuf field <code>.google.maps.weather.v1.WeatherCondition weather_condition = 2;</code>
     * @return \Google\Geo\Weather\V1\WeatherCondition|null
     */
    public function getWeatherCondition()
    {
        return $this->weather_condition;
    }

    public function hasWeatherCondition()
    {
        return isset($this->weather_condition);
    }

    public function clearWeatherCondition()
    {
        unset($this->weather_condition);
    }

    /**
     * The forecasted weather condition.
     *
     * Generated from protobuf field <code>.google.maps.weather.v1.WeatherCondition weather_condition = 2;</code>
     * @param \Google\Geo\Weather\V1\WeatherCondition $var
     * @return $this
     */
    public function setWeatherCondition($var)
    {
        GPBUtil::checkMessage($var, \Google\Geo\Weather\V1\WeatherCondition::class);
        $this->weather_condition = $var;

        return $this;
    }

    /**
     * The forecasted percent of relative humidity (values from 0 to 100).
     *
     * Generated from protobuf field <code>optional int32 relative_humidity = 3;</code>
     * @return int
     */
    public function getRelativeHumidity()
    {
        return isset($this->relative_humidity) ? $this->relative_humidity : 0;
    }

    public function hasRelativeHumidity()
    {
        return isset($this->relative_humidity);
    }

    public function clearRelativeHumidity()
    {
        unset($this->relative_humidity);
    }

    /**
     * The forecasted percent of relative humidity (values from 0 to 100).
     *
     * Generated from protobuf field <code>optional int32 relative_humidity = 3;</code>
     * @param int $var
     * @return $this
     */
    public function setRelativeHumidity($var)
    {
        GPBUtil::checkInt32($var);
        $this->relative_humidity = $var;

        return $this;
    }

    /**
     * The maximum forecasted ultraviolet (UV) index.
     *
     * Generated from protobuf field <code>optional int32 uv_index = 4;</code>
     * @return int
     */
    public function getUvIndex()
    {
        return isset($this->uv_index) ? $this->uv_index : 0;
    }

    public function hasUvIndex()
    {
        return isset($this->uv_index);
    }

    public function clearUvIndex()
    {
        unset($this->uv_index);
    }

    /**
     * The maximum forecasted ultraviolet (UV) index.
     *
     * Generated from protobuf field <code>optional int32 uv_index = 4;</code>
     * @param int $var
     * @return $this
     */
    public function setUvIndex($var)
    {
        GPBUtil::checkInt32($var);
        $this->uv_index = $var;

        return $this;
    }

    /**
     * The forecasted precipitation.
     *
     * Generated from protobuf field <code>.google.maps.weather.v1.Precipitation precipitation = 5;</code>
     * @return \Google\Geo\Weather\V1\Precipitation|null
     */
    public function getPrecipitation()
    {
        return $this->precipitation;
    }

    public function hasPrecipitation()
    {
        return isset($this->precipitation);
    }

    public function clearPrecipitation()
    {
        unset($this->precipitation);
    }

    /**
     * The forecasted precipitation.
     *
     * Generated from protobuf field <code>.google.maps.weather.v1.Precipitation precipitation = 5;</code>
     * @param \Google\Geo\Weather\V1\Precipitation $var
     * @return $this
     */
    public function setPrecipitation($var)
    {
        GPBUtil::checkMessage($var, \Google\Geo\Weather\V1\Precipitation::class);
        $this->precipitation = $var;

        return $this;
    }

    /**
     * The average thunderstorm probability.
     *
     * Generated from protobuf field <code>optional int32 thunderstorm_probability = 6;</code>
     * @return int
     */
    public function getThunderstormProbability()
    {
        return isset($this->thunderstorm_probability) ? $this->thunderstorm_probability : 0;
    }

    public function hasThunderstormProbability()
    {
        return isset($this->thunderstorm_probability);
    }

    public function clearThunderstormProbability()
    {
        unset($this->thunderstorm_probability);
    }

    /**
     * The average thunderstorm probability.
     *
     * Generated from protobuf field <code>optional int32 thunderstorm_probability = 6;</code>
     * @param int $var
     * @return $this
     */
    public function setThunderstormProbability($var)
    {
        GPBUtil::checkInt32($var);
        $this->thunderstorm_probability = $var;

        return $this;
    }

    /**
     * The average wind direction and maximum speed and gust.
     *
     * Generated from protobuf field <code>.google.maps.weather.v1.Wind wind = 7;</code>
     * @return \Google\Geo\Weather\V1\Wind|null
     */
    public function getWind()
    {
        return $this->wind;
    }

    public function hasWind()
    {
        return isset($this->wind);
    }

    public function clearWind()
    {
        unset($this->wind);
    }

    /**
     * The average wind direction and maximum speed and gust.
     *
     * Generated from protobuf field <code>.google.maps.weather.v1.Wind wind = 7;</code>
     * @param \Google\Geo\Weather\V1\Wind $var
     * @return $this
     */
    public function setWind($var)
    {
        GPBUtil::checkMessage($var, \Google\Geo\Weather\V1\Wind::class);
        $this->wind = $var;

        return $this;
    }

    /**
     * Average cloud cover percent.
     *
     * Generated from protobuf field <code>optional int32 cloud_cover = 8;</code>
     * @return int
     */
    public function getCloudCover()
    {
        return isset($this->cloud_cover) ? $this->cloud_cover : 0;
    }

    public function hasCloudCover()
    {
        return isset($this->cloud_cover);
    }

    public function clearCloudCover()
    {
        unset($this->cloud_cover);
    }

    /**
     * Average cloud cover percent.
     *
     * Generated from protobuf field <code>optional int32 cloud_cover = 8;</code>
     * @param int $var
     * @return $this
     */
    public function setCloudCover($var)
    {
        GPBUtil::checkInt32($var);
        $this->cloud_cover = $var;

        return $this;
    }

    /**
     * The accumulated amount of ice for the part of the day.
     *
     * Generated from protobuf field <code>.google.maps.weather.v1.IceThickness ice_thickness = 9;</code>
     * @return \Google\Geo\Weather\V1\IceThickness|null
     */
    public function getIceThickness()
    {
        return $this->ice_thickness;
    }

    public function hasIceThickness()
    {
        return isset($this->ice_thickness);
    }

    public function clearIceThickness()
    {
        unset($this->ice_thickness);
    }

    /**
     * The accumulated amount of ice for the part of the day.
     *
     * Generated from protobuf field <code>.google.maps.weather.v1.IceThickness ice_thickness = 9;</code>
     * @param \Google\Geo\Weather\V1\IceThickness $var
     * @return $this
     */
    public function setIceThickness($var)
    {
        GPBUtil::checkMessage($var, \Google\Geo\Weather\V1\IceThickness::class);
        $this->ice_thickness = $var;

        return $this;
    }

}

