<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/cloud/compute/v1/compute.proto

namespace Google\Cloud\Compute\V1;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * The status of one Interconnect in the group. The order is arbitrary.
 *
 * Generated from protobuf message <code>google.cloud.compute.v1.InterconnectGroupsOperationalStatusInterconnectStatus</code>
 */
class InterconnectGroupsOperationalStatusInterconnectStatus extends \Google\Protobuf\Internal\Message
{
    /**
     * Whether the Interconnect is enabled.
     *
     * Generated from protobuf field <code>optional bool admin_enabled = 445675089;</code>
     */
    private $admin_enabled = null;
    /**
     * The diagnostics of the Interconnect, as returned by the existing get-diagnostics method.
     *
     * Generated from protobuf field <code>optional .google.cloud.compute.v1.InterconnectDiagnostics diagnostics = 333355436;</code>
     */
    private $diagnostics = null;
    /**
     * The URL of the Interconnect being described.
     *
     * Generated from protobuf field <code>optional string interconnect = 224601230;</code>
     */
    private $interconnect = null;
    /**
     * Whether this interconnect is participating in the redundant configuration.
     * Check the IsActive enum for the list of possible values.
     *
     * Generated from protobuf field <code>optional string is_active = 114830267;</code>
     */
    private $is_active = null;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type bool $admin_enabled
     *           Whether the Interconnect is enabled.
     *     @type \Google\Cloud\Compute\V1\InterconnectDiagnostics $diagnostics
     *           The diagnostics of the Interconnect, as returned by the existing get-diagnostics method.
     *     @type string $interconnect
     *           The URL of the Interconnect being described.
     *     @type string $is_active
     *           Whether this interconnect is participating in the redundant configuration.
     *           Check the IsActive enum for the list of possible values.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Google\Cloud\Compute\V1\Compute::initOnce();
        parent::__construct($data);
    }

    /**
     * Whether the Interconnect is enabled.
     *
     * Generated from protobuf field <code>optional bool admin_enabled = 445675089;</code>
     * @return bool
     */
    public function getAdminEnabled()
    {
        return isset($this->admin_enabled) ? $this->admin_enabled : false;
    }

    public function hasAdminEnabled()
    {
        return isset($this->admin_enabled);
    }

    public function clearAdminEnabled()
    {
        unset($this->admin_enabled);
    }

    /**
     * Whether the Interconnect is enabled.
     *
     * Generated from protobuf field <code>optional bool admin_enabled = 445675089;</code>
     * @param bool $var
     * @return $this
     */
    public function setAdminEnabled($var)
    {
        GPBUtil::checkBool($var);
        $this->admin_enabled = $var;

        return $this;
    }

    /**
     * The diagnostics of the Interconnect, as returned by the existing get-diagnostics method.
     *
     * Generated from protobuf field <code>optional .google.cloud.compute.v1.InterconnectDiagnostics diagnostics = 333355436;</code>
     * @return \Google\Cloud\Compute\V1\InterconnectDiagnostics|null
     */
    public function getDiagnostics()
    {
        return $this->diagnostics;
    }

    public function hasDiagnostics()
    {
        return isset($this->diagnostics);
    }

    public function clearDiagnostics()
    {
        unset($this->diagnostics);
    }

    /**
     * The diagnostics of the Interconnect, as returned by the existing get-diagnostics method.
     *
     * Generated from protobuf field <code>optional .google.cloud.compute.v1.InterconnectDiagnostics diagnostics = 333355436;</code>
     * @param \Google\Cloud\Compute\V1\InterconnectDiagnostics $var
     * @return $this
     */
    public function setDiagnostics($var)
    {
        GPBUtil::checkMessage($var, \Google\Cloud\Compute\V1\InterconnectDiagnostics::class);
        $this->diagnostics = $var;

        return $this;
    }

    /**
     * The URL of the Interconnect being described.
     *
     * Generated from protobuf field <code>optional string interconnect = 224601230;</code>
     * @return string
     */
    public function getInterconnect()
    {
        return isset($this->interconnect) ? $this->interconnect : '';
    }

    public function hasInterconnect()
    {
        return isset($this->interconnect);
    }

    public function clearInterconnect()
    {
        unset($this->interconnect);
    }

    /**
     * The URL of the Interconnect being described.
     *
     * Generated from protobuf field <code>optional string interconnect = 224601230;</code>
     * @param string $var
     * @return $this
     */
    public function setInterconnect($var)
    {
        GPBUtil::checkString($var, True);
        $this->interconnect = $var;

        return $this;
    }

    /**
     * Whether this interconnect is participating in the redundant configuration.
     * Check the IsActive enum for the list of possible values.
     *
     * Generated from protobuf field <code>optional string is_active = 114830267;</code>
     * @return string
     */
    public function getIsActive()
    {
        return isset($this->is_active) ? $this->is_active : '';
    }

    public function hasIsActive()
    {
        return isset($this->is_active);
    }

    public function clearIsActive()
    {
        unset($this->is_active);
    }

    /**
     * Whether this interconnect is participating in the redundant configuration.
     * Check the IsActive enum for the list of possible values.
     *
     * Generated from protobuf field <code>optional string is_active = 114830267;</code>
     * @param string $var
     * @return $this
     */
    public function setIsActive($var)
    {
        GPBUtil::checkString($var, True);
        $this->is_active = $var;

        return $this;
    }

}

