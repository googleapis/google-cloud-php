<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/cloud/compute/v1/compute.proto

namespace Google\Cloud\Compute\V1;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 *
 * Generated from protobuf message <code>google.cloud.compute.v1.DiskAsyncReplication</code>
 */
class DiskAsyncReplication extends \Google\Protobuf\Internal\Message
{
    /**
     * [Output Only] URL of the DiskConsistencyGroupPolicy if replication was started on the disk as a member of a group.
     *
     * Generated from protobuf field <code>optional string consistency_group_policy = 1991097;</code>
     */
    private $consistency_group_policy = null;
    /**
     * [Output Only] ID of the DiskConsistencyGroupPolicy if replication was started on the disk as a member of a group.
     *
     * Generated from protobuf field <code>optional string consistency_group_policy_id = 261065057;</code>
     */
    private $consistency_group_policy_id = null;
    /**
     * The other disk asynchronously replicated to or from the current disk. You can provide this as a partial or full URL to the resource. For example, the following are valid values: - https://www.googleapis.com/compute/v1/projects/project/zones/zone /disks/disk - projects/project/zones/zone/disks/disk - zones/zone/disks/disk 
     *
     * Generated from protobuf field <code>optional string disk = 3083677;</code>
     */
    private $disk = null;
    /**
     * [Output Only] The unique ID of the other disk asynchronously replicated to or from the current disk. This value identifies the exact disk that was used to create this replication. For example, if you started replicating the persistent disk from a disk that was later deleted and recreated under the same name, the disk ID would identify the exact version of the disk that was used.
     *
     * Generated from protobuf field <code>optional string disk_id = 60990205;</code>
     */
    private $disk_id = null;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $consistency_group_policy
     *           [Output Only] URL of the DiskConsistencyGroupPolicy if replication was started on the disk as a member of a group.
     *     @type string $consistency_group_policy_id
     *           [Output Only] ID of the DiskConsistencyGroupPolicy if replication was started on the disk as a member of a group.
     *     @type string $disk
     *           The other disk asynchronously replicated to or from the current disk. You can provide this as a partial or full URL to the resource. For example, the following are valid values: - https://www.googleapis.com/compute/v1/projects/project/zones/zone /disks/disk - projects/project/zones/zone/disks/disk - zones/zone/disks/disk 
     *     @type string $disk_id
     *           [Output Only] The unique ID of the other disk asynchronously replicated to or from the current disk. This value identifies the exact disk that was used to create this replication. For example, if you started replicating the persistent disk from a disk that was later deleted and recreated under the same name, the disk ID would identify the exact version of the disk that was used.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Google\Cloud\Compute\V1\Compute::initOnce();
        parent::__construct($data);
    }

    /**
     * [Output Only] URL of the DiskConsistencyGroupPolicy if replication was started on the disk as a member of a group.
     *
     * Generated from protobuf field <code>optional string consistency_group_policy = 1991097;</code>
     * @return string
     */
    public function getConsistencyGroupPolicy()
    {
        return isset($this->consistency_group_policy) ? $this->consistency_group_policy : '';
    }

    public function hasConsistencyGroupPolicy()
    {
        return isset($this->consistency_group_policy);
    }

    public function clearConsistencyGroupPolicy()
    {
        unset($this->consistency_group_policy);
    }

    /**
     * [Output Only] URL of the DiskConsistencyGroupPolicy if replication was started on the disk as a member of a group.
     *
     * Generated from protobuf field <code>optional string consistency_group_policy = 1991097;</code>
     * @param string $var
     * @return $this
     */
    public function setConsistencyGroupPolicy($var)
    {
        GPBUtil::checkString($var, True);
        $this->consistency_group_policy = $var;

        return $this;
    }

    /**
     * [Output Only] ID of the DiskConsistencyGroupPolicy if replication was started on the disk as a member of a group.
     *
     * Generated from protobuf field <code>optional string consistency_group_policy_id = 261065057;</code>
     * @return string
     */
    public function getConsistencyGroupPolicyId()
    {
        return isset($this->consistency_group_policy_id) ? $this->consistency_group_policy_id : '';
    }

    public function hasConsistencyGroupPolicyId()
    {
        return isset($this->consistency_group_policy_id);
    }

    public function clearConsistencyGroupPolicyId()
    {
        unset($this->consistency_group_policy_id);
    }

    /**
     * [Output Only] ID of the DiskConsistencyGroupPolicy if replication was started on the disk as a member of a group.
     *
     * Generated from protobuf field <code>optional string consistency_group_policy_id = 261065057;</code>
     * @param string $var
     * @return $this
     */
    public function setConsistencyGroupPolicyId($var)
    {
        GPBUtil::checkString($var, True);
        $this->consistency_group_policy_id = $var;

        return $this;
    }

    /**
     * The other disk asynchronously replicated to or from the current disk. You can provide this as a partial or full URL to the resource. For example, the following are valid values: - https://www.googleapis.com/compute/v1/projects/project/zones/zone /disks/disk - projects/project/zones/zone/disks/disk - zones/zone/disks/disk 
     *
     * Generated from protobuf field <code>optional string disk = 3083677;</code>
     * @return string
     */
    public function getDisk()
    {
        return isset($this->disk) ? $this->disk : '';
    }

    public function hasDisk()
    {
        return isset($this->disk);
    }

    public function clearDisk()
    {
        unset($this->disk);
    }

    /**
     * The other disk asynchronously replicated to or from the current disk. You can provide this as a partial or full URL to the resource. For example, the following are valid values: - https://www.googleapis.com/compute/v1/projects/project/zones/zone /disks/disk - projects/project/zones/zone/disks/disk - zones/zone/disks/disk 
     *
     * Generated from protobuf field <code>optional string disk = 3083677;</code>
     * @param string $var
     * @return $this
     */
    public function setDisk($var)
    {
        GPBUtil::checkString($var, True);
        $this->disk = $var;

        return $this;
    }

    /**
     * [Output Only] The unique ID of the other disk asynchronously replicated to or from the current disk. This value identifies the exact disk that was used to create this replication. For example, if you started replicating the persistent disk from a disk that was later deleted and recreated under the same name, the disk ID would identify the exact version of the disk that was used.
     *
     * Generated from protobuf field <code>optional string disk_id = 60990205;</code>
     * @return string
     */
    public function getDiskId()
    {
        return isset($this->disk_id) ? $this->disk_id : '';
    }

    public function hasDiskId()
    {
        return isset($this->disk_id);
    }

    public function clearDiskId()
    {
        unset($this->disk_id);
    }

    /**
     * [Output Only] The unique ID of the other disk asynchronously replicated to or from the current disk. This value identifies the exact disk that was used to create this replication. For example, if you started replicating the persistent disk from a disk that was later deleted and recreated under the same name, the disk ID would identify the exact version of the disk that was used.
     *
     * Generated from protobuf field <code>optional string disk_id = 60990205;</code>
     * @param string $var
     * @return $this
     */
    public function setDiskId($var)
    {
        GPBUtil::checkString($var, True);
        $this->disk_id = $var;

        return $this;
    }

}

