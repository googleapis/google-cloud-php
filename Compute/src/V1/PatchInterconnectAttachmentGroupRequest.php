<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/cloud/compute/v1/compute.proto

namespace Google\Cloud\Compute\V1;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * A request message for InterconnectAttachmentGroups.Patch. See the method description for details.
 *
 * Generated from protobuf message <code>google.cloud.compute.v1.PatchInterconnectAttachmentGroupRequest</code>
 */
class PatchInterconnectAttachmentGroupRequest extends \Google\Protobuf\Internal\Message
{
    /**
     * Name of the InterconnectAttachmentGroup resource to patch.
     *
     * Generated from protobuf field <code>string interconnect_attachment_group = 75905012 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    private $interconnect_attachment_group = '';
    /**
     * The body resource for this request
     *
     * Generated from protobuf field <code>.google.cloud.compute.v1.InterconnectAttachmentGroup interconnect_attachment_group_resource = 9990137 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    private $interconnect_attachment_group_resource = null;
    /**
     * Project ID for this request.
     *
     * Generated from protobuf field <code>string project = 227560217 [(.google.api.field_behavior) = REQUIRED, (.google.cloud.operation_request_field) = "project"];</code>
     */
    private $project = '';
    /**
     * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000). end_interface: MixerMutationRequestBuilder
     *
     * Generated from protobuf field <code>optional string request_id = 37109963;</code>
     */
    private $request_id = null;
    /**
     * The list of fields to update.
     *
     * Generated from protobuf field <code>optional string update_mask = 500079778;</code>
     */
    private $update_mask = null;

    /**
     * @param string                                               $project                             Project ID for this request.
     * @param string                                               $interconnectAttachmentGroup         Name of the InterconnectAttachmentGroup resource to patch.
     * @param \Google\Cloud\Compute\V1\InterconnectAttachmentGroup $interconnectAttachmentGroupResource The body resource for this request
     *
     * @return \Google\Cloud\Compute\V1\PatchInterconnectAttachmentGroupRequest
     *
     * @experimental
     */
    public static function build(string $project, string $interconnectAttachmentGroup, \Google\Cloud\Compute\V1\InterconnectAttachmentGroup $interconnectAttachmentGroupResource): self
    {
        return (new self())
            ->setProject($project)
            ->setInterconnectAttachmentGroup($interconnectAttachmentGroup)
            ->setInterconnectAttachmentGroupResource($interconnectAttachmentGroupResource);
    }

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $interconnect_attachment_group
     *           Name of the InterconnectAttachmentGroup resource to patch.
     *     @type \Google\Cloud\Compute\V1\InterconnectAttachmentGroup $interconnect_attachment_group_resource
     *           The body resource for this request
     *     @type string $project
     *           Project ID for this request.
     *     @type string $request_id
     *           An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000). end_interface: MixerMutationRequestBuilder
     *     @type string $update_mask
     *           The list of fields to update.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Google\Cloud\Compute\V1\Compute::initOnce();
        parent::__construct($data);
    }

    /**
     * Name of the InterconnectAttachmentGroup resource to patch.
     *
     * Generated from protobuf field <code>string interconnect_attachment_group = 75905012 [(.google.api.field_behavior) = REQUIRED];</code>
     * @return string
     */
    public function getInterconnectAttachmentGroup()
    {
        return $this->interconnect_attachment_group;
    }

    /**
     * Name of the InterconnectAttachmentGroup resource to patch.
     *
     * Generated from protobuf field <code>string interconnect_attachment_group = 75905012 [(.google.api.field_behavior) = REQUIRED];</code>
     * @param string $var
     * @return $this
     */
    public function setInterconnectAttachmentGroup($var)
    {
        GPBUtil::checkString($var, True);
        $this->interconnect_attachment_group = $var;

        return $this;
    }

    /**
     * The body resource for this request
     *
     * Generated from protobuf field <code>.google.cloud.compute.v1.InterconnectAttachmentGroup interconnect_attachment_group_resource = 9990137 [(.google.api.field_behavior) = REQUIRED];</code>
     * @return \Google\Cloud\Compute\V1\InterconnectAttachmentGroup|null
     */
    public function getInterconnectAttachmentGroupResource()
    {
        return $this->interconnect_attachment_group_resource;
    }

    public function hasInterconnectAttachmentGroupResource()
    {
        return isset($this->interconnect_attachment_group_resource);
    }

    public function clearInterconnectAttachmentGroupResource()
    {
        unset($this->interconnect_attachment_group_resource);
    }

    /**
     * The body resource for this request
     *
     * Generated from protobuf field <code>.google.cloud.compute.v1.InterconnectAttachmentGroup interconnect_attachment_group_resource = 9990137 [(.google.api.field_behavior) = REQUIRED];</code>
     * @param \Google\Cloud\Compute\V1\InterconnectAttachmentGroup $var
     * @return $this
     */
    public function setInterconnectAttachmentGroupResource($var)
    {
        GPBUtil::checkMessage($var, \Google\Cloud\Compute\V1\InterconnectAttachmentGroup::class);
        $this->interconnect_attachment_group_resource = $var;

        return $this;
    }

    /**
     * Project ID for this request.
     *
     * Generated from protobuf field <code>string project = 227560217 [(.google.api.field_behavior) = REQUIRED, (.google.cloud.operation_request_field) = "project"];</code>
     * @return string
     */
    public function getProject()
    {
        return $this->project;
    }

    /**
     * Project ID for this request.
     *
     * Generated from protobuf field <code>string project = 227560217 [(.google.api.field_behavior) = REQUIRED, (.google.cloud.operation_request_field) = "project"];</code>
     * @param string $var
     * @return $this
     */
    public function setProject($var)
    {
        GPBUtil::checkString($var, True);
        $this->project = $var;

        return $this;
    }

    /**
     * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000). end_interface: MixerMutationRequestBuilder
     *
     * Generated from protobuf field <code>optional string request_id = 37109963;</code>
     * @return string
     */
    public function getRequestId()
    {
        return isset($this->request_id) ? $this->request_id : '';
    }

    public function hasRequestId()
    {
        return isset($this->request_id);
    }

    public function clearRequestId()
    {
        unset($this->request_id);
    }

    /**
     * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000). end_interface: MixerMutationRequestBuilder
     *
     * Generated from protobuf field <code>optional string request_id = 37109963;</code>
     * @param string $var
     * @return $this
     */
    public function setRequestId($var)
    {
        GPBUtil::checkString($var, True);
        $this->request_id = $var;

        return $this;
    }

    /**
     * The list of fields to update.
     *
     * Generated from protobuf field <code>optional string update_mask = 500079778;</code>
     * @return string
     */
    public function getUpdateMask()
    {
        return isset($this->update_mask) ? $this->update_mask : '';
    }

    public function hasUpdateMask()
    {
        return isset($this->update_mask);
    }

    public function clearUpdateMask()
    {
        unset($this->update_mask);
    }

    /**
     * The list of fields to update.
     *
     * Generated from protobuf field <code>optional string update_mask = 500079778;</code>
     * @param string $var
     * @return $this
     */
    public function setUpdateMask($var)
    {
        GPBUtil::checkString($var, True);
        $this->update_mask = $var;

        return $this;
    }

}

