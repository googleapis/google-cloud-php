<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/cloud/compute/v1/compute.proto

namespace Google\Cloud\Compute\V1\RouterNat;

use UnexpectedValueException;

/**
 * Specify the Nat option for NAT64, which can take one of the following values: - ALL_IPV6_SUBNETWORKS: All of the IP ranges in every Subnetwork are allowed to Nat. - LIST_OF_IPV6_SUBNETWORKS: A list of Subnetworks are allowed to Nat (specified in the field nat64_subnetwork below) The default is NAT64_OPTION_UNSPECIFIED. Note that if this field contains NAT64_ALL_V6_SUBNETWORKS no other Router.Nat section in this region can also enable NAT64 for any Subnetworks in this network. Other Router.Nat sections can still be present to enable NAT44 only.
 *
 * Protobuf type <code>google.cloud.compute.v1.RouterNat.SourceSubnetworkIpRangesToNat64</code>
 */
class SourceSubnetworkIpRangesToNat64
{
    /**
     * A value indicating that the enum field is not set.
     *
     * Generated from protobuf enum <code>UNDEFINED_SOURCE_SUBNETWORK_IP_RANGES_TO_NAT64 = 0;</code>
     */
    const UNDEFINED_SOURCE_SUBNETWORK_IP_RANGES_TO_NAT64 = 0;
    /**
     * NAT64 is enabled for all the IPv6 subnet ranges. In dual stack subnets, NAT64 will only be enabled for IPv6-only VMs.
     *
     * Generated from protobuf enum <code>ALL_IPV6_SUBNETWORKS = 341632747;</code>
     */
    const ALL_IPV6_SUBNETWORKS = 341632747;
    /**
     * NAT64 is enabled for a list of IPv6 subnet ranges. In dual stack subnets, NAT64 will only be enabled for IPv6-only VMs. If this option is used, the nat64_subnetworks field must be specified.
     *
     * Generated from protobuf enum <code>LIST_OF_IPV6_SUBNETWORKS = 521079860;</code>
     */
    const LIST_OF_IPV6_SUBNETWORKS = 521079860;

    private static $valueToName = [
        self::UNDEFINED_SOURCE_SUBNETWORK_IP_RANGES_TO_NAT64 => 'UNDEFINED_SOURCE_SUBNETWORK_IP_RANGES_TO_NAT64',
        self::ALL_IPV6_SUBNETWORKS => 'ALL_IPV6_SUBNETWORKS',
        self::LIST_OF_IPV6_SUBNETWORKS => 'LIST_OF_IPV6_SUBNETWORKS',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}


