<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/cloud/compute/v1/compute.proto

namespace Google\Cloud\Compute\V1\ReservationSubBlocksReportFaultyRequest;

use UnexpectedValueException;

/**
 * The component that experienced the fault.
 *
 * Protobuf type <code>google.cloud.compute.v1.ReservationSubBlocksReportFaultyRequest.FailureComponent</code>
 */
class FailureComponent
{
    /**
     * A value indicating that the enum field is not set.
     *
     * Generated from protobuf enum <code>UNDEFINED_FAILURE_COMPONENT = 0;</code>
     */
    const UNDEFINED_FAILURE_COMPONENT = 0;
    /**
     * Generated from protobuf enum <code>FAILURE_COMPONENT_UNSPECIFIED = 332003744;</code>
     */
    const FAILURE_COMPONENT_UNSPECIFIED = 332003744;
    /**
     * Multiple hosts experienced the fault.
     *
     * Generated from protobuf enum <code>MULTIPLE_FAULTY_HOSTS = 423545298;</code>
     */
    const MULTIPLE_FAULTY_HOSTS = 423545298;
    /**
     * The NVLink switch experienced the fault.
     *
     * Generated from protobuf enum <code>NVLINK_SWITCH = 239107153;</code>
     */
    const NVLINK_SWITCH = 239107153;

    private static $valueToName = [
        self::UNDEFINED_FAILURE_COMPONENT => 'UNDEFINED_FAILURE_COMPONENT',
        self::FAILURE_COMPONENT_UNSPECIFIED => 'FAILURE_COMPONENT_UNSPECIFIED',
        self::MULTIPLE_FAULTY_HOSTS => 'MULTIPLE_FAULTY_HOSTS',
        self::NVLINK_SWITCH => 'NVLINK_SWITCH',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}


