<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/storage/control/v2/storage_control.proto

namespace Google\Cloud\Storage\Control\V2;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Request message for UpdateAnywhereCache.
 *
 * Generated from protobuf message <code>google.storage.control.v2.UpdateAnywhereCacheRequest</code>
 */
class UpdateAnywhereCacheRequest extends \Google\Protobuf\Internal\Message
{
    /**
     * Required. The Anywhere Cache instance to be updated.
     *
     * Generated from protobuf field <code>.google.storage.control.v2.AnywhereCache anywhere_cache = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    protected $anywhere_cache = null;
    /**
     * Required. List of fields to be updated. Mutable fields of AnywhereCache
     * include `ttl` and `admission_policy`.
     * To specify ALL fields, specify a single field with the value `*`. Note: We
     * recommend against doing this. If a new field is introduced at a later time,
     * an older client updating with the `*` may accidentally reset the new
     * field's value.
     * Not specifying any fields is an error.
     *
     * Generated from protobuf field <code>.google.protobuf.FieldMask update_mask = 2 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    protected $update_mask = null;
    /**
     * Optional. A unique identifier for this request. UUID is the recommended
     * format, but other formats are still accepted. This request is only
     * idempotent if a `request_id` is provided.
     *
     * Generated from protobuf field <code>string request_id = 3 [(.google.api.field_behavior) = OPTIONAL, (.google.api.field_info) = {</code>
     */
    protected $request_id = '';

    /**
     * @param \Google\Cloud\Storage\Control\V2\AnywhereCache $anywhereCache Required. The Anywhere Cache instance to be updated.
     * @param \Google\Protobuf\FieldMask                     $updateMask    Required. List of fields to be updated. Mutable fields of AnywhereCache
     *                                                                      include `ttl` and `admission_policy`.
     *
     *                                                                      To specify ALL fields, specify a single field with the value `*`. Note: We
     *                                                                      recommend against doing this. If a new field is introduced at a later time,
     *                                                                      an older client updating with the `*` may accidentally reset the new
     *                                                                      field's value.
     *
     *                                                                      Not specifying any fields is an error.
     *
     * @return \Google\Cloud\Storage\Control\V2\UpdateAnywhereCacheRequest
     *
     * @experimental
     */
    public static function build(\Google\Cloud\Storage\Control\V2\AnywhereCache $anywhereCache, \Google\Protobuf\FieldMask $updateMask): self
    {
        return (new self())
            ->setAnywhereCache($anywhereCache)
            ->setUpdateMask($updateMask);
    }

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type \Google\Cloud\Storage\Control\V2\AnywhereCache $anywhere_cache
     *           Required. The Anywhere Cache instance to be updated.
     *     @type \Google\Protobuf\FieldMask $update_mask
     *           Required. List of fields to be updated. Mutable fields of AnywhereCache
     *           include `ttl` and `admission_policy`.
     *           To specify ALL fields, specify a single field with the value `*`. Note: We
     *           recommend against doing this. If a new field is introduced at a later time,
     *           an older client updating with the `*` may accidentally reset the new
     *           field's value.
     *           Not specifying any fields is an error.
     *     @type string $request_id
     *           Optional. A unique identifier for this request. UUID is the recommended
     *           format, but other formats are still accepted. This request is only
     *           idempotent if a `request_id` is provided.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Google\Storage\Control\V2\StorageControl::initOnce();
        parent::__construct($data);
    }

    /**
     * Required. The Anywhere Cache instance to be updated.
     *
     * Generated from protobuf field <code>.google.storage.control.v2.AnywhereCache anywhere_cache = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     * @return \Google\Cloud\Storage\Control\V2\AnywhereCache|null
     */
    public function getAnywhereCache()
    {
        return $this->anywhere_cache;
    }

    public function hasAnywhereCache()
    {
        return isset($this->anywhere_cache);
    }

    public function clearAnywhereCache()
    {
        unset($this->anywhere_cache);
    }

    /**
     * Required. The Anywhere Cache instance to be updated.
     *
     * Generated from protobuf field <code>.google.storage.control.v2.AnywhereCache anywhere_cache = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     * @param \Google\Cloud\Storage\Control\V2\AnywhereCache $var
     * @return $this
     */
    public function setAnywhereCache($var)
    {
        GPBUtil::checkMessage($var, \Google\Cloud\Storage\Control\V2\AnywhereCache::class);
        $this->anywhere_cache = $var;

        return $this;
    }

    /**
     * Required. List of fields to be updated. Mutable fields of AnywhereCache
     * include `ttl` and `admission_policy`.
     * To specify ALL fields, specify a single field with the value `*`. Note: We
     * recommend against doing this. If a new field is introduced at a later time,
     * an older client updating with the `*` may accidentally reset the new
     * field's value.
     * Not specifying any fields is an error.
     *
     * Generated from protobuf field <code>.google.protobuf.FieldMask update_mask = 2 [(.google.api.field_behavior) = REQUIRED];</code>
     * @return \Google\Protobuf\FieldMask|null
     */
    public function getUpdateMask()
    {
        return $this->update_mask;
    }

    public function hasUpdateMask()
    {
        return isset($this->update_mask);
    }

    public function clearUpdateMask()
    {
        unset($this->update_mask);
    }

    /**
     * Required. List of fields to be updated. Mutable fields of AnywhereCache
     * include `ttl` and `admission_policy`.
     * To specify ALL fields, specify a single field with the value `*`. Note: We
     * recommend against doing this. If a new field is introduced at a later time,
     * an older client updating with the `*` may accidentally reset the new
     * field's value.
     * Not specifying any fields is an error.
     *
     * Generated from protobuf field <code>.google.protobuf.FieldMask update_mask = 2 [(.google.api.field_behavior) = REQUIRED];</code>
     * @param \Google\Protobuf\FieldMask $var
     * @return $this
     */
    public function setUpdateMask($var)
    {
        GPBUtil::checkMessage($var, \Google\Protobuf\FieldMask::class);
        $this->update_mask = $var;

        return $this;
    }

    /**
     * Optional. A unique identifier for this request. UUID is the recommended
     * format, but other formats are still accepted. This request is only
     * idempotent if a `request_id` is provided.
     *
     * Generated from protobuf field <code>string request_id = 3 [(.google.api.field_behavior) = OPTIONAL, (.google.api.field_info) = {</code>
     * @return string
     */
    public function getRequestId()
    {
        return $this->request_id;
    }

    /**
     * Optional. A unique identifier for this request. UUID is the recommended
     * format, but other formats are still accepted. This request is only
     * idempotent if a `request_id` is provided.
     *
     * Generated from protobuf field <code>string request_id = 3 [(.google.api.field_behavior) = OPTIONAL, (.google.api.field_info) = {</code>
     * @param string $var
     * @return $this
     */
    public function setRequestId($var)
    {
        GPBUtil::checkString($var, True);
        $this->request_id = $var;

        return $this;
    }

}

