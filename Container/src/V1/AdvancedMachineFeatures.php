<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/container/v1/cluster_service.proto

namespace Google\Cloud\Container\V1;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Specifies options for controlling advanced machine features.
 *
 * Generated from protobuf message <code>google.container.v1.AdvancedMachineFeatures</code>
 */
class AdvancedMachineFeatures extends \Google\Protobuf\Internal\Message
{
    /**
     * The number of threads per physical core. To disable simultaneous
     * multithreading (SMT) set this to 1. If unset, the maximum number of threads
     * supported per core by the underlying processor is assumed.
     *
     * Generated from protobuf field <code>optional int64 threads_per_core = 1;</code>
     */
    protected $threads_per_core = null;
    /**
     * Whether or not to enable nested virtualization (defaults to false).
     *
     * Generated from protobuf field <code>optional bool enable_nested_virtualization = 2;</code>
     */
    protected $enable_nested_virtualization = null;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type int|string $threads_per_core
     *           The number of threads per physical core. To disable simultaneous
     *           multithreading (SMT) set this to 1. If unset, the maximum number of threads
     *           supported per core by the underlying processor is assumed.
     *     @type bool $enable_nested_virtualization
     *           Whether or not to enable nested virtualization (defaults to false).
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Google\Container\V1\ClusterService::initOnce();
        parent::__construct($data);
    }

    /**
     * The number of threads per physical core. To disable simultaneous
     * multithreading (SMT) set this to 1. If unset, the maximum number of threads
     * supported per core by the underlying processor is assumed.
     *
     * Generated from protobuf field <code>optional int64 threads_per_core = 1;</code>
     * @return int|string
     */
    public function getThreadsPerCore()
    {
        return isset($this->threads_per_core) ? $this->threads_per_core : 0;
    }

    public function hasThreadsPerCore()
    {
        return isset($this->threads_per_core);
    }

    public function clearThreadsPerCore()
    {
        unset($this->threads_per_core);
    }

    /**
     * The number of threads per physical core. To disable simultaneous
     * multithreading (SMT) set this to 1. If unset, the maximum number of threads
     * supported per core by the underlying processor is assumed.
     *
     * Generated from protobuf field <code>optional int64 threads_per_core = 1;</code>
     * @param int|string $var
     * @return $this
     */
    public function setThreadsPerCore($var)
    {
        GPBUtil::checkInt64($var);
        $this->threads_per_core = $var;

        return $this;
    }

    /**
     * Whether or not to enable nested virtualization (defaults to false).
     *
     * Generated from protobuf field <code>optional bool enable_nested_virtualization = 2;</code>
     * @return bool
     */
    public function getEnableNestedVirtualization()
    {
        return isset($this->enable_nested_virtualization) ? $this->enable_nested_virtualization : false;
    }

    public function hasEnableNestedVirtualization()
    {
        return isset($this->enable_nested_virtualization);
    }

    public function clearEnableNestedVirtualization()
    {
        unset($this->enable_nested_virtualization);
    }

    /**
     * Whether or not to enable nested virtualization (defaults to false).
     *
     * Generated from protobuf field <code>optional bool enable_nested_virtualization = 2;</code>
     * @param bool $var
     * @return $this
     */
    public function setEnableNestedVirtualization($var)
    {
        GPBUtil::checkBool($var);
        $this->enable_nested_virtualization = $var;

        return $this;
    }

}

