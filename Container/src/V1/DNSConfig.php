<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/container/v1/cluster_service.proto

namespace Google\Cloud\Container\V1;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * DNSConfig contains the desired set of options for configuring clusterDNS.
 *
 * Generated from protobuf message <code>google.container.v1.DNSConfig</code>
 */
class DNSConfig extends \Google\Protobuf\Internal\Message
{
    /**
     * cluster_dns indicates which in-cluster DNS provider should be used.
     *
     * Generated from protobuf field <code>.google.container.v1.DNSConfig.Provider cluster_dns = 1;</code>
     */
    private $cluster_dns = 0;
    /**
     * cluster_dns_scope indicates the scope of access to cluster DNS records.
     *
     * Generated from protobuf field <code>.google.container.v1.DNSConfig.DNSScope cluster_dns_scope = 2;</code>
     */
    private $cluster_dns_scope = 0;
    /**
     * cluster_dns_domain is the suffix used for all cluster service records.
     *
     * Generated from protobuf field <code>string cluster_dns_domain = 3;</code>
     */
    private $cluster_dns_domain = '';

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type int $cluster_dns
     *           cluster_dns indicates which in-cluster DNS provider should be used.
     *     @type int $cluster_dns_scope
     *           cluster_dns_scope indicates the scope of access to cluster DNS records.
     *     @type string $cluster_dns_domain
     *           cluster_dns_domain is the suffix used for all cluster service records.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Google\Container\V1\ClusterService::initOnce();
        parent::__construct($data);
    }

    /**
     * cluster_dns indicates which in-cluster DNS provider should be used.
     *
     * Generated from protobuf field <code>.google.container.v1.DNSConfig.Provider cluster_dns = 1;</code>
     * @return int
     */
    public function getClusterDns()
    {
        return $this->cluster_dns;
    }

    /**
     * cluster_dns indicates which in-cluster DNS provider should be used.
     *
     * Generated from protobuf field <code>.google.container.v1.DNSConfig.Provider cluster_dns = 1;</code>
     * @param int $var
     * @return $this
     */
    public function setClusterDns($var)
    {
        GPBUtil::checkEnum($var, \Google\Cloud\Container\V1\DNSConfig\Provider::class);
        $this->cluster_dns = $var;

        return $this;
    }

    /**
     * cluster_dns_scope indicates the scope of access to cluster DNS records.
     *
     * Generated from protobuf field <code>.google.container.v1.DNSConfig.DNSScope cluster_dns_scope = 2;</code>
     * @return int
     */
    public function getClusterDnsScope()
    {
        return $this->cluster_dns_scope;
    }

    /**
     * cluster_dns_scope indicates the scope of access to cluster DNS records.
     *
     * Generated from protobuf field <code>.google.container.v1.DNSConfig.DNSScope cluster_dns_scope = 2;</code>
     * @param int $var
     * @return $this
     */
    public function setClusterDnsScope($var)
    {
        GPBUtil::checkEnum($var, \Google\Cloud\Container\V1\DNSConfig\DNSScope::class);
        $this->cluster_dns_scope = $var;

        return $this;
    }

    /**
     * cluster_dns_domain is the suffix used for all cluster service records.
     *
     * Generated from protobuf field <code>string cluster_dns_domain = 3;</code>
     * @return string
     */
    public function getClusterDnsDomain()
    {
        return $this->cluster_dns_domain;
    }

    /**
     * cluster_dns_domain is the suffix used for all cluster service records.
     *
     * Generated from protobuf field <code>string cluster_dns_domain = 3;</code>
     * @param string $var
     * @return $this
     */
    public function setClusterDnsDomain($var)
    {
        GPBUtil::checkString($var, True);
        $this->cluster_dns_domain = $var;

        return $this;
    }

}

